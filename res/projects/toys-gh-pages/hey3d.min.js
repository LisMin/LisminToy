function RaymarchingSphere(){function e(e){var r=new THREE.PlaneBufferGeometry(2,2),i=new THREE.ShaderMaterial({uniforms:c,vertexShader:" void main() \n {\n gl_Position = projectionMatrix*modelViewMatrix*vec4(position,1.0);\n}",fragmentShader:e}),a=new THREE.Mesh(r,i);n.add(a),c.iResolution.value.x=window.innerWidth/2,c.iResolution.value.y=window.innerHeight/2,o.start(),t()}function r(){i.aspect=window.innerWidth/window.innerHeight,i.updateProjectionMatrix(),a.setSize(window.innerWidth/2,window.innerHeight/2)}function t(){requestAnimationFrame(t),c.iGlobalTime.value+=o.getDelta(),a.render(n,i)}var n,i,a,o;n=new THREE.Scene,i=new THREE.OrthographicCamera(-1,1,1,-1,0,1),a=new THREE.WebGLRenderer,a.setSize(window.innerWidth/2,window.innerHeight/2),document.body.appendChild(a.domElement),window.addEventListener("resize",r,!1);var s=new THREE.TextureLoader;o=new THREE.Clock(!1);var c={iGlobalTime:{type:"f",value:0},iResolution:{type:"v2",value:new THREE.Vector2},iMouse:{type:"v4",value:new THREE.Vector4},iChannel0:{type:"t",value:s.load("res/textures/tex03.jpg")},iChannel1:{type:"t",value:s.load("res/textures/tex09.jpg")}},l=new THREE.XHRLoader;l.load("res/shaders/SpaceCurvatureFragment.glsl",e),a.domElement.addEventListener("mousedown",function(e){var r=a.domElement,t=r.getBoundingClientRect();c.iMouse.value.x=(e.clientX-t.left)/window.innerWidth*2-1,c.iMouse.value.y=(e.clientY-t.top)/window.innerHeight*-2+1}),a.domElement.addEventListener("mouseup",function(e){var r=a.domElement,t=r.getBoundingClientRect();c.iMouse.value.z=(e.clientX-t.left)/window.innerWidth*2-1,c.iMouse.value.w=(e.clientY-t.top)/window.innerHeight*-2+1})}var hey3d=hey3d||{};hey3d.ENGINEVERSION="HEY3DJS v2.0";var d=d||{};hey3d.log=function(){return console.log.apply(console,arguments)},hey3d.newElement=function(e){return document.createElement(e)},hey3d._addEventListener=function(e,r,t,n){e.addEventListener(r,t,n)},hey3d._isNodeJs="undefined"!=typeof require&&require("fs"),hey3d.each=function(e,r,t){if(e)if(e instanceof Array){for(var n=0,i=e.length;i>n;n++)if(r.call(t,e[n],n)===!1)return}else for(var a in e)if(r.call(t,e[a],a)===!1)return},hey3d.extend=function(e){var r=arguments.length>=2?Array.prototype.slice.call(arguments,1):[];return hey3d.each(r,function(r){for(var t in r)r.hasOwnProperty(t)&&(e[t]=r[t])}),e},hey3d.isFunction=function(e){return"function"==typeof e},hey3d.isNumber=function(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)},hey3d.isString=function(e){return"string"==typeof e||"[object String]"===Object.prototype.toString.call(e)},hey3d.isArray=function(e){return Array.isArray(e)||"object"==typeof e&&"[object Array]"===Object.prototype.toString.call(e)},hey3d.isUndefined=function(e){return"undefined"==typeof e},hey3d.isObject=function(e){return"object"==typeof e&&"[object Object]"===Object.prototype.toString.call(e)},hey3d.isCrossOrigin=function(e){if(!e)return hey3d.log("invalid URL"),!1;var r=e.indexOf("://");if(-1===r)return!1;var t=e.indexOf("/",r+3),n=-1===t?e:e.substring(0,t);return n!==location.origin},hey3d.AsyncPool=function(e,r,t,n,i){var a=this;a._srcObj=e,a._limit=r,a._pool=[],a._iterator=t,a._iteratorTarget=i,a._onEnd=n,a._onEndTarget=i,a._results=e instanceof Array?[]:{},a._isErr=!1,hey3d.each(e,function(e,r){a._pool.push({index:r,value:e})}),a.size=a._pool.length,a.finishedSize=0,a._workingSize=0,a._limit=a._limit||a.size,a.onIterator=function(e,r){a._iterator=e,a._iteratorTarget=r},a.onEnd=function(e,r){a._onEnd=e,a._onEndTarget=r},a._handleItem=function(){var e=this;if(!(0===e._pool.length||e._workingSize>=e._limit)){var r=e._pool.shift(),t=r.value,n=r.index;e._workingSize++,e._iterator.call(e._iteratorTarget,t,n,function(r){if(!e._isErr){if(e.finishedSize++,e._workingSize--,r)return e._isErr=!0,void(e._onEnd&&e._onEnd.call(e._onEndTarget,r));var t=Array.prototype.slice.call(arguments,1);return e._results[this.index]=t[0],e.finishedSize===e.size?void(e._onEnd&&e._onEnd.call(e._onEndTarget,null,e._results)):void e._handleItem()}}.bind(r),e)}},a.flow=function(){var e=this;if(0===e._pool.length)return void(e._onEnd&&e._onEnd.call(e._onEndTarget,null,[]));for(var r=0;r<e._limit;r++)e._handleItem()}},hey3d.async={series:function(e,r,t){var n=new hey3d.AsyncPool(e,1,function(e,r,n){e.call(t,n)},r,t);return n.flow(),n},parallel:function(e,r,t){var n=new hey3d.AsyncPool(e,0,function(e,r,n){e.call(t,n)},r,t);return n.flow(),n},waterfall:function(e,r,t){var n=[],i=[null],a=new hey3d.AsyncPool(e,1,function(r,a,o){n.push(function(r){n=Array.prototype.slice.call(arguments,1),e.length-1===a&&(i=i.concat(n)),o.apply(null,arguments)}),r.apply(t,n)},function(e){return r?e?r.call(t,e):void r.apply(t,i):void 0});return a.flow(),a},map:function(e,r,t,n){var i=r;"object"==typeof r&&(t=r.cb,n=r.iteratorTarget,i=r.iterator);var a=new hey3d.AsyncPool(e,0,i,t,n);return a.flow(),a},mapLimit:function(e,r,t,n,i){var a=new hey3d.AsyncPool(e,r,t,n,i);return a.flow(),a}},hey3d.path={join:function(){for(var e=arguments.length,r="",t=0;e>t;t++)r=(r+(""===r?"":"/")+arguments[t]).replace(/(\/|\\\\)$/,"");return r},extname:function(e){var r=/(\.[^\.\/\?\\]*)(\?.*)?$/.exec(e);return r?r[1]:null},mainFileName:function(e){if(e){var r=e.lastIndexOf(".");if(-1!==r)return e.substring(0,r)}return e},basename:function(e,r){var t=e.indexOf("?");t>0&&(e=e.substring(0,t));var n=/(\/|\\\\)([^(\/|\\\\)]+)$/g,i=n.exec(e.replace(/(\/|\\\\)$/,""));if(!i)return null;var a=i[2];return r&&e.substring(e.length-r.length).toLowerCase()===r.toLowerCase()?a.substring(0,a.length-r.length):a},dirname:function(e){return e.replace(/((.*)(\/|\\|\\\\))?(.*?\..*$)?/,"$2")},changeExtname:function(e,r){r=r||"";var t=e.indexOf("?"),n="";return t>0&&(n=e.substring(t),e=e.substring(0,t)),t=e.lastIndexOf("."),0>t?e+r+n:e.substring(0,t)+r+n},changeBasename:function(e,r,t){if(0===r.indexOf("."))return this.changeExtname(e,r);var n=e.indexOf("?"),i="",a=t?this.extname(e):"";return n>0&&(i=e.substring(n),e=e.substring(0,n)),n=e.lastIndexOf("/"),n=0>=n?0:n+1,e.substring(0,n)+r+a+i}},hey3d.loader={_jsCache:{},_register:{},_langPathCache:{},_aliases:{},resPath:"",audioPath:"",cache:{},getXMLHttpRequest:function(){return window.XMLHttpRequest?new window.XMLHttpRequest:new ActiveXObject("MSXML2.XMLHTTP")},_getArgs4Js:function(e){var r=e[0],t=e[1],n=e[2],i=["",null,null];if(1===e.length)i[1]=r instanceof Array?r:[r];else if(2===e.length)"function"==typeof t?(i[1]=r instanceof Array?r:[r],i[2]=t):(i[0]=r||"",i[1]=t instanceof Array?t:[t]);else{if(3!==e.length)throw"arguments error to load js!";i[0]=r||"",i[1]=t instanceof Array?t:[t],i[2]=n}return i},loadJs:function(e,r,t){var n=this,i=n._jsCache,a=n._getArgs4Js(arguments),o=a[0],s=a[1],c=a[2];navigator.userAgent.indexOf("Trident/5")>-1?n._load4Dependency(n._createScript.bing(n),o,s,0,c):hey3d.async.map(s,function(e,r,t){var a=hey3d.path.join(o,e);return i[a]&&a.indexOf("shaders/ShaderLib.js")<0?t(null):void n._createScript(a,!1,t)},c)},loadJsWithImg:function(e,r,t){var n=this,i=n._getArgs4Js(arguments);this.loadJs(i[0],i[1],function(e){if(e)throw e;i[2]&&i[2]()})},_createScript:function(e,r,t){var n=document,i=this,a=hey3d.newElement("script");a.async=r,i._jsCache[e]=!0,hey3d.game.config.noCache&&"string"==typeof e?i._noCacheRex.test(e)?a.src=e+"&_t="+(new Date-0):a.src=e+"?_t="+(new Date-0):a.src=e,hey3d._addEventListener(a,"load",function(){a.parentNode.removeChild(a),this.removeEventListener("load",arguments.callee,!1),t()},!1),hey3d._addEventListener(a,"error",function(){a.parentNode.removeChild(a),t("Load "+e+" failed!")},!1),n.body.appendChild(a)},_load4Dependency:function(e,r,t,n,i){if(n>=t.length)return void(i&&i());var a=this;e(hey3d.path.join(r,t[n]),function(o){return o?i(o):void a._load4Dependency(e.bind(this),r,t,n+1,i)})},_loadJsImg:function(){var e=document,r=e.getElementById("cocos2d_loadJsImg");if(!r){r=hey3d.newElement("img"),hey3d._loadingImage&&(r.src=hey3d._loadingImage);var t=e.getElementById(hey3d.game.config.id);t.style.backgroundColor="black",t.parentNode.appendChild(r);var n=getComputedStyle?getComputedStyle(t):t.currentStyle;n||(n={width:t.width,height:t.height}),r.style.left=t.offsetLeft+(parseFloat(n.width)-r.width)/2+"px",r.style.top=t.offsetTop+(parseFloat(n.height)-r.height)/2+"px",r.style.position="absolute"}return r},loadWorker:function(e,r,t){this.workText="";var n=this,i=n._getArgs4Js(arguments),a=function(){var e=hey3d.newElement("script");e.innerHTML="BABYLON.CollisionWorker = "+JSON.stringify(n.workText)+";",document.body.appendChild(e),n.workText=null,s()},o=i[0],r=i[1],s=i[2];navigator.userAgent.indexOf("Trident/5")>-1?n._load4Dependency(n._createScriptForWorker.bind(n),o,r,0,s):hey3d.async.map(r,function(e,r,t){var i=hey3d.path.join(o,e);n._createScriptForWorker(i,t)},a)},_createScriptForWorker:function(e,r){var t=this;this.loadTxt(e,function(e,n){e?r(e):(t.workText+=n,r())})},loadShaders:function(e,r,t){this.includeShaders={},this.shaders={};var n=this,i=n._getArgs4Js(arguments),a=function(){c()},o=i[0],s=i[1],c=i[2];navigator.userAgent.indexOf("Trident/5")>-1?n._load4Dependency(n._createScriptForShader.bind(n),o,s,0,c):hey3d.async.map(s,function(e,r,t){var i=hey3d.path.join(o,e);n._createScriptForShader(i,t)},a)},_createScriptForShader:function(e,r){this.loadTxt(e,function(t,n){if(t)r(t);else{var i=hey3d.path.basename(e);i.indexOf(".glsl")>-1&&(i=i.replace(".glsl","")),THREE.ShaderChunk[i]=n,r()}})},loadTxt:function(e,r){if(hey3d._isNodeJs){var t=require("fs");t.readFile(e,function(e,t){e?r(e):r(null,t.toString())})}else{var n=this.getXMLHttpRequest(),i="load "+e+" failed!";n.open("GET",e,!0),/msie/i.test(navigator.userAgent)&&!/opera/i.test(navigator.userAgent)?(n.setRequestHeader("Accept-Charset","utf-8"),n.onreadystatechange=function(){4===n.readyState&&(200===n.status?r(null,n.responseText):r(i))}):(n.overrideMimeType&&n.overrideMimeType("text/plain; charset=utf-8"),n.onload=function(){4===n.readyState&&(200===n.status?r(null,n.responseText):r(i))}),n.send(null)}},_loadTxtSync:function(e){if(hey3d._isNodeJs){var r=require("fs");return r.readFileSync(e).toString()}var t=this.getXMLHttpRequest();return t.open("GET",e,!1),/msie/i.test(navigator.userAgent)&&!/opera/i.test(navigator.userAgent)?t.setRequestHeader("Accept-Charset","utf-8"):t.overrideMimeType&&t.overrideMimeType("text/plain; charset=utf-8"),t.send(null),4===!t.readyState||200!==t.status?null:t.responseText},loadCsb:function(e,r){var t=new XMLHttpRequest;t.open("GET",e,!0),t.responseType="arraybuffer",t.onload=function(){var n=t.response;n&&(window.msg=n),4===t.readyState&&(200===t.status?r(null,t.response):r("load "+e+" failed!"))},t.send(null)},loadJson:function(e,r){this.loadTxt(e,function(t,n){if(t)r(t);else{try{var i=JSON.parse(n)}catch(a){throw"parse json ["+e+"] failed : "+a}r(null,i)}})},_checkIsImageURL:function(e){var r=/(\.png)|(\.jpg)|(\.bmp)|(\.jpeg)|(\.gif)/.exec(e);return null!=r},loadImg:function(e,r,t){var n={isCrossOrigin:!0};void 0!==t?n.isCrossOrigin=null===r.isCrossOrigin?n.isCrossOrigin:r.isCrossOrigin:void 0!==r&&(t=r);var i=this.getRes(e);if(i)return t&&t(null,i),i;i=new Image,n.isCrossOrigin&&"file://"!==location.origin&&(i.crossOrigin="Anonymous");var a=function(){this.removeEventListener("load",a,!1),this.removeEventListener("error",s,!1),hey3d.loader.cache[e]=i,t&&t(null,i)},o=this,s=function(){this.removeEventListener("error",s,!1),i.crossOrigin&&"anonymous"===i.crossOrigin.toLowerCase()?(n.isCrossOrigin=!1,o.release(e),hey3d.loader.loadImg(e,n,t)):"function"==typeof t&&t("load image failed")};return hey3d._addEventListener(i,"load",a),hey3d._addEventListener(i,"error",s),i.src=e,i},_loadResIterator:function(e,r,t){var n=this,i=null,a=e.type;a?(a="."+a.toLowerCase(),i=e.src?e.src:e.name+a):(i=e,a=hey3d.path.extname(i));var o=n.getRes(i);if(o)return t(null,o);var s=null;if(a&&(s=n._register[a.toLowerCase()]),!s)return hey3d.log("loader for ["+a+"] not exists!"),t();var c=s.getBasePath?s.getBasePath():n.resPath,l=n.getUrl(c,i);hey3d.game.config.noCache&&"string"==typeof l&&(l+=n._noCacheRex.test(l)?"&_t="+(new Date-0):"?_t="+(new Date-0)),s.load(l,i,e,function(e,r){e?(hey3d.log(e),n.cache[i]=null,delete n.cache[i],t()):(n.cache[i]=r,t(null,r))})},_noCacheRex:/\?/,getUrl:function(e,r){var t=this,n=t._langPathCache,i=hey3d.path;if(void 0!==e&&void 0===r){r=e;var a=i.extname(r);a=a?a.toLowerCase():"";var o=t._register[a];e=o&&o.getBasePath?o.getBasePath():t.resPath}if(r=hey3d.path.join(e||"",r),r.match(/[\/(\\\\)]lang[\/(\\\\)]/i)){if(n[r])return n[r];var s=i.extname(r)||"";r=n[r]=r.substring(0,r.length-s.length)+"_"+cc.sys.language+s}return r},load:function(e,r,t){var n=this,i=arguments.length;if(0===i)throw"arguments error!";3===i?"function"==typeof r&&(r="function"==typeof t?{trigger:r,cb:t}:{cb:r,cbTarget:t}):2===i?"function"==typeof r&&(r={cb:r}):1===i&&(r={}),e instanceof Array||(e=[e]);var a=new hey3d.AsyncPool(e,0,function(e,t,i,a){n._loadResIterator(e,t,function(e){if(e)return i(e);var t=Array.prototype.slice.call(arguments,1);r.trigger&&r.trigger.call(r.triggerTarget,t[0],a.size,a.finishedSize),i(null,t[0])})},r.cb,r.cbTarget);return a.flow(),a},_handleAliases:function(e,r){var t=this,n=t._aliases,i=[];for(var a in e){var o=e[a];n[a]=o,i.push(o)}this.load(i,r)},loadAliases:function(e,r){var t=this,n=t.getRes(e);n?t._handleAliases(n.filenames,r):t.load(e,function(e,n){t._handleAliases(n[0].filenames,r)})},register:function(e,r){if(e&&r){var t=this;if("string"==typeof e)return this._register[e.trim().toLowerCase()]=r;for(var n=0,i=e.length;i>n;n++)t._register["."+e[n].trim().toLowerCase()]=r}},getRes:function(e){return this.cache[e]||this.cache[this._aliases[e]]},release:function(e){var r=this.cache,t=this._aliases;delete r[e],delete r[t[e]],delete t[e]},releaseAll:function(){var e=this.cache,r=this._aliases;for(var t in e)delete e[t];for(var t in r)delete r[t]}},function(){var e,r,t=window;hey3d.isUndefined(document.hidden)?hey3d.isUndefined(document.mozHidden)?hey3d.isUndefined(document.msHidden)?hey3d.isUndefined(document.webkitHidden)||(e="webkitHidden",r="webkitvisibilitychange"):(e="msHidden",r="msvisibilitychange"):(e="mozHidden",r="mozvisibilitychange"):(e="hidden",r="visibilitychange");var n=function(){hey3d.eventManager&&hey3d.game._eventHide&&hey3d.eventManager.dispatchEvent(hey3d.game._eventHide)},i=function(){hey3d.eventManager&&hey3d.game._eventShow&&hey3d.eventManager.dispatchEvent(hey3d.game._eventShow),hey3d.game._intervalId&&(window.cancelAnimationFrame(hey3d.game._intervalId),hey3d.game._mainLoop())};e?hey3d._addEventListener(document,r,function(){document[e]?n():i()},!1):(hey3d._addEventListener(t,"blur",n,!1),hey3d._addEventListener(t,"focus",i,!1)),navigator.userAgent.indexOf("MicroMessenger")>-1&&(t.onfocus=function(){i()}),"onpageshow"in window&&"onpagehide"in window&&(hey3d._addEventListener(t,"pagehide",n,!1),hey3d._addEventListener(t,"pageshow",i,!1)),t=null,r=null}(),hey3d._initSys=function(){hey3d.sys={};var e=hey3d.sys;e.OS_IOS="iOS",e.OS_ANDROID="Android",e.OS_WINDOWS="Windows",e.OS_MARMALADE="Marmalade",e.OS_LINUX="Linux",e.OS_BADA="Bada",e.OS_BLACKBERRY="Blackberry",e.OS_OSX="OS X",e.OS_WP8="WP8",e.OS_WINRT="WINRT",e.OS_UNKNOWN="Unknown",e.UNKNOWN=0,e.IOS=1,e.ANDROID=2,e.WIN32=3,e.MARMALADE=4,e.LINUX=5,e.BADA=6,e.BLACKBERRY=7,e.MACOS=8,e.NACL=9,e.EMSCRIPTEN=10,e.TIZEN=11,e.QT5=12,e.WP8=13,e.WINRT=14,e.MOBILE_BROWSER=100,e.DESKTOP_BROWSER=101,e.BROWSER_TYPE_WECHAT="wechat",e.BROWSER_TYPE_ANDROID="androidbrowser",e.BROWSER_TYPE_IE="ie",e.BROWSER_TYPE_QQ="qqbrowser",e.BROWSER_TYPE_MOBILE_QQ="mqqbrowser",e.BROWSER_TYPE_UC="ucbrowser",e.BROWSER_TYPE_360="360browser",e.BROWSER_TYPE_BAIDU_APP="baiduboxapp",e.BROWSER_TYPE_BAIDU="baidubrowser",e.BROWSER_TYPE_MAXTHON="maxthon",e.BROWSER_TYPE_OPERA="opera",e.BROWSER_TYPE_OUPENG="oupeng",e.BROWSER_TYPE_MIUI="miuibrowser",e.BROWSER_TYPE_FIREFOX="firefox",e.BROWSER_TYPE_SAFARI="safari",e.BROWSER_TYPE_CHROME="chrome",e.BROWSER_TYPE_LIEBAO="liebao",e.BROWSER_TYPE_QZONE="qzone",e.BROWSER_TYPE_SOUGOU="sogou",e.BROWSER_TYPE_UNKNOWN="unknown",e.isNative=!1;var r=([e.BROWSER_TYPE_BAIDU,e.BROWSER_TYPE_OPERA,e.BROWSER_TYPE_FIREFOX,e.BROWSER_TYPE_CHROME,e.BROWSER_TYPE_SAFARI],[e.OS_IOS,e.OS_WINDOWS,e.OS_OSX,e.OS_LINUX],[e.BROWSER_TYPE_BAIDU,e.BROWSER_TYPE_OPERA,e.BROWSER_TYPE_FIREFOX,e.BROWSER_TYPE_CHROME,e.BROWSER_TYPE_BAIDU_APP,e.BROWSER_TYPE_SAFARI,e.BROWSER_TYPE_UC,e.BROWSER_TYPE_QQ,e.BROWSER_TYPE_MOBILE_QQ,e.BROWSER_TYPE_IE],window),t=r.navigator,n=document,i=n.documentElement,a=t.userAgent.toLowerCase();e.isMobile=-1!==a.indexOf("mobile")||-1!==a.indexOf("android"),e.platform=e.isMobile?e.MOBILE_BROWSER:e.DESKTOP_BROWSER;var o=e.BROWSER_TYPE_UNKNOWN,s=a.match(/sogou|qzone|liebao|micromessenger|qqbrowser|ucbrowser|360 aphone|360browser|baiduboxapp|baidubrowser|maxthon|trident|oupeng|opera|miuibrowser|firefox/i)||a.match(/chrome|safari/i);s&&s.length>0?(o=s[0],"micromessenger"===o?o=e.BROWSER_TYPE_WECHAT:"safari"===o&&a.match(/android.*applewebkit/)?o=e.BROWSER_TYPE_ANDROID:"trident"===o?o=e.BROWSER_TYPE_IE:"360 aphone"===o&&(o=e.BROWSER_TYPE_360)):a.indexOf("iphone")&&a.indexOf("mobile")&&(o="safari"),e.browserType=o;var c=!!a.match(/(iPad|iPhone|iPod)/i),l=!(!a.match(/android/i)&&!t.platform.match(/android/i)),h=e.OS_UNKNOWN;-1!==t.appVersion.indexOf("Win")?h=e.OS_WINDOWS:c?h=e.OS_IOS:-1!==t.appVersion.indexOf("Mac")?h=e.OS_OSX:-1!==t.appVersion.indexOf("X11")&&-1===t.appVersion.indexOf("Linux")?h=e.OS_UNIX:l?h=e.OS_ANDROID:-1!==t.appVersion.indexOf("Linux")&&(h=e.OS_LINUX),e.os=h;try{var d=e.localStorage=r.localStorage;d.setItem("storage",""),d.removeItem("storage"),d=null}catch(u){"SECURITY_ERR"!==u.name&&"QuotaExceededError"!==u.name||hey3d.log("Warning: localStorage isn't enabled. Please confirm browser cookie or privacy option"),e.localStorage=function(){}}var p=e.capabilities={canvas:!0};(void 0!==i.ontouchstart||void 0!==n.ontouchstart||t.msPointerEnabled)&&(p.touches=!0),void 0!==i.onmouseup&&(p.mouse=!0),void 0!==i.onkeyup&&(p.keyboard=!0),(r.DeviceMotionEvent||r.DeviceOrientationEvent)&&(p.accelerometer=!0),e.dump=function(){var e=this,r="";r+="isMobile : "+e.isMobile+"\r\n",r+="browserType : "+e.browserType+"\r\n",r+="capabilities : "+JSON.stringify(e.capabilities)+"\r\n",r+="os : "+e.os+"\r\n",r+="platform : "+e.platform+"\r\n",hey3d.log(r)},e.openURL=function(e){window.open(e)}},hey3d.designSize={},hey3d.sizeScale=1,hey3d._setSizeCalled=!1,hey3d.setDesignResolutionSize=function(e,r,t){hey3d._setSizeCalled||(hey3d._setSizeCalled=!0,hey3d._setupCanvasDiv(t),hey3d.designSize.w=e,hey3d.designSize.h=r,hey3d.onResizeDesign(),window.addEventListener("resize",hey3d.onResizeDesign))},hey3d.onResizeDesign=function(){var e=hey3d._gameDivParent.getBoundingClientRect();e.width/e.height>hey3d.designSize.w/hey3d.designSize.h?hey3d.sizeScale=e.height/hey3d.designSize.h:hey3d.sizeScale=e.width/hey3d.designSize.w,hey3d._gameDiv.style.position="absolute",hey3d._gameDiv.style.left="50%",hey3d._gameDiv.style.top="50%",hey3d._gameDiv.style.width=hey3d.designSize.w*hey3d.sizeScale+"px",hey3d._gameDiv.style.height=hey3d.designSize.h*hey3d.sizeScale+"px",hey3d._gameDiv.style.marginLeft=-hey3d.designSize.w/2*hey3d.sizeScale+"px",hey3d._gameDiv.style.marginTop=-hey3d.designSize.h/2*hey3d.sizeScale+"px"},hey3d._setupCanvasDiv=function(e){var r,t,n=hey3d._canvas;r=hey3d.container=hey3d.newElement("div"),n.parentNode.insertBefore(r,n),r.appendChild(n),r.setAttribute("id","container"),t=r.style,t.margin="0 auto",t.overflow="hidden",hey3d._gameDiv=r,hey3d._gameDivParent=e||document.body},hey3d._setupCalled=!1,hey3d._setup=function(e,r,t){var n=document.getElementById(e);if(!hey3d._setupCalled){if(hey3d._setupCalled=!0,hey3d.log(hey3d.ENGINEVERSION),hey3d.game._setAnimFrame(),hey3d._canvas=n,hey3d._canvas.oncontextmenu=function(){return!1},hey3d.sys.isMobile){var i=hey3d.newElement("style");i.type="text/css",document.body.appendChild(i),i.textContent="body,canvas,div{ -moz-user-select: none;-webkit-user-select: none;-ms-user-select: none;-khtml-user-select: none;-webkit-tap-highlight-color:rgba(0,0,0,0);}"}hey3d.director=hey3d.Director._getInstance()}},hey3d.game={EVENT_HIDE:"game_on_hide",EVENT_SHOW:"game_on_show",_eventHide:null,_eventShow:null,CONFIG_KEY:{engineDir:"engineDir",showFPS:"showFPS",id:"id",jsList:"jsList",classReleaseMode:"classReleaseMode"},_prepareCalled:!1,_prepared:!1,_paused:!0,_intervalId:null,config:null,run:function(e){var r=this,t=function(){e&&(r.config[r.CONFIG_KEY.id]=e),r._prepareCalled||r.prepare(function(){r._prepared=!0}),r._checkPrepare=setInterval(function(){r._prepared&&(r.onStart(),clearInterval(r._checkPrepare))},10)};document.body?t():hey3d._addEventListener(window,"load",function(){this.removeEventListener("load",arguments.callee,!1),t()},!1)},_setAnimFrame:function(){this._lastTime=new Date,this._frameTime=1e3/60,hey3d.sys.os===hey3d.sys.OS_IOS&&hey3d.sys.browserType===hey3d.sys.BROWSER_TYPE_WECHAT?(window.requestAnimFrame=this._stTime,window.cancelAnimationFrame=this._ctTime):(window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||this._stTime,window.cancelAnimationFrame=window.cancelAnimationFrame||window.cancelRequestAnimationFrame||window.msCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.webkitCancelRequestAnimationFrame||window.msCancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.oCancelAnimationFrame||this._ctTime)},_stTime:function(e){var r=(new Date).getTime(),t=Math.max(0,hey3d.game._frameTime-(r-hey3d.game._lastTime)),n=window.setTimeout(function(){e()},t);return hey3d.game._lastTime=r+t,n},_ctTime:function(e){window.clearTimeout(e)},_mainLoop:function(){var e=this,r=function(){e._paused||(hey3d.director.mainLoop(),e._intervalId&&window.cancelAnimationFrame(e._intervalId),e._intervalId=window.requestAnimFrame(r))};window.requestAnimFrame(r),e._paused=!1},_initConfig:function(){var e=this,r=e.CONFIG_KEY,t=function(e){return e[r.engineDir]=e[r.engineDir]||"frame",e[r.id]=e[r.id]||"renderCanvas",e};if(document.ccConfig)e.config=t(document.ccConfig);else try{for(var n=document.getElementsByTagName("script"),i=0;i<n.length;i++){var a=n[i].getAttribute("hey3d");if(hey3d.log(n[i].src),""===a||a)break}var o,s,c;i<n.length&&(o=n[i].src,o&&(c=/(.*)\//.exec(o)[0],hey3d.loader.resPath=c,o=hey3d.path.join(c,"project.json")),s=hey3d.loader._loadTxtSync(o)),s||(s=hey3d.loader._loadTxtSync("project.json"));var l=JSON.parse(s);e.config=t(l||{})}catch(h){hey3d.log("Failed to read or parse project.json"),e.config=t({})}hey3d._initSys()},_jsAddedCache:{},_getJsListOfModule:function(e,r,t){var n=this._jsAddedCache;if(n[r])return null;t=t||"";var i=[],a=e[r];if(!a)throw"can not find module ["+r+"]";for(var o=hey3d.path,s=0,c=a.length;c>s;s++){var l=a[s];if(!n[l]){var h=o.extname(l);if(h)i.push(o.join(t,l));else{var d=this._getJsListOfModule(e,l,t);d&&(i=i.concat(d))}n[l]=1}}return i},prepare:function(e){var r=this,t=r.config,n=r.CONFIG_KEY,i=t[n.engineDir],a=hey3d.loader;r._prepareCalled=!0;var o=t[n.jsList]||[];if("undefined"!=typeof THREE)a.loadJsWithImg("",o,function(t){if(t)throw t;r._prepared=!0,e&&e()});else{var s=hey3d.path.join(i,"moduleConfig.json");a.loadJson(s,function(n,a){if(n)throw n;for(var s=t.modules||[],c=a.module,l=[],h=0,d=s.length;d>h;h++){var u=r._getJsListOfModule(c,s[h],i);u&&(l=l.concat(u))}l=l.concat(o);for(var p=[],f=[],h=0;h<l.length;h++)".glsl"===hey3d.path.extname(l[h])?f.push(l[h]):p.push(l[h]);hey3d.loader.loadJsWithImg(p,function(t){if(t)throw t;r._prepared=!0,e&&e()})})}}},hey3d.game._initConfig();var THREE={REVISION:"78"};"function"==typeof define&&define.amd?define("three",THREE):"undefined"!=typeof exports&&"undefined"!=typeof module&&(module.exports=THREE),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Math.sign&&(Math.sign=function(e){return 0>e?-1:e>0?1:+e}),void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1]}}),void 0===Object.assign&&!function(){Object.assign=function(e){"use strict";if(void 0===e||null===e)throw new TypeError("Cannot convert undefined or null to object");for(var r=Object(e),t=1;t<arguments.length;t++){var n=arguments[t];if(void 0!==n&&null!==n)for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(r[i]=n[i])}return r}}(),Object.assign(THREE,{MOUSE:{LEFT:0,MIDDLE:1,RIGHT:2},CullFaceNone:0,CullFaceBack:1,CullFaceFront:2,CullFaceFrontBack:3,FrontFaceDirectionCW:0,FrontFaceDirectionCCW:1,BasicShadowMap:0,PCFShadowMap:1,PCFSoftShadowMap:2,FrontSide:0,BackSide:1,DoubleSide:2,FlatShading:1,SmoothShading:2,NoColors:0,FaceColors:1,VertexColors:2,NoBlending:0,NormalBlending:1,AdditiveBlending:2,SubtractiveBlending:3,MultiplyBlending:4,CustomBlending:5,AddEquation:100,SubtractEquation:101,ReverseSubtractEquation:102,MinEquation:103,MaxEquation:104,ZeroFactor:200,OneFactor:201,SrcColorFactor:202,OneMinusSrcColorFactor:203,SrcAlphaFactor:204,OneMinusSrcAlphaFactor:205,DstAlphaFactor:206,OneMinusDstAlphaFactor:207,DstColorFactor:208,OneMinusDstColorFactor:209,SrcAlphaSaturateFactor:210,NeverDepth:0,AlwaysDepth:1,LessDepth:2,LessEqualDepth:3,EqualDepth:4,GreaterEqualDepth:5,GreaterDepth:6,NotEqualDepth:7,MultiplyOperation:0,MixOperation:1,AddOperation:2,NoToneMapping:0,LinearToneMapping:1,ReinhardToneMapping:2,Uncharted2ToneMapping:3,CineonToneMapping:4,UVMapping:300,CubeReflectionMapping:301,CubeRefractionMapping:302,EquirectangularReflectionMapping:303,EquirectangularRefractionMapping:304,SphericalReflectionMapping:305,CubeUVReflectionMapping:306,CubeUVRefractionMapping:307,RepeatWrapping:1e3,ClampToEdgeWrapping:1001,MirroredRepeatWrapping:1002,NearestFilter:1003,NearestMipMapNearestFilter:1004,NearestMipMapLinearFilter:1005,LinearFilter:1006,LinearMipMapNearestFilter:1007,LinearMipMapLinearFilter:1008,UnsignedByteType:1009,ByteType:1010,ShortType:1011,UnsignedShortType:1012,IntType:1013,UnsignedIntType:1014,FloatType:1015,HalfFloatType:1025,UnsignedShort4444Type:1016,UnsignedShort5551Type:1017,UnsignedShort565Type:1018,AlphaFormat:1019,RGBFormat:1020,RGBAFormat:1021,LuminanceFormat:1022,LuminanceAlphaFormat:1023,RGBEFormat:THREE.RGBAFormat,DepthFormat:1026,RGB_S3TC_DXT1_Format:2001,RGBA_S3TC_DXT1_Format:2002,RGBA_S3TC_DXT3_Format:2003,RGBA_S3TC_DXT5_Format:2004,RGB_PVRTC_4BPPV1_Format:2100,RGB_PVRTC_2BPPV1_Format:2101,RGBA_PVRTC_4BPPV1_Format:2102,RGBA_PVRTC_2BPPV1_Format:2103,RGB_ETC1_Format:2151,LoopOnce:2200,LoopRepeat:2201,LoopPingPong:2202,InterpolateDiscrete:2300,InterpolateLinear:2301,InterpolateSmooth:2302,ZeroCurvatureEnding:2400,ZeroSlopeEnding:2401,WrapAroundEnding:2402,TrianglesDrawMode:0,TriangleStripDrawMode:1,TriangleFanDrawMode:2,LinearEncoding:3e3,sRGBEncoding:3001,GammaEncoding:3007,RGBEEncoding:3002,LogLuvEncoding:3003,RGBM7Encoding:3004,RGBM16Encoding:3005,RGBDEncoding:3006,BasicDepthPacking:3200,RGBADepthPacking:3201}),THREE.Color=function(e,r,t){return void 0===r&&void 0===t?this.set(e):this.setRGB(e,r,t)},THREE.Color.prototype={constructor:THREE.Color,r:1,g:1,b:1,set:function(e){return e instanceof THREE.Color?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e),this},setScalar:function(e){this.r=e,this.g=e,this.b=e},setHex:function(e){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(255&e)/255,this},setRGB:function(e,r,t){return this.r=e,this.g=r,this.b=t,this},setHSL:function(){function e(e,r,t){return 0>t&&(t+=1),t>1&&(t-=1),1/6>t?e+6*(r-e)*t:.5>t?r:2/3>t?e+6*(r-e)*(2/3-t):e}return function(r,t,n){if(r=THREE.Math.euclideanModulo(r,1),t=THREE.Math.clamp(t,0,1),n=THREE.Math.clamp(n,0,1),0===t)this.r=this.g=this.b=n;else{var i=.5>=n?n*(1+t):n+t-n*t,a=2*n-i;this.r=e(a,i,r+1/3),this.g=e(a,i,r),this.b=e(a,i,r-1/3)}return this}}(),setStyle:function(e){function r(r){void 0!==r&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}var t;if(t=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(e)){var n,i=t[1],a=t[2];switch(i){case"rgb":case"rgba":if(n=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(n[1],10))/255,this.g=Math.min(255,parseInt(n[2],10))/255,this.b=Math.min(255,parseInt(n[3],10))/255,r(n[5]),this;if(n=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(n[1],10))/100,this.g=Math.min(100,parseInt(n[2],10))/100,this.b=Math.min(100,parseInt(n[3],10))/100,r(n[5]),this;break;case"hsl":case"hsla":if(n=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(n[1])/360,s=parseInt(n[2],10)/100,c=parseInt(n[3],10)/100;return r(n[5]),this.setHSL(o,s,c)}}}else if(t=/^\#([A-Fa-f0-9]+)$/.exec(e)){var l=t[1],h=l.length;if(3===h)return this.r=parseInt(l.charAt(0)+l.charAt(0),16)/255,this.g=parseInt(l.charAt(1)+l.charAt(1),16)/255,this.b=parseInt(l.charAt(2)+l.charAt(2),16)/255,this;if(6===h)return this.r=parseInt(l.charAt(0)+l.charAt(1),16)/255,this.g=parseInt(l.charAt(2)+l.charAt(3),16)/255,this.b=parseInt(l.charAt(4)+l.charAt(5),16)/255,this}if(e&&e.length>0){var l=THREE.ColorKeywords[e];void 0!==l?this.setHex(l):console.warn("THREE.Color: Unknown color "+e)}return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(e){return this.r=e.r,this.g=e.g,this.b=e.b,this},copyGammaToLinear:function(e,r){return void 0===r&&(r=2),this.r=Math.pow(e.r,r),this.g=Math.pow(e.g,r),this.b=Math.pow(e.b,r),this},copyLinearToGamma:function(e,r){void 0===r&&(r=2);var t=r>0?1/r:1;return this.r=Math.pow(e.r,t),this.g=Math.pow(e.g,t),this.b=Math.pow(e.b,t),this},convertGammaToLinear:function(){var e=this.r,r=this.g,t=this.b;return this.r=e*e,this.g=r*r,this.b=t*t,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(e){var r,t,n=e||{h:0,s:0,l:0},i=this.r,a=this.g,o=this.b,s=Math.max(i,a,o),c=Math.min(i,a,o),l=(c+s)/2;if(c===s)r=0,t=0;else{var h=s-c;switch(t=.5>=l?h/(s+c):h/(2-s-c),s){case i:r=(a-o)/h+(o>a?6:0);break;case a:r=(o-i)/h+2;break;case o:r=(i-a)/h+4}r/=6}return n.h=r,n.s=t,n.l=l,n},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(e,r,t){var n=this.getHSL();return n.h+=e,n.s+=r,n.l+=t,this.setHSL(n.h,n.s,n.l),this},add:function(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this},addColors:function(e,r){return this.r=e.r+r.r,this.g=e.g+r.g,this.b=e.b+r.b,this},addScalar:function(e){return this.r+=e,this.g+=e,this.b+=e,this},multiply:function(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this},multiplyScalar:function(e){return this.r*=e,this.g*=e,this.b*=e,this},lerp:function(e,r){return this.r+=(e.r-this.r)*r,this.g+=(e.g-this.g)*r,this.b+=(e.b-this.b)*r,this},equals:function(e){return e.r===this.r&&e.g===this.g&&e.b===this.b},fromArray:function(e,r){return void 0===r&&(r=0),this.r=e[r],this.g=e[r+1],this.b=e[r+2],this},toArray:function(e,r){return void 0===e&&(e=[]),void 0===r&&(r=0),e[r]=this.r,e[r+1]=this.g,e[r+2]=this.b,e}},THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,
darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},THREE.Quaternion=function(e,r,t,n){this._x=e||0,this._y=r||0,this._z=t||0,this._w=void 0!==n?n:1},THREE.Quaternion.prototype={constructor:THREE.Quaternion,get x(){return this._x},set x(e){this._x=e,this.onChangeCallback()},get y(){return this._y},set y(e){this._y=e,this.onChangeCallback()},get z(){return this._z},set z(e){this._z=e,this.onChangeCallback()},get w(){return this._w},set w(e){this._w=e,this.onChangeCallback()},set:function(e,r,t,n){return this._x=e,this._y=r,this._z=t,this._w=n,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this.onChangeCallback(),this},setFromEuler:function(e,r){if(e instanceof THREE.Euler==!1)throw new Error("THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var t=Math.cos(e._x/2),n=Math.cos(e._y/2),i=Math.cos(e._z/2),a=Math.sin(e._x/2),o=Math.sin(e._y/2),s=Math.sin(e._z/2),c=e.order;return"XYZ"===c?(this._x=a*n*i+t*o*s,this._y=t*o*i-a*n*s,this._z=t*n*s+a*o*i,this._w=t*n*i-a*o*s):"YXZ"===c?(this._x=a*n*i+t*o*s,this._y=t*o*i-a*n*s,this._z=t*n*s-a*o*i,this._w=t*n*i+a*o*s):"ZXY"===c?(this._x=a*n*i-t*o*s,this._y=t*o*i+a*n*s,this._z=t*n*s+a*o*i,this._w=t*n*i-a*o*s):"ZYX"===c?(this._x=a*n*i-t*o*s,this._y=t*o*i+a*n*s,this._z=t*n*s-a*o*i,this._w=t*n*i+a*o*s):"YZX"===c?(this._x=a*n*i+t*o*s,this._y=t*o*i+a*n*s,this._z=t*n*s-a*o*i,this._w=t*n*i-a*o*s):"XZY"===c&&(this._x=a*n*i-t*o*s,this._y=t*o*i-a*n*s,this._z=t*n*s+a*o*i,this._w=t*n*i+a*o*s),r!==!1&&this.onChangeCallback(),this},setFromAxisAngle:function(e,r){var t=r/2,n=Math.sin(t);return this._x=e.x*n,this._y=e.y*n,this._z=e.z*n,this._w=Math.cos(t),this.onChangeCallback(),this},setFromRotationMatrix:function(e){var r,t=e.elements,n=t[0],i=t[4],a=t[8],o=t[1],s=t[5],c=t[9],l=t[2],h=t[6],d=t[10],u=n+s+d;return u>0?(r=.5/Math.sqrt(u+1),this._w=.25/r,this._x=(h-c)*r,this._y=(a-l)*r,this._z=(o-i)*r):n>s&&n>d?(r=2*Math.sqrt(1+n-s-d),this._w=(h-c)/r,this._x=.25*r,this._y=(i+o)/r,this._z=(a+l)/r):s>d?(r=2*Math.sqrt(1+s-n-d),this._w=(a-l)/r,this._x=(i+o)/r,this._y=.25*r,this._z=(c+h)/r):(r=2*Math.sqrt(1+d-n-s),this._w=(o-i)/r,this._x=(a+l)/r,this._y=(c+h)/r,this._z=.25*r),this.onChangeCallback(),this},setFromUnitVectors:function(){var e,r,t=1e-6;return function(n,i){return void 0===e&&(e=new THREE.Vector3),r=n.dot(i)+1,t>r?(r=0,Math.abs(n.x)>Math.abs(n.z)?e.set(-n.y,n.x,0):e.set(0,-n.z,n.y)):e.crossVectors(n,i),this._x=e.x,this._y=e.y,this._z=e.z,this._w=r,this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var e=this.length();return 0===e?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this.onChangeCallback(),this},multiply:function(e,r){return void 0!==r?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(e,r)):this.multiplyQuaternions(this,e)},premultiply:function(e){return this.multiplyQuaternions(e,this)},multiplyQuaternions:function(e,r){var t=e._x,n=e._y,i=e._z,a=e._w,o=r._x,s=r._y,c=r._z,l=r._w;return this._x=t*l+a*o+n*c-i*s,this._y=n*l+a*s+i*o-t*c,this._z=i*l+a*c+t*s-n*o,this._w=a*l-t*o-n*s-i*c,this.onChangeCallback(),this},slerp:function(e,r){if(0===r)return this;if(1===r)return this.copy(e);var t=this._x,n=this._y,i=this._z,a=this._w,o=a*e._w+t*e._x+n*e._y+i*e._z;if(0>o?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,o=-o):this.copy(e),o>=1)return this._w=a,this._x=t,this._y=n,this._z=i,this;var s=Math.sqrt(1-o*o);if(Math.abs(s)<.001)return this._w=.5*(a+this._w),this._x=.5*(t+this._x),this._y=.5*(n+this._y),this._z=.5*(i+this._z),this;var c=Math.atan2(s,o),l=Math.sin((1-r)*c)/s,h=Math.sin(r*c)/s;return this._w=a*l+this._w*h,this._x=t*l+this._x*h,this._y=n*l+this._y*h,this._z=i*l+this._z*h,this.onChangeCallback(),this},equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w},fromArray:function(e,r){return void 0===r&&(r=0),this._x=e[r],this._y=e[r+1],this._z=e[r+2],this._w=e[r+3],this.onChangeCallback(),this},toArray:function(e,r){return void 0===e&&(e=[]),void 0===r&&(r=0),e[r]=this._x,e[r+1]=this._y,e[r+2]=this._z,e[r+3]=this._w,e},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}},Object.assign(THREE.Quaternion,{slerp:function(e,r,t,n){return t.copy(e).slerp(r,n)},slerpFlat:function(e,r,t,n,i,a,o){var s=t[n+0],c=t[n+1],l=t[n+2],h=t[n+3],d=i[a+0],u=i[a+1],p=i[a+2],f=i[a+3];if(h!==f||s!==d||c!==u||l!==p){var m=1-o,E=s*d+c*u+l*p+h*f,g=E>=0?1:-1,v=1-E*E;if(v>Number.EPSILON){var T=Math.sqrt(v),_=Math.atan2(T,E*g);m=Math.sin(m*_)/T,o=Math.sin(o*_)/T}var y=o*g;if(s=s*m+d*y,c=c*m+u*y,l=l*m+p*y,h=h*m+f*y,m===1-o){var x=1/Math.sqrt(s*s+c*c+l*l+h*h);s*=x,c*=x,l*=x,h*=x}}e[r]=s,e[r+1]=c,e[r+2]=l,e[r+3]=h}}),THREE.Vector2=function(e,r){this.x=e||0,this.y=r||0},THREE.Vector2.prototype={constructor:THREE.Vector2,get width(){return this.x},set width(e){this.x=e},get height(){return this.y},set height(e){this.y=e},set:function(e,r){return this.x=e,this.y=r,this},setScalar:function(e){return this.x=e,this.y=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setComponent:function(e,r){switch(e){case 0:this.x=r;break;case 1:this.y=r;break;default:throw new Error("index is out of range: "+e)}},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(e){return this.x=e.x,this.y=e.y,this},add:function(e,r){return void 0!==r?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,r)):(this.x+=e.x,this.y+=e.y,this)},addScalar:function(e){return this.x+=e,this.y+=e,this},addVectors:function(e,r){return this.x=e.x+r.x,this.y=e.y+r.y,this},addScaledVector:function(e,r){return this.x+=e.x*r,this.y+=e.y*r,this},sub:function(e,r){return void 0!==r?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,r)):(this.x-=e.x,this.y-=e.y,this)},subScalar:function(e){return this.x-=e,this.y-=e,this},subVectors:function(e,r){return this.x=e.x-r.x,this.y=e.y-r.y,this},multiply:function(e){return this.x*=e.x,this.y*=e.y,this},multiplyScalar:function(e){return isFinite(e)?(this.x*=e,this.y*=e):(this.x=0,this.y=0),this},divide:function(e){return this.x/=e.x,this.y/=e.y,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this},clamp:function(e,r){return this.x=Math.max(e.x,Math.min(r.x,this.x)),this.y=Math.max(e.y,Math.min(r.y,this.y)),this},clampScalar:function(){var e,r;return function(t,n){return void 0===e&&(e=new THREE.Vector2,r=new THREE.Vector2),e.set(t,t),r.set(n,n),this.clamp(e,r)}}(),clampLength:function(e,r){var t=this.length();return this.multiplyScalar(Math.max(e,Math.min(r,t))/t)},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(e){return this.x*e.x+this.y*e.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length())},angle:function(){var e=Math.atan2(this.y,this.x);return 0>e&&(e+=2*Math.PI),e},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var r=this.x-e.x,t=this.y-e.y;return r*r+t*t},setLength:function(e){return this.multiplyScalar(e/this.length())},lerp:function(e,r){return this.x+=(e.x-this.x)*r,this.y+=(e.y-this.y)*r,this},lerpVectors:function(e,r,t){return this.subVectors(r,e).multiplyScalar(t).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y},fromArray:function(e,r){return void 0===r&&(r=0),this.x=e[r],this.y=e[r+1],this},toArray:function(e,r){return void 0===e&&(e=[]),void 0===r&&(r=0),e[r]=this.x,e[r+1]=this.y,e},fromAttribute:function(e,r,t){return void 0===t&&(t=0),r=r*e.itemSize+t,this.x=e.array[r],this.y=e.array[r+1],this},rotateAround:function(e,r){var t=Math.cos(r),n=Math.sin(r),i=this.x-e.x,a=this.y-e.y;return this.x=i*t-a*n+e.x,this.y=i*n+a*t+e.y,this}},THREE.Vector3=function(e,r,t){this.x=e||0,this.y=r||0,this.z=t||0},THREE.Vector3.prototype={constructor:THREE.Vector3,set:function(e,r,t){return this.x=e,this.y=r,this.z=t,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setComponent:function(e,r){switch(e){case 0:this.x=r;break;case 1:this.y=r;break;case 2:this.z=r;break;default:throw new Error("index is out of range: "+e)}},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this},add:function(e,r){return void 0!==r?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,r)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this},addVectors:function(e,r){return this.x=e.x+r.x,this.y=e.y+r.y,this.z=e.z+r.z,this},addScaledVector:function(e,r){return this.x+=e.x*r,this.y+=e.y*r,this.z+=e.z*r,this},sub:function(e,r){return void 0!==r?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,r)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this},subVectors:function(e,r){return this.x=e.x-r.x,this.y=e.y-r.y,this.z=e.z-r.z,this},multiply:function(e,r){return void 0!==r?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(e,r)):(this.x*=e.x,this.y*=e.y,this.z*=e.z,this)},multiplyScalar:function(e){return isFinite(e)?(this.x*=e,this.y*=e,this.z*=e):(this.x=0,this.y=0,this.z=0),this},multiplyVectors:function(e,r){return this.x=e.x*r.x,this.y=e.y*r.y,this.z=e.z*r.z,this},applyEuler:function(){var e;return function(r){return r instanceof THREE.Euler==!1&&console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),void 0===e&&(e=new THREE.Quaternion),this.applyQuaternion(e.setFromEuler(r))}}(),applyAxisAngle:function(){var e;return function(r,t){return void 0===e&&(e=new THREE.Quaternion),this.applyQuaternion(e.setFromAxisAngle(r,t))}}(),applyMatrix3:function(e){var r=this.x,t=this.y,n=this.z,i=e.elements;return this.x=i[0]*r+i[3]*t+i[6]*n,this.y=i[1]*r+i[4]*t+i[7]*n,this.z=i[2]*r+i[5]*t+i[8]*n,this},applyMatrix4:function(e){var r=this.x,t=this.y,n=this.z,i=e.elements;return this.x=i[0]*r+i[4]*t+i[8]*n+i[12],this.y=i[1]*r+i[5]*t+i[9]*n+i[13],this.z=i[2]*r+i[6]*t+i[10]*n+i[14],this},applyProjection:function(e){var r=this.x,t=this.y,n=this.z,i=e.elements,a=1/(i[3]*r+i[7]*t+i[11]*n+i[15]);return this.x=(i[0]*r+i[4]*t+i[8]*n+i[12])*a,this.y=(i[1]*r+i[5]*t+i[9]*n+i[13])*a,this.z=(i[2]*r+i[6]*t+i[10]*n+i[14])*a,this},applyQuaternion:function(e){var r=this.x,t=this.y,n=this.z,i=e.x,a=e.y,o=e.z,s=e.w,c=s*r+a*n-o*t,l=s*t+o*r-i*n,h=s*n+i*t-a*r,d=-i*r-a*t-o*n;return this.x=c*s+d*-i+l*-o-h*-a,this.y=l*s+d*-a+h*-i-c*-o,this.z=h*s+d*-o+c*-a-l*-i,this},project:function(){var e;return function(r){return void 0===e&&(e=new THREE.Matrix4),e.multiplyMatrices(r.projectionMatrix,e.getInverse(r.matrixWorld)),this.applyProjection(e)}}(),unproject:function(){var e;return function(r){return void 0===e&&(e=new THREE.Matrix4),e.multiplyMatrices(r.matrixWorld,e.getInverse(r.projectionMatrix)),this.applyProjection(e)}}(),transformDirection:function(e){var r=this.x,t=this.y,n=this.z,i=e.elements;return this.x=i[0]*r+i[4]*t+i[8]*n,this.y=i[1]*r+i[5]*t+i[9]*n,this.z=i[2]*r+i[6]*t+i[10]*n,this.normalize()},divide:function(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this},divideScalar:function(e){return this.multiplyScalar(1/e)},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this},clamp:function(e,r){return this.x=Math.max(e.x,Math.min(r.x,this.x)),this.y=Math.max(e.y,Math.min(r.y,this.y)),this.z=Math.max(e.z,Math.min(r.z,this.z)),this},clampScalar:function(){var e,r;return function(t,n){return void 0===e&&(e=new THREE.Vector3,r=new THREE.Vector3),e.set(t,t,t),r.set(n,n,n),this.clamp(e,r)}}(),clampLength:function(e,r){var t=this.length();return this.multiplyScalar(Math.max(e,Math.min(r,t))/t)},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(e){return this.multiplyScalar(e/this.length())},lerp:function(e,r){return this.x+=(e.x-this.x)*r,this.y+=(e.y-this.y)*r,this.z+=(e.z-this.z)*r,this},lerpVectors:function(e,r,t){return this.subVectors(r,e).multiplyScalar(t).add(e)},cross:function(e,r){if(void 0!==r)return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(e,r);var t=this.x,n=this.y,i=this.z;return this.x=n*e.z-i*e.y,this.y=i*e.x-t*e.z,this.z=t*e.y-n*e.x,this},crossVectors:function(e,r){var t=e.x,n=e.y,i=e.z,a=r.x,o=r.y,s=r.z;return this.x=n*s-i*o,this.y=i*a-t*s,this.z=t*o-n*a,this},projectOnVector:function(e){var r=e.dot(this)/e.lengthSq();return this.copy(e).multiplyScalar(r)},projectOnPlane:function(){var e;return function(r){return void 0===e&&(e=new THREE.Vector3),e.copy(this).projectOnVector(r),this.sub(e)}}(),reflect:function(){var e;return function(r){return void 0===e&&(e=new THREE.Vector3),this.sub(e.copy(r).multiplyScalar(2*this.dot(r)))}}(),angleTo:function(e){var r=this.dot(e)/Math.sqrt(this.lengthSq()*e.lengthSq());return Math.acos(THREE.Math.clamp(r,-1,1))},distanceTo:function(e){return Math.sqrt(this.distanceToSquared(e))},distanceToSquared:function(e){var r=this.x-e.x,t=this.y-e.y,n=this.z-e.z;return r*r+t*t+n*n},setFromSpherical:function(e){var r=Math.sin(e.phi)*e.radius;return this.x=r*Math.sin(e.theta),this.y=Math.cos(e.phi)*e.radius,this.z=r*Math.cos(e.theta),this},setFromMatrixPosition:function(e){return this.setFromMatrixColumn(e,3)},setFromMatrixScale:function(e){var r=this.setFromMatrixColumn(e,0).length(),t=this.setFromMatrixColumn(e,1).length(),n=this.setFromMatrixColumn(e,2).length();return this.x=r,this.y=t,this.z=n,this},setFromMatrixColumn:function(e,r){if("number"==typeof e){console.warn("THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).");var t=e;e=r,r=t}return this.fromArray(e.elements,4*r)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z},fromArray:function(e,r){return void 0===r&&(r=0),this.x=e[r],this.y=e[r+1],this.z=e[r+2],this},toArray:function(e,r){return void 0===e&&(e=[]),void 0===r&&(r=0),e[r]=this.x,e[r+1]=this.y,e[r+2]=this.z,e},fromAttribute:function(e,r,t){return void 0===t&&(t=0),r=r*e.itemSize+t,this.x=e.array[r],this.y=e.array[r+1],this.z=e.array[r+2],this}},THREE.Vector4=function(e,r,t,n){this.x=e||0,this.y=r||0,this.z=t||0,this.w=void 0!==n?n:1},THREE.Vector4.prototype={constructor:THREE.Vector4,set:function(e,r,t,n){return this.x=e,this.y=r,this.z=t,this.w=n,this},setScalar:function(e){return this.x=e,this.y=e,this.z=e,this.w=e,this},setX:function(e){return this.x=e,this},setY:function(e){return this.y=e,this},setZ:function(e){return this.z=e,this},setW:function(e){return this.w=e,this},setComponent:function(e,r){switch(e){case 0:this.x=r;break;case 1:this.y=r;break;case 2:this.z=r;break;case 3:this.w=r;break;default:throw new Error("index is out of range: "+e)}},getComponent:function(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=void 0!==e.w?e.w:1,this},add:function(e,r){return void 0!==r?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(e,r)):(this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this)},addScalar:function(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this},addVectors:function(e,r){return this.x=e.x+r.x,this.y=e.y+r.y,this.z=e.z+r.z,this.w=e.w+r.w,this},addScaledVector:function(e,r){return this.x+=e.x*r,this.y+=e.y*r,this.z+=e.z*r,this.w+=e.w*r,this},sub:function(e,r){return void 0!==r?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(e,r)):(this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this)},subScalar:function(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this},subVectors:function(e,r){return this.x=e.x-r.x,this.y=e.y-r.y,this.z=e.z-r.z,this.w=e.w-r.w,this},multiplyScalar:function(e){return isFinite(e)?(this.x*=e,this.y*=e,this.z*=e,this.w*=e):(this.x=0,this.y=0,this.z=0,this.w=0),this},applyMatrix4:function(e){var r=this.x,t=this.y,n=this.z,i=this.w,a=e.elements;return this.x=a[0]*r+a[4]*t+a[8]*n+a[12]*i,this.y=a[1]*r+a[5]*t+a[9]*n+a[13]*i,this.z=a[2]*r+a[6]*t+a[10]*n+a[14]*i,this.w=a[3]*r+a[7]*t+a[11]*n+a[15]*i,this},divideScalar:function(e){return this.multiplyScalar(1/e)},setAxisAngleFromQuaternion:function(e){this.w=2*Math.acos(e.w);var r=Math.sqrt(1-e.w*e.w);return 1e-4>r?(this.x=1,this.y=0,this.z=0):(this.x=e.x/r,this.y=e.y/r,this.z=e.z/r),this},setAxisAngleFromRotationMatrix:function(e){var r,t,n,i,a=.01,o=.1,s=e.elements,c=s[0],l=s[4],h=s[8],d=s[1],u=s[5],p=s[9],f=s[2],m=s[6],E=s[10];if(Math.abs(l-d)<a&&Math.abs(h-f)<a&&Math.abs(p-m)<a){if(Math.abs(l+d)<o&&Math.abs(h+f)<o&&Math.abs(p+m)<o&&Math.abs(c+u+E-3)<o)return this.set(1,0,0,0),this;r=Math.PI;var g=(c+1)/2,v=(u+1)/2,T=(E+1)/2,_=(l+d)/4,y=(h+f)/4,x=(p+m)/4;return g>v&&g>T?a>g?(t=0,n=.707106781,i=.707106781):(t=Math.sqrt(g),n=_/t,i=y/t):v>T?a>v?(t=.707106781,n=0,i=.707106781):(n=Math.sqrt(v),t=_/n,i=x/n):a>T?(t=.707106781,n=.707106781,i=0):(i=Math.sqrt(T),t=y/i,n=x/i),this.set(t,n,i,r),this}var R=Math.sqrt((m-p)*(m-p)+(h-f)*(h-f)+(d-l)*(d-l));return Math.abs(R)<.001&&(R=1),this.x=(m-p)/R,this.y=(h-f)/R,this.z=(d-l)/R,this.w=Math.acos((c+u+E-1)/2),this},min:function(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this},max:function(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this},clamp:function(e,r){return this.x=Math.max(e.x,Math.min(r.x,this.x)),this.y=Math.max(e.y,Math.min(r.y,this.y)),this.z=Math.max(e.z,Math.min(r.z,this.z)),this.w=Math.max(e.w,Math.min(r.w,this.w)),this},clampScalar:function(){var e,r;return function(t,n){return void 0===e&&(e=new THREE.Vector4,r=new THREE.Vector4),e.set(t,t,t,t),r.set(n,n,n,n),this.clamp(e,r)}}(),floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(e){return this.multiplyScalar(e/this.length())},lerp:function(e,r){return this.x+=(e.x-this.x)*r,this.y+=(e.y-this.y)*r,this.z+=(e.z-this.z)*r,this.w+=(e.w-this.w)*r,this},lerpVectors:function(e,r,t){return this.subVectors(r,e).multiplyScalar(t).add(e)},equals:function(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w},fromArray:function(e,r){return void 0===r&&(r=0),this.x=e[r],this.y=e[r+1],this.z=e[r+2],this.w=e[r+3],this},toArray:function(e,r){return void 0===e&&(e=[]),void 0===r&&(r=0),e[r]=this.x,e[r+1]=this.y,e[r+2]=this.z,e[r+3]=this.w,e},fromAttribute:function(e,r,t){return void 0===t&&(t=0),r=r*e.itemSize+t,this.x=e.array[r],this.y=e.array[r+1],this.z=e.array[r+2],this.w=e.array[r+3],this}},THREE.Euler=function(e,r,t,n){this._x=e||0,this._y=r||0,this._z=t||0,this._order=n||THREE.Euler.DefaultOrder},THREE.Euler.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],THREE.Euler.DefaultOrder="XYZ",THREE.Euler.prototype={constructor:THREE.Euler,get x(){return this._x},set x(e){this._x=e,this.onChangeCallback()},get y(){return this._y},set y(e){this._y=e,this.onChangeCallback()},get z(){return this._z},set z(e){this._z=e,this.onChangeCallback()},get order(){return this._order},set order(e){this._order=e,this.onChangeCallback()},set:function(e,r,t,n){return this._x=e,this._y=r,this._z=t,this._order=n||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this.onChangeCallback(),this},setFromRotationMatrix:function(e,r,t){var n=THREE.Math.clamp,i=e.elements,a=i[0],o=i[4],s=i[8],c=i[1],l=i[5],h=i[9],d=i[2],u=i[6],p=i[10];return r=r||this._order,"XYZ"===r?(this._y=Math.asin(n(s,-1,1)),Math.abs(s)<.99999?(this._x=Math.atan2(-h,p),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(u,l),this._z=0)):"YXZ"===r?(this._x=Math.asin(-n(h,-1,1)),Math.abs(h)<.99999?(this._y=Math.atan2(s,p),this._z=Math.atan2(c,l)):(this._y=Math.atan2(-d,a),this._z=0)):"ZXY"===r?(this._x=Math.asin(n(u,-1,1)),Math.abs(u)<.99999?(this._y=Math.atan2(-d,p),this._z=Math.atan2(-o,l)):(this._y=0,this._z=Math.atan2(c,a))):"ZYX"===r?(this._y=Math.asin(-n(d,-1,1)),Math.abs(d)<.99999?(this._x=Math.atan2(u,p),this._z=Math.atan2(c,a)):(this._x=0,this._z=Math.atan2(-o,l))):"YZX"===r?(this._z=Math.asin(n(c,-1,1)),Math.abs(c)<.99999?(this._x=Math.atan2(-h,l),this._y=Math.atan2(-d,a)):(this._x=0,this._y=Math.atan2(s,p))):"XZY"===r?(this._z=Math.asin(-n(o,-1,1)),Math.abs(o)<.99999?(this._x=Math.atan2(u,l),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-h,p),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+r),this._order=r,t!==!1&&this.onChangeCallback(),this},setFromQuaternion:function(){var e;return function(r,t,n){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationFromQuaternion(r),this.setFromRotationMatrix(e,t,n)}}(),setFromVector3:function(e,r){return this.set(e.x,e.y,e.z,r||this._order)},reorder:function(){var e=new THREE.Quaternion;return function(r){return e.setFromEuler(this),this.setFromQuaternion(e,r)}}(),equals:function(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order},fromArray:function(e){return this._x=e[0],this._y=e[1],this._z=e[2],void 0!==e[3]&&(this._order=e[3]),this.onChangeCallback(),this},toArray:function(e,r){return void 0===e&&(e=[]),void 0===r&&(r=0),e[r]=this._x,e[r+1]=this._y,e[r+2]=this._z,e[r+3]=this._order,e},toVector3:function(e){return e?e.set(this._x,this._y,this._z):new THREE.Vector3(this._x,this._y,this._z)},onChange:function(e){return this.onChangeCallback=e,this},onChangeCallback:function(){}},THREE.Line3=function(e,r){this.start=void 0!==e?e:new THREE.Vector3,this.end=void 0!==r?r:new THREE.Vector3},THREE.Line3.prototype={constructor:THREE.Line3,set:function(e,r){return this.start.copy(e),this.end.copy(r),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.start.copy(e.start),this.end.copy(e.end),this},center:function(e){var r=e||new THREE.Vector3;return r.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(e){var r=e||new THREE.Vector3;return r.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(e,r){var t=r||new THREE.Vector3;return this.delta(t).multiplyScalar(e).add(this.start)},closestPointToPointParameter:function(){var e=new THREE.Vector3,r=new THREE.Vector3;return function(t,n){e.subVectors(t,this.start),r.subVectors(this.end,this.start);var i=r.dot(r),a=r.dot(e),o=a/i;return n&&(o=THREE.Math.clamp(o,0,1)),o}}(),closestPointToPoint:function(e,r,t){var n=this.closestPointToPointParameter(e,r),i=t||new THREE.Vector3;return this.delta(i).multiplyScalar(n).add(this.start)},applyMatrix4:function(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this},equals:function(e){return e.start.equals(this.start)&&e.end.equals(this.end)}},THREE.Box2=function(e,r){this.min=void 0!==e?e:new THREE.Vector2(+(1/0),+(1/0)),this.max=void 0!==r?r:new THREE.Vector2(-(1/0),-(1/0))},THREE.Box2.prototype={constructor:THREE.Box2,set:function(e,r){return this.min.copy(e),this.max.copy(r),this},setFromPoints:function(e){this.makeEmpty();for(var r=0,t=e.length;t>r;r++)this.expandByPoint(e[r]);return this},setFromCenterAndSize:function(){var e=new THREE.Vector2;return function(r,t){var n=e.copy(t).multiplyScalar(.5);return this.min.copy(r).sub(n),this.max.copy(r).add(n),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=+(1/0),this.max.x=this.max.y=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(e){var r=e||new THREE.Vector2;return r.addVectors(this.min,this.max).multiplyScalar(.5)},size:function(e){var r=e||new THREE.Vector2;return r.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y},getParameter:function(e,r){var t=r||new THREE.Vector2;return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)},clampPoint:function(e,r){var t=r||new THREE.Vector2;return t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new THREE.Vector2;return function(r){var t=e.copy(r).clamp(this.min,this.max);return t.sub(r).length()}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}},THREE.Box3=function(e,r){this.min=void 0!==e?e:new THREE.Vector3(+(1/0),+(1/0),+(1/0)),this.max=void 0!==r?r:new THREE.Vector3(-(1/0),-(1/0),-(1/0))},THREE.Box3.prototype={constructor:THREE.Box3,set:function(e,r){return this.min.copy(e),this.max.copy(r),this},setFromArray:function(e){for(var r=+(1/0),t=+(1/0),n=+(1/0),i=-(1/0),a=-(1/0),o=-(1/0),s=0,c=e.length;c>s;s+=3){var l=e[s],h=e[s+1],d=e[s+2];r>l&&(r=l),t>h&&(t=h),n>d&&(n=d),l>i&&(i=l),h>a&&(a=h),
d>o&&(o=d)}this.min.set(r,t,n),this.max.set(i,a,o)},setFromPoints:function(e){this.makeEmpty();for(var r=0,t=e.length;t>r;r++)this.expandByPoint(e[r]);return this},setFromCenterAndSize:function(){var e=new THREE.Vector3;return function(r,t){var n=e.copy(t).multiplyScalar(.5);return this.min.copy(r).sub(n),this.max.copy(r).add(n),this}}(),setFromObject:function(){var e=new THREE.Vector3;return function(r){var t=this;return r.updateMatrixWorld(!0),this.makeEmpty(),r.traverse(function(r){var n=r.geometry;if(void 0!==n)if(n instanceof THREE.Geometry)for(var i=n.vertices,a=0,o=i.length;o>a;a++)e.copy(i[a]),e.applyMatrix4(r.matrixWorld),t.expandByPoint(e);else if(n instanceof THREE.BufferGeometry&&void 0!==n.attributes.position)for(var s=n.attributes.position.array,a=0,o=s.length;o>a;a+=3)e.fromArray(s,a),e.applyMatrix4(r.matrixWorld),t.expandByPoint(e)}),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.min.copy(e.min),this.max.copy(e.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=+(1/0),this.max.x=this.max.y=this.max.z=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(e){var r=e||new THREE.Vector3;return r.addVectors(this.min,this.max).multiplyScalar(.5)},size:function(e){var r=e||new THREE.Vector3;return r.subVectors(this.max,this.min)},expandByPoint:function(e){return this.min.min(e),this.max.max(e),this},expandByVector:function(e){return this.min.sub(e),this.max.add(e),this},expandByScalar:function(e){return this.min.addScalar(-e),this.max.addScalar(e),this},containsPoint:function(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)},containsBox:function(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z},getParameter:function(e,r){var t=r||new THREE.Vector3;return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)},intersectsSphere:function(){var e;return function(r){return void 0===e&&(e=new THREE.Vector3),this.clampPoint(r.center,e),e.distanceToSquared(r.center)<=r.radius*r.radius}}(),intersectsPlane:function(e){var r,t;return e.normal.x>0?(r=e.normal.x*this.min.x,t=e.normal.x*this.max.x):(r=e.normal.x*this.max.x,t=e.normal.x*this.min.x),e.normal.y>0?(r+=e.normal.y*this.min.y,t+=e.normal.y*this.max.y):(r+=e.normal.y*this.max.y,t+=e.normal.y*this.min.y),e.normal.z>0?(r+=e.normal.z*this.min.z,t+=e.normal.z*this.max.z):(r+=e.normal.z*this.max.z,t+=e.normal.z*this.min.z),r<=e.constant&&t>=e.constant},clampPoint:function(e,r){var t=r||new THREE.Vector3;return t.copy(e).clamp(this.min,this.max)},distanceToPoint:function(){var e=new THREE.Vector3;return function(r){var t=e.copy(r).clamp(this.min,this.max);return t.sub(r).length()}}(),getBoundingSphere:function(){var e=new THREE.Vector3;return function(r){var t=r||new THREE.Sphere;return t.center=this.center(),t.radius=.5*this.size(e).length(),t}}(),intersect:function(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this},union:function(e){return this.min.min(e.min),this.max.max(e.max),this},applyMatrix4:function(){var e=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(r){return this.isEmpty()?this:(e[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(r),e[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(r),e[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(r),e[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(r),e[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(r),e[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(r),e[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(r),e[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(r),this.setFromPoints(e),this)}}(),translate:function(e){return this.min.add(e),this.max.add(e),this},equals:function(e){return e.min.equals(this.min)&&e.max.equals(this.max)}},THREE.Matrix3=function(){this.elements=new Float32Array([1,0,0,0,1,0,0,0,1]),arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")},THREE.Matrix3.prototype={constructor:THREE.Matrix3,set:function(e,r,t,n,i,a,o,s,c){var l=this.elements;return l[0]=e,l[1]=n,l[2]=o,l[3]=r,l[4]=i,l[5]=s,l[6]=t,l[7]=a,l[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(e){var r=e.elements;return this.set(r[0],r[3],r[6],r[1],r[4],r[7],r[2],r[5],r[8]),this},setFromMatrix4:function(e){var r=e.elements;return this.set(r[0],r[4],r[8],r[1],r[5],r[9],r[2],r[6],r[10]),this},applyToVector3Array:function(){var e;return function(r,t,n){void 0===e&&(e=new THREE.Vector3),void 0===t&&(t=0),void 0===n&&(n=r.length);for(var i=0,a=t;n>i;i+=3,a+=3)e.fromArray(r,a),e.applyMatrix3(this),e.toArray(r,a);return r}}(),applyToBuffer:function(){var e;return function(r,t,n){void 0===e&&(e=new THREE.Vector3),void 0===t&&(t=0),void 0===n&&(n=r.length/r.itemSize);for(var i=0,a=t;n>i;i++,a++)e.x=r.getX(a),e.y=r.getY(a),e.z=r.getZ(a),e.applyMatrix3(this),r.setXYZ(e.x,e.y,e.z);return r}}(),multiplyScalar:function(e){var r=this.elements;return r[0]*=e,r[3]*=e,r[6]*=e,r[1]*=e,r[4]*=e,r[7]*=e,r[2]*=e,r[5]*=e,r[8]*=e,this},determinant:function(){var e=this.elements,r=e[0],t=e[1],n=e[2],i=e[3],a=e[4],o=e[5],s=e[6],c=e[7],l=e[8];return r*a*l-r*o*c-t*i*l+t*o*s+n*i*c-n*a*s},getInverse:function(e,r){e instanceof THREE.Matrix4&&console.error("THREE.Matrix3.getInverse no longer takes a Matrix4 argument.");var t=e.elements,n=this.elements,i=t[0],a=t[1],o=t[2],s=t[3],c=t[4],l=t[5],h=t[6],d=t[7],u=t[8],p=u*c-l*d,f=l*h-u*s,m=d*s-c*h,E=i*p+a*f+o*m;if(0===E){var g="THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";if(r)throw new Error(g);return console.warn(g),this.identity()}var v=1/E;return n[0]=p*v,n[1]=(o*d-u*a)*v,n[2]=(l*a-o*c)*v,n[3]=f*v,n[4]=(u*i-o*h)*v,n[5]=(o*s-l*i)*v,n[6]=m*v,n[7]=(a*h-d*i)*v,n[8]=(c*i-a*s)*v,this},transpose:function(){var e,r=this.elements;return e=r[1],r[1]=r[3],r[3]=e,e=r[2],r[2]=r[6],r[6]=e,e=r[5],r[5]=r[7],r[7]=e,this},flattenToArrayOffset:function(e,r){return console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead."),this.toArray(e,r)},getNormalMatrix:function(e){return this.setFromMatrix4(e).getInverse(this).transpose()},transposeIntoArray:function(e){var r=this.elements;return e[0]=r[0],e[1]=r[3],e[2]=r[6],e[3]=r[1],e[4]=r[4],e[5]=r[7],e[6]=r[2],e[7]=r[5],e[8]=r[8],this},fromArray:function(e){return this.elements.set(e),this},toArray:function(e,r){void 0===e&&(e=[]),void 0===r&&(r=0);var t=this.elements;return e[r]=t[0],e[r+1]=t[1],e[r+2]=t[2],e[r+3]=t[3],e[r+4]=t[4],e[r+5]=t[5],e[r+6]=t[6],e[r+7]=t[7],e[r+8]=t[8],e}},THREE.Matrix4=function(){this.elements=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")},THREE.Matrix4.prototype={constructor:THREE.Matrix4,set:function(e,r,t,n,i,a,o,s,c,l,h,d,u,p,f,m){var E=this.elements;return E[0]=e,E[4]=r,E[8]=t,E[12]=n,E[1]=i,E[5]=a,E[9]=o,E[13]=s,E[2]=c,E[6]=l,E[10]=h,E[14]=d,E[3]=u,E[7]=p,E[11]=f,E[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new THREE.Matrix4).fromArray(this.elements)},copy:function(e){return this.elements.set(e.elements),this},copyPosition:function(e){var r=this.elements,t=e.elements;return r[12]=t[12],r[13]=t[13],r[14]=t[14],this},extractBasis:function(e,r,t){return e.setFromMatrixColumn(this,0),r.setFromMatrixColumn(this,1),t.setFromMatrixColumn(this,2),this},makeBasis:function(e,r,t){return this.set(e.x,r.x,t.x,0,e.y,r.y,t.y,0,e.z,r.z,t.z,0,0,0,0,1),this},extractRotation:function(){var e;return function(r){void 0===e&&(e=new THREE.Vector3);var t=this.elements,n=r.elements,i=1/e.setFromMatrixColumn(r,0).length(),a=1/e.setFromMatrixColumn(r,1).length(),o=1/e.setFromMatrixColumn(r,2).length();return t[0]=n[0]*i,t[1]=n[1]*i,t[2]=n[2]*i,t[4]=n[4]*a,t[5]=n[5]*a,t[6]=n[6]*a,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,this}}(),makeRotationFromEuler:function(e){e instanceof THREE.Euler==!1&&console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var r=this.elements,t=e.x,n=e.y,i=e.z,a=Math.cos(t),o=Math.sin(t),s=Math.cos(n),c=Math.sin(n),l=Math.cos(i),h=Math.sin(i);if("XYZ"===e.order){var d=a*l,u=a*h,p=o*l,f=o*h;r[0]=s*l,r[4]=-s*h,r[8]=c,r[1]=u+p*c,r[5]=d-f*c,r[9]=-o*s,r[2]=f-d*c,r[6]=p+u*c,r[10]=a*s}else if("YXZ"===e.order){var m=s*l,E=s*h,g=c*l,v=c*h;r[0]=m+v*o,r[4]=g*o-E,r[8]=a*c,r[1]=a*h,r[5]=a*l,r[9]=-o,r[2]=E*o-g,r[6]=v+m*o,r[10]=a*s}else if("ZXY"===e.order){var m=s*l,E=s*h,g=c*l,v=c*h;r[0]=m-v*o,r[4]=-a*h,r[8]=g+E*o,r[1]=E+g*o,r[5]=a*l,r[9]=v-m*o,r[2]=-a*c,r[6]=o,r[10]=a*s}else if("ZYX"===e.order){var d=a*l,u=a*h,p=o*l,f=o*h;r[0]=s*l,r[4]=p*c-u,r[8]=d*c+f,r[1]=s*h,r[5]=f*c+d,r[9]=u*c-p,r[2]=-c,r[6]=o*s,r[10]=a*s}else if("YZX"===e.order){var T=a*s,_=a*c,y=o*s,x=o*c;r[0]=s*l,r[4]=x-T*h,r[8]=y*h+_,r[1]=h,r[5]=a*l,r[9]=-o*l,r[2]=-c*l,r[6]=_*h+y,r[10]=T-x*h}else if("XZY"===e.order){var T=a*s,_=a*c,y=o*s,x=o*c;r[0]=s*l,r[4]=-h,r[8]=c*l,r[1]=T*h+x,r[5]=a*l,r[9]=_*h-y,r[2]=y*h-_,r[6]=o*l,r[10]=x*h+T}return r[3]=0,r[7]=0,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,this},makeRotationFromQuaternion:function(e){var r=this.elements,t=e.x,n=e.y,i=e.z,a=e.w,o=t+t,s=n+n,c=i+i,l=t*o,h=t*s,d=t*c,u=n*s,p=n*c,f=i*c,m=a*o,E=a*s,g=a*c;return r[0]=1-(u+f),r[4]=h-g,r[8]=d+E,r[1]=h+g,r[5]=1-(l+f),r[9]=p-m,r[2]=d-E,r[6]=p+m,r[10]=1-(l+u),r[3]=0,r[7]=0,r[11]=0,r[12]=0,r[13]=0,r[14]=0,r[15]=1,this},lookAt:function(){var e,r,t;return function(n,i,a){void 0===e&&(e=new THREE.Vector3,r=new THREE.Vector3,t=new THREE.Vector3);var o=this.elements;return t.subVectors(n,i).normalize(),0===t.lengthSq()&&(t.z=1),e.crossVectors(a,t).normalize(),0===e.lengthSq()&&(t.z+=1e-4,e.crossVectors(a,t).normalize()),r.crossVectors(t,e),o[0]=e.x,o[4]=r.x,o[8]=t.x,o[1]=e.y,o[5]=r.y,o[9]=t.y,o[2]=e.z,o[6]=r.z,o[10]=t.z,this}}(),multiply:function(e,r){return void 0!==r?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(e,r)):this.multiplyMatrices(this,e)},premultiply:function(e){return this.multiplyMatrices(e,this)},multiplyMatrices:function(e,r){var t=e.elements,n=r.elements,i=this.elements,a=t[0],o=t[4],s=t[8],c=t[12],l=t[1],h=t[5],d=t[9],u=t[13],p=t[2],f=t[6],m=t[10],E=t[14],g=t[3],v=t[7],T=t[11],_=t[15],y=n[0],x=n[4],R=n[8],b=n[12],H=n[1],M=n[5],S=n[9],w=n[13],L=n[2],C=n[6],P=n[10],A=n[14],D=n[3],I=n[7],U=n[11],N=n[15];return i[0]=a*y+o*H+s*L+c*D,i[4]=a*x+o*M+s*C+c*I,i[8]=a*R+o*S+s*P+c*U,i[12]=a*b+o*w+s*A+c*N,i[1]=l*y+h*H+d*L+u*D,i[5]=l*x+h*M+d*C+u*I,i[9]=l*R+h*S+d*P+u*U,i[13]=l*b+h*w+d*A+u*N,i[2]=p*y+f*H+m*L+E*D,i[6]=p*x+f*M+m*C+E*I,i[10]=p*R+f*S+m*P+E*U,i[14]=p*b+f*w+m*A+E*N,i[3]=g*y+v*H+T*L+_*D,i[7]=g*x+v*M+T*C+_*I,i[11]=g*R+v*S+T*P+_*U,i[15]=g*b+v*w+T*A+_*N,this},multiplyToArray:function(e,r,t){var n=this.elements;return this.multiplyMatrices(e,r),t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],this},multiplyScalar:function(e){var r=this.elements;return r[0]*=e,r[4]*=e,r[8]*=e,r[12]*=e,r[1]*=e,r[5]*=e,r[9]*=e,r[13]*=e,r[2]*=e,r[6]*=e,r[10]*=e,r[14]*=e,r[3]*=e,r[7]*=e,r[11]*=e,r[15]*=e,this},applyToVector3Array:function(){var e;return function(r,t,n){void 0===e&&(e=new THREE.Vector3),void 0===t&&(t=0),void 0===n&&(n=r.length);for(var i=0,a=t;n>i;i+=3,a+=3)e.fromArray(r,a),e.applyMatrix4(this),e.toArray(r,a);return r}}(),applyToBuffer:function(){var e;return function(r,t,n){void 0===e&&(e=new THREE.Vector3),void 0===t&&(t=0),void 0===n&&(n=r.length/r.itemSize);for(var i=0,a=t;n>i;i++,a++)e.x=r.getX(a),e.y=r.getY(a),e.z=r.getZ(a),e.applyMatrix4(this),r.setXYZ(e.x,e.y,e.z);return r}}(),determinant:function(){var e=this.elements,r=e[0],t=e[4],n=e[8],i=e[12],a=e[1],o=e[5],s=e[9],c=e[13],l=e[2],h=e[6],d=e[10],u=e[14],p=e[3],f=e[7],m=e[11],E=e[15];return p*(+i*s*h-n*c*h-i*o*d+t*c*d+n*o*u-t*s*u)+f*(+r*s*u-r*c*d+i*a*d-n*a*u+n*c*l-i*s*l)+m*(+r*c*h-r*o*u-i*a*h+t*a*u+i*o*l-t*c*l)+E*(-n*o*l-r*s*h+r*o*d+n*a*h-t*a*d+t*s*l)},transpose:function(){var e,r=this.elements;return e=r[1],r[1]=r[4],r[4]=e,e=r[2],r[2]=r[8],r[8]=e,e=r[6],r[6]=r[9],r[9]=e,e=r[3],r[3]=r[12],r[12]=e,e=r[7],r[7]=r[13],r[13]=e,e=r[11],r[11]=r[14],r[14]=e,this},flattenToArrayOffset:function(e,r){return console.warn("THREE.Matrix3: .flattenToArrayOffset is deprecated - just use .toArray instead."),this.toArray(e,r)},getPosition:function(){var e;return function(){return void 0===e&&(e=new THREE.Vector3),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),e.setFromMatrixColumn(this,3)}}(),setPosition:function(e){var r=this.elements;return r[12]=e.x,r[13]=e.y,r[14]=e.z,this},getInverse:function(e,r){var t=this.elements,n=e.elements,i=n[0],a=n[1],o=n[2],s=n[3],c=n[4],l=n[5],h=n[6],d=n[7],u=n[8],p=n[9],f=n[10],m=n[11],E=n[12],g=n[13],v=n[14],T=n[15],_=p*v*d-g*f*d+g*h*m-l*v*m-p*h*T+l*f*T,y=E*f*d-u*v*d-E*h*m+c*v*m+u*h*T-c*f*T,x=u*g*d-E*p*d+E*l*m-c*g*m-u*l*T+c*p*T,R=E*p*h-u*g*h-E*l*f+c*g*f+u*l*v-c*p*v,b=i*_+a*y+o*x+s*R;if(0===b){var H="THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";if(r)throw new Error(H);return console.warn(H),this.identity()}var M=1/b;return t[0]=_*M,t[1]=(g*f*s-p*v*s-g*o*m+a*v*m+p*o*T-a*f*T)*M,t[2]=(l*v*s-g*h*s+g*o*d-a*v*d-l*o*T+a*h*T)*M,t[3]=(p*h*s-l*f*s-p*o*d+a*f*d+l*o*m-a*h*m)*M,t[4]=y*M,t[5]=(u*v*s-E*f*s+E*o*m-i*v*m-u*o*T+i*f*T)*M,t[6]=(E*h*s-c*v*s-E*o*d+i*v*d+c*o*T-i*h*T)*M,t[7]=(c*f*s-u*h*s+u*o*d-i*f*d-c*o*m+i*h*m)*M,t[8]=x*M,t[9]=(E*p*s-u*g*s-E*a*m+i*g*m+u*a*T-i*p*T)*M,t[10]=(c*g*s-E*l*s+E*a*d-i*g*d-c*a*T+i*l*T)*M,t[11]=(u*l*s-c*p*s-u*a*d+i*p*d+c*a*m-i*l*m)*M,t[12]=R*M,t[13]=(u*g*o-E*p*o+E*a*f-i*g*f-u*a*v+i*p*v)*M,t[14]=(E*l*o-c*g*o-E*a*h+i*g*h+c*a*v-i*l*v)*M,t[15]=(c*p*o-u*l*o+u*a*h-i*p*h-c*a*f+i*l*f)*M,this},scale:function(e){var r=this.elements,t=e.x,n=e.y,i=e.z;return r[0]*=t,r[4]*=n,r[8]*=i,r[1]*=t,r[5]*=n,r[9]*=i,r[2]*=t,r[6]*=n,r[10]*=i,r[3]*=t,r[7]*=n,r[11]*=i,this},getMaxScaleOnAxis:function(){var e=this.elements,r=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],t=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],n=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(r,t,n))},makeTranslation:function(e,r,t){return this.set(1,0,0,e,0,1,0,r,0,0,1,t,0,0,0,1),this},makeRotationX:function(e){var r=Math.cos(e),t=Math.sin(e);return this.set(1,0,0,0,0,r,-t,0,0,t,r,0,0,0,0,1),this},makeRotationY:function(e){var r=Math.cos(e),t=Math.sin(e);return this.set(r,0,t,0,0,1,0,0,-t,0,r,0,0,0,0,1),this},makeRotationZ:function(e){var r=Math.cos(e),t=Math.sin(e);return this.set(r,-t,0,0,t,r,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(e,r){var t=Math.cos(r),n=Math.sin(r),i=1-t,a=e.x,o=e.y,s=e.z,c=i*a,l=i*o;return this.set(c*a+t,c*o-n*s,c*s+n*o,0,c*o+n*s,l*o+t,l*s-n*a,0,c*s-n*o,l*s+n*a,i*s*s+t,0,0,0,0,1),this},makeScale:function(e,r,t){return this.set(e,0,0,0,0,r,0,0,0,0,t,0,0,0,0,1),this},compose:function(e,r,t){return this.makeRotationFromQuaternion(r),this.scale(t),this.setPosition(e),this},decompose:function(){var e,r;return function(t,n,i){void 0===e&&(e=new THREE.Vector3,r=new THREE.Matrix4);var a=this.elements,o=e.set(a[0],a[1],a[2]).length(),s=e.set(a[4],a[5],a[6]).length(),c=e.set(a[8],a[9],a[10]).length(),l=this.determinant();0>l&&(o=-o),t.x=a[12],t.y=a[13],t.z=a[14],r.elements.set(this.elements);var h=1/o,d=1/s,u=1/c;return r.elements[0]*=h,r.elements[1]*=h,r.elements[2]*=h,r.elements[4]*=d,r.elements[5]*=d,r.elements[6]*=d,r.elements[8]*=u,r.elements[9]*=u,r.elements[10]*=u,n.setFromRotationMatrix(r),i.x=o,i.y=s,i.z=c,this}}(),makeFrustum:function(e,r,t,n,i,a){var o=this.elements,s=2*i/(r-e),c=2*i/(n-t),l=(r+e)/(r-e),h=(n+t)/(n-t),d=-(a+i)/(a-i),u=-2*a*i/(a-i);return o[0]=s,o[4]=0,o[8]=l,o[12]=0,o[1]=0,o[5]=c,o[9]=h,o[13]=0,o[2]=0,o[6]=0,o[10]=d,o[14]=u,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makePerspective:function(e,r,t,n){var i=t*Math.tan(THREE.Math.DEG2RAD*e*.5),a=-i,o=a*r,s=i*r;return this.makeFrustum(o,s,a,i,t,n)},makeOrthographic:function(e,r,t,n,i,a){var o=this.elements,s=1/(r-e),c=1/(t-n),l=1/(a-i),h=(r+e)*s,d=(t+n)*c,u=(a+i)*l;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-h,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-d,o[2]=0,o[6]=0,o[10]=-2*l,o[14]=-u,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(e){for(var r=this.elements,t=e.elements,n=0;16>n;n++)if(r[n]!==t[n])return!1;return!0},fromArray:function(e){return this.elements.set(e),this},toArray:function(e,r){void 0===e&&(e=[]),void 0===r&&(r=0);var t=this.elements;return e[r]=t[0],e[r+1]=t[1],e[r+2]=t[2],e[r+3]=t[3],e[r+4]=t[4],e[r+5]=t[5],e[r+6]=t[6],e[r+7]=t[7],e[r+8]=t[8],e[r+9]=t[9],e[r+10]=t[10],e[r+11]=t[11],e[r+12]=t[12],e[r+13]=t[13],e[r+14]=t[14],e[r+15]=t[15],e}},THREE.Ray=function(e,r){this.origin=void 0!==e?e:new THREE.Vector3,this.direction=void 0!==r?r:new THREE.Vector3},THREE.Ray.prototype={constructor:THREE.Ray,set:function(e,r){return this.origin.copy(e),this.direction.copy(r),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this},at:function(e,r){var t=r||new THREE.Vector3;return t.copy(this.direction).multiplyScalar(e).add(this.origin)},lookAt:function(e){return this.direction.copy(e).sub(this.origin).normalize(),this},recast:function(){var e=new THREE.Vector3;return function(r){return this.origin.copy(this.at(r,e)),this}}(),closestPointToPoint:function(e,r){var t=r||new THREE.Vector3;t.subVectors(e,this.origin);var n=t.dot(this.direction);return 0>n?t.copy(this.origin):t.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(e){return Math.sqrt(this.distanceSqToPoint(e))},distanceSqToPoint:function(){var e=new THREE.Vector3;return function(r){var t=e.subVectors(r,this.origin).dot(this.direction);return 0>t?this.origin.distanceToSquared(r):(e.copy(this.direction).multiplyScalar(t).add(this.origin),e.distanceToSquared(r))}}(),distanceSqToSegment:function(){var e=new THREE.Vector3,r=new THREE.Vector3,t=new THREE.Vector3;return function(n,i,a,o){e.copy(n).add(i).multiplyScalar(.5),r.copy(i).sub(n).normalize(),t.copy(this.origin).sub(e);var s,c,l,h,d=.5*n.distanceTo(i),u=-this.direction.dot(r),p=t.dot(this.direction),f=-t.dot(r),m=t.lengthSq(),E=Math.abs(1-u*u);if(E>0)if(s=u*f-p,c=u*p-f,h=d*E,s>=0)if(c>=-h)if(h>=c){var g=1/E;s*=g,c*=g,l=s*(s+u*c+2*p)+c*(u*s+c+2*f)+m}else c=d,s=Math.max(0,-(u*c+p)),l=-s*s+c*(c+2*f)+m;else c=-d,s=Math.max(0,-(u*c+p)),l=-s*s+c*(c+2*f)+m;else-h>=c?(s=Math.max(0,-(-u*d+p)),c=s>0?-d:Math.min(Math.max(-d,-f),d),l=-s*s+c*(c+2*f)+m):h>=c?(s=0,c=Math.min(Math.max(-d,-f),d),l=c*(c+2*f)+m):(s=Math.max(0,-(u*d+p)),c=s>0?d:Math.min(Math.max(-d,-f),d),l=-s*s+c*(c+2*f)+m);else c=u>0?-d:d,s=Math.max(0,-(u*c+p)),l=-s*s+c*(c+2*f)+m;return a&&a.copy(this.direction).multiplyScalar(s).add(this.origin),o&&o.copy(r).multiplyScalar(c).add(e),l}}(),intersectSphere:function(){var e=new THREE.Vector3;return function(r,t){e.subVectors(r.center,this.origin);var n=e.dot(this.direction),i=e.dot(e)-n*n,a=r.radius*r.radius;if(i>a)return null;var o=Math.sqrt(a-i),s=n-o,c=n+o;return 0>s&&0>c?null:0>s?this.at(c,t):this.at(s,t)}}(),intersectsSphere:function(e){return this.distanceToPoint(e.center)<=e.radius},distanceToPlane:function(e){var r=e.normal.dot(this.direction);if(0===r)return 0===e.distanceToPoint(this.origin)?0:null;var t=-(this.origin.dot(e.normal)+e.constant)/r;return t>=0?t:null},intersectPlane:function(e,r){var t=this.distanceToPlane(e);return null===t?null:this.at(t,r)},intersectsPlane:function(e){var r=e.distanceToPoint(this.origin);if(0===r)return!0;var t=e.normal.dot(this.direction);return 0>t*r},intersectBox:function(e,r){var t,n,i,a,o,s,c=1/this.direction.x,l=1/this.direction.y,h=1/this.direction.z,d=this.origin;return c>=0?(t=(e.min.x-d.x)*c,n=(e.max.x-d.x)*c):(t=(e.max.x-d.x)*c,n=(e.min.x-d.x)*c),l>=0?(i=(e.min.y-d.y)*l,a=(e.max.y-d.y)*l):(i=(e.max.y-d.y)*l,a=(e.min.y-d.y)*l),t>a||i>n?null:((i>t||t!==t)&&(t=i),(n>a||n!==n)&&(n=a),h>=0?(o=(e.min.z-d.z)*h,s=(e.max.z-d.z)*h):(o=(e.max.z-d.z)*h,s=(e.min.z-d.z)*h),t>s||o>n?null:((o>t||t!==t)&&(t=o),(n>s||n!==n)&&(n=s),0>n?null:this.at(t>=0?t:n,r)))},intersectsBox:function(){var e=new THREE.Vector3;return function(r){return null!==this.intersectBox(r,e)}}(),intersectTriangle:function(){var e=new THREE.Vector3,r=new THREE.Vector3,t=new THREE.Vector3,n=new THREE.Vector3;return function(i,a,o,s,c){r.subVectors(a,i),t.subVectors(o,i),n.crossVectors(r,t);var l,h=this.direction.dot(n);if(h>0){if(s)return null;l=1}else{if(!(0>h))return null;l=-1,h=-h}e.subVectors(this.origin,i);var d=l*this.direction.dot(t.crossVectors(e,t));if(0>d)return null;var u=l*this.direction.dot(r.cross(e));if(0>u)return null;if(d+u>h)return null;var p=-l*e.dot(n);return 0>p?null:this.at(p/h,c)}}(),applyMatrix4:function(e){return this.direction.add(this.origin).applyMatrix4(e),this.origin.applyMatrix4(e),this.direction.sub(this.origin),this.direction.normalize(),this},equals:function(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}},THREE.Sphere=function(e,r){this.center=void 0!==e?e:new THREE.Vector3,this.radius=void 0!==r?r:0},THREE.Sphere.prototype={constructor:THREE.Sphere,set:function(e,r){return this.center.copy(e),this.radius=r,this},setFromPoints:function(){var e=new THREE.Box3;return function(r,t){var n=this.center;void 0!==t?n.copy(t):e.setFromPoints(r).center(n);for(var i=0,a=0,o=r.length;o>a;a++)i=Math.max(i,n.distanceToSquared(r[a]));return this.radius=Math.sqrt(i),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.center.copy(e.center),this.radius=e.radius,this},empty:function(){return this.radius<=0},containsPoint:function(e){return e.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(e){return e.distanceTo(this.center)-this.radius},intersectsSphere:function(e){var r=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=r*r},intersectsBox:function(e){return e.intersectsSphere(this)},intersectsPlane:function(e){return Math.abs(this.center.dot(e.normal)-e.constant)<=this.radius},clampPoint:function(e,r){var t=this.center.distanceToSquared(e),n=r||new THREE.Vector3;return n.copy(e),t>this.radius*this.radius&&(n.sub(this.center).normalize(),n.multiplyScalar(this.radius).add(this.center)),n},getBoundingBox:function(e){var r=e||new THREE.Box3;return r.set(this.center,this.center),r.expandByScalar(this.radius),r},applyMatrix4:function(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this},translate:function(e){return this.center.add(e),this},equals:function(e){return e.center.equals(this.center)&&e.radius===this.radius}},THREE.Frustum=function(e,r,t,n,i,a){this.planes=[void 0!==e?e:new THREE.Plane,void 0!==r?r:new THREE.Plane,void 0!==t?t:new THREE.Plane,void 0!==n?n:new THREE.Plane,void 0!==i?i:new THREE.Plane,void 0!==a?a:new THREE.Plane]},THREE.Frustum.prototype={constructor:THREE.Frustum,set:function(e,r,t,n,i,a){var o=this.planes;return o[0].copy(e),o[1].copy(r),o[2].copy(t),o[3].copy(n),o[4].copy(i),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){for(var r=this.planes,t=0;6>t;t++)r[t].copy(e.planes[t]);return this},setFromMatrix:function(e){var r=this.planes,t=e.elements,n=t[0],i=t[1],a=t[2],o=t[3],s=t[4],c=t[5],l=t[6],h=t[7],d=t[8],u=t[9],p=t[10],f=t[11],m=t[12],E=t[13],g=t[14],v=t[15];return r[0].setComponents(o-n,h-s,f-d,v-m).normalize(),r[1].setComponents(o+n,h+s,f+d,v+m).normalize(),r[2].setComponents(o+i,h+c,f+u,v+E).normalize(),r[3].setComponents(o-i,h-c,f-u,v-E).normalize(),r[4].setComponents(o-a,h-l,f-p,v-g).normalize(),r[5].setComponents(o+a,h+l,f+p,v+g).normalize(),this},intersectsObject:function(){var e=new THREE.Sphere;return function(r){var t=r.geometry;return null===t.boundingSphere&&t.computeBoundingSphere(),e.copy(t.boundingSphere).applyMatrix4(r.matrixWorld),this.intersectsSphere(e)}}(),intersectsSprite:function(){var e=new THREE.Sphere;return function(r){return e.center.set(0,0,0),e.radius=.7071067811865476,e.applyMatrix4(r.matrixWorld),this.intersectsSphere(e)}}(),intersectsSphere:function(e){for(var r=this.planes,t=e.center,n=-e.radius,i=0;6>i;i++){var a=r[i].distanceToPoint(t);if(n>a)return!1}return!0},intersectsBox:function(){var e=new THREE.Vector3,r=new THREE.Vector3;return function(t){for(var n=this.planes,i=0;6>i;i++){var a=n[i];e.x=a.normal.x>0?t.min.x:t.max.x,r.x=a.normal.x>0?t.max.x:t.min.x,e.y=a.normal.y>0?t.min.y:t.max.y,r.y=a.normal.y>0?t.max.y:t.min.y,e.z=a.normal.z>0?t.min.z:t.max.z,r.z=a.normal.z>0?t.max.z:t.min.z;var o=a.distanceToPoint(e),s=a.distanceToPoint(r);if(0>o&&0>s)return!1}return!0}}(),containsPoint:function(e){for(var r=this.planes,t=0;6>t;t++)if(r[t].distanceToPoint(e)<0)return!1;return!0}},THREE.Plane=function(e,r){this.normal=void 0!==e?e:new THREE.Vector3(1,0,0),this.constant=void 0!==r?r:0},THREE.Plane.prototype={constructor:THREE.Plane,set:function(e,r){return this.normal.copy(e),this.constant=r,this},setComponents:function(e,r,t,n){return this.normal.set(e,r,t),this.constant=n,this},setFromNormalAndCoplanarPoint:function(e,r){return this.normal.copy(e),this.constant=-r.dot(this.normal),this},setFromCoplanarPoints:function(){var e=new THREE.Vector3,r=new THREE.Vector3;return function(t,n,i){var a=e.subVectors(i,n).cross(r.subVectors(t,n)).normalize();return this.setFromNormalAndCoplanarPoint(a,t),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.normal.copy(e.normal),this.constant=e.constant,this},normalize:function(){var e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(e){return this.normal.dot(e)+this.constant},distanceToSphere:function(e){return this.distanceToPoint(e.center)-e.radius},projectPoint:function(e,r){return this.orthoPoint(e,r).sub(e).negate()},orthoPoint:function(e,r){var t=this.distanceToPoint(e),n=r||new THREE.Vector3;return n.copy(this.normal).multiplyScalar(t)},intersectLine:function(){var e=new THREE.Vector3;return function(r,t){var n=t||new THREE.Vector3,i=r.delta(e),a=this.normal.dot(i);if(0!==a){var o=-(r.start.dot(this.normal)+this.constant)/a;if(!(0>o||o>1))return n.copy(i).multiplyScalar(o).add(r.start)}else if(0===this.distanceToPoint(r.start))return n.copy(r.start)}}(),intersectsLine:function(e){var r=this.distanceToPoint(e.start),t=this.distanceToPoint(e.end);return 0>r&&t>0||0>t&&r>0},intersectsBox:function(e){return e.intersectsPlane(this)},intersectsSphere:function(e){return e.intersectsPlane(this)},coplanarPoint:function(e){var r=e||new THREE.Vector3;return r.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var e=new THREE.Vector3,r=new THREE.Matrix3;return function(t,n){var i=this.coplanarPoint(e).applyMatrix4(t),a=n||r.getNormalMatrix(t),o=this.normal.applyMatrix3(a).normalize();return this.constant=-i.dot(o),this}}(),translate:function(e){return this.constant=this.constant-e.dot(this.normal),this},equals:function(e){return e.normal.equals(this.normal)&&e.constant===this.constant}},THREE.Spherical=function(e,r,t){return this.radius=void 0!==e?e:1,this.phi=void 0!==r?r:0,this.theta=void 0!==t?t:0,this},THREE.Spherical.prototype={constructor:THREE.Spherical,set:function(e,r,t){return this.radius=e,this.phi=r,this.theta=t,this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.radius.copy(e.radius),this.phi.copy(e.phi),this.theta.copy(e.theta),this},makeSafe:function(){var e=1e-6;return this.phi=Math.max(e,Math.min(Math.PI-e,this.phi)),this},setFromVector3:function(e){return this.radius=e.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e.x,e.z),this.phi=Math.acos(THREE.Math.clamp(e.y/this.radius,-1,1))),this}},THREE.Math={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var e,r="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),t=new Array(36),n=0;return function(){for(var i=0;36>i;i++)8===i||13===i||18===i||23===i?t[i]="-":14===i?t[i]="4":(2>=n&&(n=33554432+16777216*Math.random()|0),e=15&n,n>>=4,t[i]=r[19===i?3&e|8:e]);return t.join("")}}(),clamp:function(e,r,t){return Math.max(r,Math.min(t,e))},euclideanModulo:function(e,r){return(e%r+r)%r},mapLinear:function(e,r,t,n,i){return n+(e-r)*(i-n)/(t-r)},smoothstep:function(e,r,t){return r>=e?0:e>=t?1:(e=(e-r)/(t-r),e*e*(3-2*e))},smootherstep:function(e,r,t){return r>=e?0:e>=t?1:(e=(e-r)/(t-r),e*e*e*(e*(6*e-15)+10))},random16:function(){return console.warn("THREE.Math.random16() has been deprecated. Use Math.random() instead."),Math.random()},randInt:function(e,r){return e+Math.floor(Math.random()*(r-e+1))},randFloat:function(e,r){return e+Math.random()*(r-e)},randFloatSpread:function(e){return e*(.5-Math.random())},degToRad:function(e){return e*THREE.Math.DEG2RAD},radToDeg:function(e){return e*THREE.Math.RAD2DEG},isPowerOfTwo:function(e){return 0===(e&e-1)&&0!==e},nearestPowerOfTwo:function(e){return Math.pow(2,Math.round(Math.log(e)/Math.LN2))},nextPowerOfTwo:function(e){return e--,e|=e>>1,e|=e>>2,e|=e>>4,e|=e>>8,e|=e>>16,e++,e}},THREE.Spline=function(e){function r(e,r,t,n,i,a,o){var s=.5*(t-e),c=.5*(n-r);return(2*(r-t)+s+c)*o+(-3*(r-t)-2*s-c)*a+s*i+r}this.points=e;var t,n,i,a,o,s,c,l,h,d=[],u={x:0,y:0,z:0};this.initFromArray=function(e){this.points=[];for(var r=0;r<e.length;r++)this.points[r]={x:e[r][0],y:e[r][1],z:e[r][2]}},this.getPoint=function(e){return t=(this.points.length-1)*e,n=Math.floor(t),i=t-n,d[0]=0===n?n:n-1,d[1]=n,d[2]=n>this.points.length-2?this.points.length-1:n+1,d[3]=n>this.points.length-3?this.points.length-1:n+2,s=this.points[d[0]],c=this.points[d[1]],l=this.points[d[2]],h=this.points[d[3]],a=i*i,o=i*a,u.x=r(s.x,c.x,l.x,h.x,i,a,o),u.y=r(s.y,c.y,l.y,h.y,i,a,o),u.z=r(s.z,c.z,l.z,h.z,i,a,o),u},this.getControlPointsArray=function(){var e,r,t=this.points.length,n=[];for(e=0;t>e;e++)r=this.points[e],n[e]=[r.x,r.y,r.z];return n},this.getLength=function(e){var r,t,n,i,a=0,o=0,s=0,c=new THREE.Vector3,l=new THREE.Vector3,h=[],d=0;for(h[0]=0,e||(e=100),n=this.points.length*e,c.copy(this.points[0]),r=1;n>r;r++)t=r/n,i=this.getPoint(t),l.copy(i),d+=l.distanceTo(c),c.copy(i),a=(this.points.length-1)*t,o=Math.floor(a),o!==s&&(h[o]=d,s=o);return h[h.length]=d,{chunks:h,total:d}},this.reparametrizeByArcLength=function(e){var r,t,n,i,a,o,s,c,l=[],h=new THREE.Vector3,d=this.getLength();for(l.push(h.copy(this.points[0]).clone()),r=1;r<this.points.length;r++){for(o=d.chunks[r]-d.chunks[r-1],s=Math.ceil(e*o/d.total),i=(r-1)/(this.points.length-1),a=r/(this.points.length-1),t=1;s-1>t;t++)n=i+t*(1/s)*(a-i),c=this.getPoint(n),l.push(h.copy(c).clone());l.push(h.copy(this.points[r]).clone())}this.points=l}},THREE.Triangle=function(e,r,t){this.a=void 0!==e?e:new THREE.Vector3,this.b=void 0!==r?r:new THREE.Vector3,this.c=void 0!==t?t:new THREE.Vector3},THREE.Triangle.normal=function(){var e=new THREE.Vector3;return function(r,t,n,i){var a=i||new THREE.Vector3;a.subVectors(n,t),e.subVectors(r,t),a.cross(e);var o=a.lengthSq();return o>0?a.multiplyScalar(1/Math.sqrt(o)):a.set(0,0,0)}}(),THREE.Triangle.barycoordFromPoint=function(){var e=new THREE.Vector3,r=new THREE.Vector3,t=new THREE.Vector3;return function(n,i,a,o,s){e.subVectors(o,i),r.subVectors(a,i),t.subVectors(n,i);
var c=e.dot(e),l=e.dot(r),h=e.dot(t),d=r.dot(r),u=r.dot(t),p=c*d-l*l,f=s||new THREE.Vector3;if(0===p)return f.set(-2,-1,-1);var m=1/p,E=(d*h-l*u)*m,g=(c*u-l*h)*m;return f.set(1-E-g,g,E)}}(),THREE.Triangle.containsPoint=function(){var e=new THREE.Vector3;return function(r,t,n,i){var a=THREE.Triangle.barycoordFromPoint(r,t,n,i,e);return a.x>=0&&a.y>=0&&a.x+a.y<=1}}(),THREE.Triangle.prototype={constructor:THREE.Triangle,set:function(e,r,t){return this.a.copy(e),this.b.copy(r),this.c.copy(t),this},setFromPointsAndIndices:function(e,r,t,n){return this.a.copy(e[r]),this.b.copy(e[t]),this.c.copy(e[n]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this},area:function(){var e=new THREE.Vector3,r=new THREE.Vector3;return function(){return e.subVectors(this.c,this.b),r.subVectors(this.a,this.b),.5*e.cross(r).length()}}(),midpoint:function(e){var r=e||new THREE.Vector3;return r.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(e){return THREE.Triangle.normal(this.a,this.b,this.c,e)},plane:function(e){var r=e||new THREE.Plane;return r.setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(e,r){return THREE.Triangle.barycoordFromPoint(e,this.a,this.b,this.c,r)},containsPoint:function(e){return THREE.Triangle.containsPoint(e,this.a,this.b,this.c)},closestPointToPoint:function(){var e,r,t,n;return function(i,a){void 0===e&&(e=new THREE.Plane,r=[new THREE.Line3,new THREE.Line3,new THREE.Line3],t=new THREE.Vector3,n=new THREE.Vector3);var o=a||new THREE.Vector3,s=1/0;if(e.setFromCoplanarPoints(this.a,this.b,this.c),e.projectPoint(i,t),this.containsPoint(t)===!0)o.copy(t);else{r[0].set(this.a,this.b),r[1].set(this.b,this.c),r[2].set(this.c,this.a);for(var c=0;c<r.length;c++){r[c].closestPointToPoint(t,!0,n);var l=t.distanceToSquared(n);s>l&&(s=l,o.copy(n))}}return o}}(),equals:function(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}},THREE.Interpolant=function(e,r,t,n){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=void 0!==n?n:new r.constructor(t),this.sampleValues=r,this.valueSize=t},THREE.Interpolant.prototype={constructor:THREE.Interpolant,evaluate:function(e){var r=this.parameterPositions,t=this._cachedIndex,n=r[t],i=r[t-1];e:{r:{var a;t:{n:if(!(n>e)){for(var o=t+2;;){if(void 0===n){if(i>e)break n;return t=r.length,this._cachedIndex=t,this.afterEnd_(t-1,e,i)}if(t===o)break;if(i=n,n=r[++t],n>e)break r}a=r.length;break t}{if(e>=i)break e;var s=r[1];s>e&&(t=2,i=s);for(var o=t-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,n);if(t===o)break;if(n=i,i=r[--t-1],e>=i)break r}a=t,t=0}}for(;a>t;){var c=t+a>>>1;e<r[c]?a=c:t=c+1}if(n=r[t],i=r[t-1],void 0===i)return this._cachedIndex=0,this.beforeStart_(0,e,n);if(void 0===n)return t=r.length,this._cachedIndex=t,this.afterEnd_(t-1,i,e)}this._cachedIndex=t,this.intervalChanged_(t,i,n)}return this.interpolate_(t,i,e,n)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(e){for(var r=this.resultBuffer,t=this.sampleValues,n=this.valueSize,i=e*n,a=0;a!==n;++a)r[a]=t[i+a];return r},interpolate_:function(e,r,t,n){throw new Error("call to abstract method")},intervalChanged_:function(e,r,t){}},Object.assign(THREE.Interpolant.prototype,{beforeStart_:THREE.Interpolant.prototype.copySampleValue_,afterEnd_:THREE.Interpolant.prototype.copySampleValue_}),THREE.CubicInterpolant=function(e,r,t,n){THREE.Interpolant.call(this,e,r,t,n),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0},THREE.CubicInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.CubicInterpolant,DefaultSettings_:{endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},intervalChanged_:function(e,r,t){var n=this.parameterPositions,i=e-2,a=e+1,o=n[i],s=n[a];if(void 0===o)switch(this.getSettings_().endingStart){case THREE.ZeroSlopeEnding:i=e,o=2*r-t;break;case THREE.WrapAroundEnding:i=n.length-2,o=r+n[i]-n[i+1];break;default:i=e,o=t}if(void 0===s)switch(this.getSettings_().endingEnd){case THREE.ZeroSlopeEnding:a=e,s=2*t-r;break;case THREE.WrapAroundEnding:a=1,s=t+n[1]-n[0];break;default:a=e-1,s=r}var c=.5*(t-r),l=this.valueSize;this._weightPrev=c/(r-o),this._weightNext=c/(s-t),this._offsetPrev=i*l,this._offsetNext=a*l},interpolate_:function(e,r,t,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=this._offsetPrev,h=this._offsetNext,d=this._weightPrev,u=this._weightNext,p=(t-r)/(n-r),f=p*p,m=f*p,E=-d*m+2*d*f-d*p,g=(1+d)*m+(-1.5-2*d)*f+(-.5+d)*p+1,v=(-1-u)*m+(1.5+u)*f+.5*p,T=u*m-u*f,_=0;_!==o;++_)i[_]=E*a[l+_]+g*a[c+_]+v*a[s+_]+T*a[h+_];return i}}),THREE.DiscreteInterpolant=function(e,r,t,n){THREE.Interpolant.call(this,e,r,t,n)},THREE.DiscreteInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.DiscreteInterpolant,interpolate_:function(e,r,t,n){return this.copySampleValue_(e-1)}}),THREE.LinearInterpolant=function(e,r,t,n){THREE.Interpolant.call(this,e,r,t,n)},THREE.LinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.LinearInterpolant,interpolate_:function(e,r,t,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=s-o,l=(t-r)/(n-r),h=1-l,d=0;d!==o;++d)i[d]=a[c+d]*h+a[s+d]*l;return i}}),THREE.QuaternionLinearInterpolant=function(e,r,t,n){THREE.Interpolant.call(this,e,r,t,n)},THREE.QuaternionLinearInterpolant.prototype=Object.assign(Object.create(THREE.Interpolant.prototype),{constructor:THREE.QuaternionLinearInterpolant,interpolate_:function(e,r,t,n){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=e*o,c=(t-r)/(n-r),l=s+o;s!==l;s+=4)THREE.Quaternion.slerpFlat(i,0,a,s-o,a,s,c);return i}}),THREE.Clock=function(e){this.autoStart=void 0!==e?e:!0,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1},THREE.Clock.prototype={constructor:THREE.Clock,start:function(){this.startTime=(performance||Date).now(),this.oldTime=this.startTime,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var e=0;if(this.autoStart&&!this.running&&this.start(),this.running){var r=(performance||Date).now();e=(r-this.oldTime)/1e3,this.oldTime=r,this.elapsedTime+=e}return e}},THREE.EventDispatcher=function(){},Object.assign(THREE.EventDispatcher.prototype,{addEventListener:function(e,r){void 0===this._listeners&&(this._listeners={});var t=this._listeners;void 0===t[e]&&(t[e]=[]),-1===t[e].indexOf(r)&&t[e].push(r)},hasEventListener:function(e,r){if(void 0===this._listeners)return!1;var t=this._listeners;return void 0!==t[e]&&-1!==t[e].indexOf(r)},removeEventListener:function(e,r){if(void 0!==this._listeners){var t=this._listeners,n=t[e];if(void 0!==n){var i=n.indexOf(r);-1!==i&&n.splice(i,1)}}},dispatchEvent:function(e){if(void 0!==this._listeners){var r=this._listeners,t=r[e.type];if(void 0!==t){e.target=this;var n=[],i=0,a=t.length;for(i=0;a>i;i++)n[i]=t[i];for(i=0;a>i;i++)n[i].call(this,e)}}}}),THREE.Layers=function(){this.mask=1},THREE.Layers.prototype={constructor:THREE.Layers,set:function(e){this.mask=1<<e},enable:function(e){this.mask|=1<<e},toggle:function(e){this.mask^=1<<e},disable:function(e){this.mask&=~(1<<e)},test:function(e){return 0!==(this.mask&e.mask)}},function(e){function r(e,r){return e.distance-r.distance}function t(e,r,n,i){if(e.visible!==!1&&(e.raycast(r,n),i===!0))for(var a=e.children,o=0,s=a.length;s>o;o++)t(a[o],r,n,!0)}e.Raycaster=function(r,t,n,i){this.ray=new e.Ray(r,t),this.near=n||0,this.far=i||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})},e.Raycaster.prototype={constructor:e.Raycaster,linePrecision:1,set:function(e,r){this.ray.set(e,r)},setFromCamera:function(r,t){t instanceof e.PerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(r.x,r.y,.5).unproject(t).sub(this.ray.origin).normalize()):t instanceof e.OrthographicCamera?(this.ray.origin.set(r.x,r.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(e,n){var i=[];return t(e,this,i,n),i.sort(r),i},intersectObjects:function(e,n){var i=[];if(Array.isArray(e)===!1)return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(var a=0,o=e.length;o>a;a++)t(e[a],this,i,n);return i.sort(r),i}}}(THREE),THREE.Object3D=function(){function e(){i.setFromEuler(n,!1)}function r(){n.setFromQuaternion(i,void 0,!1)}Object.defineProperty(this,"id",{value:THREE.Object3DIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=THREE.Object3D.DefaultUp.clone();var t=new THREE.Vector3,n=new THREE.Euler,i=new THREE.Quaternion,a=new THREE.Vector3(1,1,1);n.onChange(e),i.onChange(r),Object.defineProperties(this,{position:{enumerable:!0,value:t},rotation:{enumerable:!0,value:n},quaternion:{enumerable:!0,value:i},scale:{enumerable:!0,value:a},modelViewMatrix:{value:new THREE.Matrix4},normalMatrix:{value:new THREE.Matrix3}}),this.matrix=new THREE.Matrix4,this.matrixWorld=new THREE.Matrix4,this.matrixAutoUpdate=THREE.Object3D.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new THREE.Layers,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}},THREE.Object3D.DefaultUp=new THREE.Vector3(0,1,0),THREE.Object3D.DefaultMatrixAutoUpdate=!0,Object.assign(THREE.Object3D.prototype,THREE.EventDispatcher.prototype,{applyMatrix:function(e){this.matrix.multiplyMatrices(e,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},setRotationFromAxisAngle:function(e,r){this.quaternion.setFromAxisAngle(e,r)},setRotationFromEuler:function(e){this.quaternion.setFromEuler(e,!0)},setRotationFromMatrix:function(e){this.quaternion.setFromRotationMatrix(e)},setRotationFromQuaternion:function(e){this.quaternion.copy(e)},rotateOnAxis:function(){var e=new THREE.Quaternion;return function(r,t){return e.setFromAxisAngle(r,t),this.quaternion.multiply(e),this}}(),rotateX:function(){var e=new THREE.Vector3(1,0,0);return function(r){return this.rotateOnAxis(e,r)}}(),rotateY:function(){var e=new THREE.Vector3(0,1,0);return function(r){return this.rotateOnAxis(e,r)}}(),rotateZ:function(){var e=new THREE.Vector3(0,0,1);return function(r){return this.rotateOnAxis(e,r)}}(),translateOnAxis:function(){var e=new THREE.Vector3;return function(r,t){return e.copy(r).applyQuaternion(this.quaternion),this.position.add(e.multiplyScalar(t)),this}}(),translateX:function(){var e=new THREE.Vector3(1,0,0);return function(r){return this.translateOnAxis(e,r)}}(),translateY:function(){var e=new THREE.Vector3(0,1,0);return function(r){return this.translateOnAxis(e,r)}}(),translateZ:function(){var e=new THREE.Vector3(0,0,1);return function(r){return this.translateOnAxis(e,r)}}(),localToWorld:function(e){return e.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var e=new THREE.Matrix4;return function(r){return r.applyMatrix4(e.getInverse(this.matrixWorld))}}(),lookAt:function(){var e=new THREE.Matrix4;return function(r){e.lookAt(r,this.position,this.up),this.quaternion.setFromRotationMatrix(e)}}(),add:function(e){if(arguments.length>1){for(var r=0;r<arguments.length;r++)this.add(arguments[r]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e instanceof THREE.Object3D?(null!==e.parent&&e.parent.remove(e),e.parent=this,e.dispatchEvent({type:"added"}),this.children.push(e)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)},remove:function(e){if(arguments.length>1)for(var r=0;r<arguments.length;r++)this.remove(arguments[r]);var t=this.children.indexOf(e);-1!==t&&(e.parent=null,e.dispatchEvent({type:"removed"}),this.children.splice(t,1))},getObjectById:function(e){return this.getObjectByProperty("id",e)},getObjectByName:function(e){return this.getObjectByProperty("name",e)},getObjectByProperty:function(e,r){if(this[e]===r)return this;for(var t=0,n=this.children.length;n>t;t++){var i=this.children[t],a=i.getObjectByProperty(e,r);if(void 0!==a)return a}},getWorldPosition:function(e){var r=e||new THREE.Vector3;return this.updateMatrixWorld(!0),r.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var e=new THREE.Vector3,r=new THREE.Vector3;return function(t){var n=t||new THREE.Quaternion;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,n,r),n}}(),getWorldRotation:function(){var e=new THREE.Quaternion;return function(r){var t=r||new THREE.Euler;return this.getWorldQuaternion(e),t.setFromQuaternion(e,this.rotation.order,!1)}}(),getWorldScale:function(){var e=new THREE.Vector3,r=new THREE.Quaternion;return function(t){var n=t||new THREE.Vector3;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(e,r,n),n}}(),getWorldDirection:function(){var e=new THREE.Quaternion;return function(r){var t=r||new THREE.Vector3;return this.getWorldQuaternion(e),t.set(0,0,1).applyQuaternion(e)}}(),raycast:function(){},traverse:function(e){e(this);for(var r=this.children,t=0,n=r.length;n>t;t++)r[t].traverse(e)},traverseVisible:function(e){if(this.visible!==!1){e(this);for(var r=this.children,t=0,n=r.length;n>t;t++)r[t].traverseVisible(e)}},traverseAncestors:function(e){var r=this.parent;null!==r&&(e(r),r.traverseAncestors(e))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(e){this.matrixAutoUpdate===!0&&this.updateMatrix(),this.matrixWorldNeedsUpdate!==!0&&e!==!0||(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);for(var r=0,t=this.children.length;t>r;r++)this.children[r].updateMatrixWorld(e)},toJSON:function(e){function r(e){var r=[];for(var t in e){var n=e[t];delete n.metadata,r.push(n)}return r}var t=void 0===e||""===e,n={};t&&(e={geometries:{},materials:{},textures:{},images:{}},n.metadata={version:4.4,type:"Object",generator:"Object3D.toJSON"});var i={};if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),i.matrix=this.matrix.toArray(),void 0!==this.geometry&&(void 0===e.geometries[this.geometry.uuid]&&(e.geometries[this.geometry.uuid]=this.geometry.toJSON(e)),i.geometry=this.geometry.uuid),void 0!==this.material&&(void 0===e.materials[this.material.uuid]&&(e.materials[this.material.uuid]=this.material.toJSON(e)),i.material=this.material.uuid),this.children.length>0){i.children=[];for(var a=0;a<this.children.length;a++)i.children.push(this.children[a].toJSON(e).object)}if(t){var o=r(e.geometries),s=r(e.materials),c=r(e.textures),l=r(e.images);o.length>0&&(n.geometries=o),s.length>0&&(n.materials=s),c.length>0&&(n.textures=c),l.length>0&&(n.images=l)}return n.object=i,n},clone:function(e){return(new this.constructor).copy(this,e)},copy:function(e,r){if(void 0===r&&(r=!0),this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.userData=JSON.parse(JSON.stringify(e.userData)),r===!0)for(var t=0;t<e.children.length;t++){var n=e.children[t];this.add(n.clone())}return this}}),THREE.Object3DIdCount=0,THREE.Face3=function(e,r,t,n,i,a){this.a=e,this.b=r,this.c=t,this.normal=n instanceof THREE.Vector3?n:new THREE.Vector3,this.vertexNormals=Array.isArray(n)?n:[],this.color=i instanceof THREE.Color?i:new THREE.Color,this.vertexColors=Array.isArray(i)?i:[],this.materialIndex=void 0!==a?a:0},THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var r=0,t=e.vertexNormals.length;t>r;r++)this.vertexNormals[r]=e.vertexNormals[r].clone();for(var r=0,t=e.vertexColors.length;t>r;r++)this.vertexColors[r]=e.vertexColors[r].clone();return this}},THREE.BufferAttribute=function(e,r,t){this.uuid=THREE.Math.generateUUID(),this.array=e,this.itemSize=r,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0,this.normalized=t===!0},THREE.BufferAttribute.prototype={constructor:THREE.BufferAttribute,get count(){return this.array.length/this.itemSize},set needsUpdate(e){e===!0&&this.version++},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.dynamic=e.dynamic,this},copyAt:function(e,r,t){e*=this.itemSize,t*=r.itemSize;for(var n=0,i=this.itemSize;i>n;n++)this.array[e+n]=r.array[t+n];return this},copyArray:function(e){return this.array.set(e),this},copyColorsArray:function(e){for(var r=this.array,t=0,n=0,i=e.length;i>n;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",n),a=new THREE.Color),r[t++]=a.r,r[t++]=a.g,r[t++]=a.b}return this},copyIndicesArray:function(e){for(var r=this.array,t=0,n=0,i=e.length;i>n;n++){var a=e[n];r[t++]=a.a,r[t++]=a.b,r[t++]=a.c}return this},copyVector2sArray:function(e){for(var r=this.array,t=0,n=0,i=e.length;i>n;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",n),a=new THREE.Vector2),r[t++]=a.x,r[t++]=a.y}return this},copyVector3sArray:function(e){for(var r=this.array,t=0,n=0,i=e.length;i>n;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",n),a=new THREE.Vector3),r[t++]=a.x,r[t++]=a.y,r[t++]=a.z}return this},copyVector4sArray:function(e){for(var r=this.array,t=0,n=0,i=e.length;i>n;n++){var a=e[n];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",n),a=new THREE.Vector4),r[t++]=a.x,r[t++]=a.y,r[t++]=a.z,r[t++]=a.w}return this},set:function(e,r){return void 0===r&&(r=0),this.array.set(e,r),this},getX:function(e){return this.array[e*this.itemSize]},setX:function(e,r){return this.array[e*this.itemSize]=r,this},getY:function(e){return this.array[e*this.itemSize+1]},setY:function(e,r){return this.array[e*this.itemSize+1]=r,this},getZ:function(e){return this.array[e*this.itemSize+2]},setZ:function(e,r){return this.array[e*this.itemSize+2]=r,this},getW:function(e){return this.array[e*this.itemSize+3]},setW:function(e,r){return this.array[e*this.itemSize+3]=r,this},setXY:function(e,r,t){return e*=this.itemSize,this.array[e+0]=r,this.array[e+1]=t,this},setXYZ:function(e,r,t,n){return e*=this.itemSize,this.array[e+0]=r,this.array[e+1]=t,this.array[e+2]=n,this},setXYZW:function(e,r,t,n,i){return e*=this.itemSize,this.array[e+0]=r,this.array[e+1]=t,this.array[e+2]=n,this.array[e+3]=i,this},clone:function(){return(new this.constructor).copy(this)}},THREE.Int8Attribute=function(e,r){return new THREE.BufferAttribute(new Int8Array(e),r)},THREE.Uint8Attribute=function(e,r){return new THREE.BufferAttribute(new Uint8Array(e),r)},THREE.Uint8ClampedAttribute=function(e,r){return new THREE.BufferAttribute(new Uint8ClampedArray(e),r)},THREE.Int16Attribute=function(e,r){return new THREE.BufferAttribute(new Int16Array(e),r)},THREE.Uint16Attribute=function(e,r){return new THREE.BufferAttribute(new Uint16Array(e),r)},THREE.Int32Attribute=function(e,r){return new THREE.BufferAttribute(new Int32Array(e),r)},THREE.Uint32Attribute=function(e,r){return new THREE.BufferAttribute(new Uint32Array(e),r)},THREE.Float32Attribute=function(e,r){return new THREE.BufferAttribute(new Float32Array(e),r)},THREE.Float64Attribute=function(e,r){return new THREE.BufferAttribute(new Float64Array(e),r)},THREE.DynamicBufferAttribute=function(e,r){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new THREE.BufferAttribute(e,r).setDynamic(!0)},THREE.InstancedBufferAttribute=function(e,r,t){THREE.BufferAttribute.call(this,e,r),this.meshPerAttribute=t||1},THREE.InstancedBufferAttribute.prototype=Object.create(THREE.BufferAttribute.prototype),THREE.InstancedBufferAttribute.prototype.constructor=THREE.InstancedBufferAttribute,THREE.InstancedBufferAttribute.prototype.copy=function(e){return THREE.BufferAttribute.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},THREE.InterleavedBuffer=function(e,r){this.uuid=THREE.Math.generateUUID(),this.array=e,this.stride=r,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.version=0},THREE.InterleavedBuffer.prototype={constructor:THREE.InterleavedBuffer,get length(){return this.array.length},get count(){return this.array.length/this.stride},set needsUpdate(e){e===!0&&this.version++},setDynamic:function(e){return this.dynamic=e,this},copy:function(e){return this.array=new e.array.constructor(e.array),this.stride=e.stride,this.dynamic=e.dynamic,this},copyAt:function(e,r,t){e*=this.stride,t*=r.stride;for(var n=0,i=this.stride;i>n;n++)this.array[e+n]=r.array[t+n];return this},set:function(e,r){return void 0===r&&(r=0),this.array.set(e,r),this},clone:function(){return(new this.constructor).copy(this)}},THREE.InstancedInterleavedBuffer=function(e,r,t){THREE.InterleavedBuffer.call(this,e,r),this.meshPerAttribute=t||1},THREE.InstancedInterleavedBuffer.prototype=Object.create(THREE.InterleavedBuffer.prototype),THREE.InstancedInterleavedBuffer.prototype.constructor=THREE.InstancedInterleavedBuffer,THREE.InstancedInterleavedBuffer.prototype.copy=function(e){return THREE.InterleavedBuffer.prototype.copy.call(this,e),this.meshPerAttribute=e.meshPerAttribute,this},THREE.InterleavedBufferAttribute=function(e,r,t){this.uuid=THREE.Math.generateUUID(),this.data=e,this.itemSize=r,this.offset=t},THREE.InterleavedBufferAttribute.prototype={constructor:THREE.InterleavedBufferAttribute,get length(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count."),this.array.length},get count(){return this.data.count},setX:function(e,r){return this.data.array[e*this.data.stride+this.offset]=r,this},setY:function(e,r){return this.data.array[e*this.data.stride+this.offset+1]=r,this},setZ:function(e,r){return this.data.array[e*this.data.stride+this.offset+2]=r,this},setW:function(e,r){return this.data.array[e*this.data.stride+this.offset+3]=r,this},getX:function(e){return this.data.array[e*this.data.stride+this.offset]},getY:function(e){return this.data.array[e*this.data.stride+this.offset+1]},getZ:function(e){return this.data.array[e*this.data.stride+this.offset+2]},getW:function(e){return this.data.array[e*this.data.stride+this.offset+3]},setXY:function(e,r,t){return e=e*this.data.stride+this.offset,this.data.array[e+0]=r,this.data.array[e+1]=t,this},setXYZ:function(e,r,t,n){return e=e*this.data.stride+this.offset,this.data.array[e+0]=r,this.data.array[e+1]=t,this.data.array[e+2]=n,this},setXYZW:function(e,r,t,n,i){return e=e*this.data.stride+this.offset,this.data.array[e+0]=r,this.data.array[e+1]=t,this.data.array[e+2]=n,this.data.array[e+3]=i,this}},THREE.Geometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.elementsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1},Object.assign(THREE.Geometry.prototype,THREE.EventDispatcher.prototype,{applyMatrix:function(e){for(var r=(new THREE.Matrix3).getNormalMatrix(e),t=0,n=this.vertices.length;n>t;t++){var i=this.vertices[t];i.applyMatrix4(e)}for(var t=0,n=this.faces.length;n>t;t++){var a=this.faces[t];a.normal.applyMatrix3(r).normalize();for(var o=0,s=a.vertexNormals.length;s>o;o++)a.vertexNormals[o].applyMatrix3(r).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var e;return function(r){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationX(r),this.applyMatrix(e),this}}(),rotateY:function(){var e;return function(r){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationY(r),this.applyMatrix(e),this}}(),rotateZ:function(){var e;return function(r){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationZ(r),this.applyMatrix(e),this}}(),translate:function(){var e;return function(r,t,n){return void 0===e&&(e=new THREE.Matrix4),e.makeTranslation(r,t,n),this.applyMatrix(e),this}}(),scale:function(){var e;return function(r,t,n){return void 0===e&&(e=new THREE.Matrix4),e.makeScale(r,t,n),this.applyMatrix(e),this}}(),lookAt:function(){var e;return function(r){void 0===e&&(e=new THREE.Object3D),e.lookAt(r),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),fromBufferGeometry:function(e){function r(e,r,n,i){var a=void 0!==o?[h[e].clone(),h[r].clone(),h[n].clone()]:[],p=void 0!==s?[t.colors[e].clone(),t.colors[r].clone(),t.colors[n].clone()]:[],f=new THREE.Face3(e,r,n,a,p,i);t.faces.push(f),void 0!==c&&t.faceVertexUvs[0].push([d[e].clone(),d[r].clone(),d[n].clone()]),void 0!==l&&t.faceVertexUvs[1].push([u[e].clone(),u[r].clone(),u[n].clone()])}var t=this,n=null!==e.index?e.index.array:void 0,i=e.attributes,a=i.position.array,o=void 0!==i.normal?i.normal.array:void 0,s=void 0!==i.color?i.color.array:void 0,c=void 0!==i.uv?i.uv.array:void 0,l=void 0!==i.uv2?i.uv2.array:void 0;void 0!==l&&(this.faceVertexUvs[1]=[]);for(var h=[],d=[],u=[],p=0,f=0;p<a.length;p+=3,f+=2)t.vertices.push(new THREE.Vector3(a[p],a[p+1],a[p+2])),void 0!==o&&h.push(new THREE.Vector3(o[p],o[p+1],o[p+2])),void 0!==s&&t.colors.push(new THREE.Color(s[p],s[p+1],s[p+2])),void 0!==c&&d.push(new THREE.Vector2(c[f],c[f+1])),void 0!==l&&u.push(new THREE.Vector2(l[f],l[f+1]));if(void 0!==n){var m=e.groups;if(m.length>0)for(var p=0;p<m.length;p++)for(var E=m[p],g=E.start,v=E.count,f=g,T=g+v;T>f;f+=3)r(n[f],n[f+1],n[f+2],E.materialIndex);else for(var p=0;p<n.length;p+=3)r(n[p],n[p+1],n[p+2])}else for(var p=0;p<a.length/3;p+=3)r(p,p+1,p+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this},center:function(){this.computeBoundingBox();var e=this.boundingBox.center().negate();return this.translate(e.x,e.y,e.z),e},normalize:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,r=this.boundingSphere.radius,t=0===r?1:1/r,n=new THREE.Matrix4;return n.set(t,0,0,-t*e.x,0,t,0,-t*e.y,0,0,t,-t*e.z,0,0,0,1),this.applyMatrix(n),this},computeFaceNormals:function(){for(var e=new THREE.Vector3,r=new THREE.Vector3,t=0,n=this.faces.length;n>t;t++){var i=this.faces[t],a=this.vertices[i.a],o=this.vertices[i.b],s=this.vertices[i.c];e.subVectors(s,o),r.subVectors(a,o),e.cross(r),e.normalize(),i.normal.copy(e)}},computeVertexNormals:function(e){void 0===e&&(e=!0);var r,t,n,i,a,o;for(o=new Array(this.vertices.length),r=0,t=this.vertices.length;t>r;r++)o[r]=new THREE.Vector3;if(e){var s,c,l,h=new THREE.Vector3,d=new THREE.Vector3;for(n=0,i=this.faces.length;i>n;n++)a=this.faces[n],s=this.vertices[a.a],c=this.vertices[a.b],l=this.vertices[a.c],h.subVectors(l,c),d.subVectors(s,c),h.cross(d),o[a.a].add(h),o[a.b].add(h),o[a.c].add(h)}else for(n=0,i=this.faces.length;i>n;n++)a=this.faces[n],o[a.a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(r=0,t=this.vertices.length;t>r;r++)o[r].normalize();for(n=0,i=this.faces.length;i>n;n++){a=this.faces[n];var u=a.vertexNormals;3===u.length?(u[0].copy(o[a.a]),u[1].copy(o[a.b]),u[2].copy(o[a.c])):(u[0]=o[a.a].clone(),u[1]=o[a.b].clone(),u[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var e,r,t,n,i;for(t=0,n=this.faces.length;n>t;t++)for(i=this.faces[t],i.__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]),e=0,r=i.vertexNormals.length;r>e;e++)i.__originalVertexNormals[e]?i.__originalVertexNormals[e].copy(i.vertexNormals[e]):i.__originalVertexNormals[e]=i.vertexNormals[e].clone();var a=new THREE.Geometry;for(a.faces=this.faces,e=0,r=this.morphTargets.length;r>e;e++){if(!this.morphNormals[e]){this.morphNormals[e]={},this.morphNormals[e].faceNormals=[],this.morphNormals[e].vertexNormals=[];var o,s,c=this.morphNormals[e].faceNormals,l=this.morphNormals[e].vertexNormals;for(t=0,n=this.faces.length;n>t;t++)o=new THREE.Vector3,s={a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3},c.push(o),l.push(s)}var h=this.morphNormals[e];a.vertices=this.morphTargets[e].vertices,a.computeFaceNormals(),a.computeVertexNormals();var o,s;for(t=0,n=this.faces.length;n>t;t++)i=this.faces[t],o=h.faceNormals[t],s=h.vertexNormals[t],o.copy(i.normal),s.a.copy(i.vertexNormals[0]),s.b.copy(i.vertexNormals[1]),s.c.copy(i.vertexNormals[2])}for(t=0,n=this.faces.length;n>t;t++)i=this.faces[t],i.normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeTangents:function(){console.warn("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){for(var e=0,r=this.vertices,t=0,n=r.length;n>t;t++)t>0&&(e+=r[t].distanceTo(r[t-1])),this.lineDistances[t]=e},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere),this.boundingSphere.setFromPoints(this.vertices)},merge:function(e,r,t){if(e instanceof THREE.Geometry==!1)return void console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e);var n,i=this.vertices.length,a=this.vertices,o=e.vertices,s=this.faces,c=e.faces,l=this.faceVertexUvs[0],h=e.faceVertexUvs[0];void 0===t&&(t=0),void 0!==r&&(n=(new THREE.Matrix3).getNormalMatrix(r));for(var d=0,u=o.length;u>d;d++){var p=o[d],f=p.clone();void 0!==r&&f.applyMatrix4(r),a.push(f)}for(d=0,u=c.length;u>d;d++){var m,E,g,v=c[d],T=v.vertexNormals,_=v.vertexColors;m=new THREE.Face3(v.a+i,v.b+i,v.c+i),m.normal.copy(v.normal),void 0!==n&&m.normal.applyMatrix3(n).normalize();for(var y=0,x=T.length;x>y;y++)E=T[y].clone(),void 0!==n&&E.applyMatrix3(n).normalize(),m.vertexNormals.push(E);m.color.copy(v.color);for(var y=0,x=_.length;x>y;y++)g=_[y],m.vertexColors.push(g.clone());m.materialIndex=v.materialIndex+t,s.push(m)}for(d=0,u=h.length;u>d;d++){var R=h[d],b=[];if(void 0!==R){for(var y=0,x=R.length;x>y;y++)b.push(R[y].clone());l.push(b)}}},mergeMesh:function(e){return e instanceof THREE.Mesh==!1?void console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e):(e.matrixAutoUpdate&&e.updateMatrix(),void this.merge(e.geometry,e.matrix))},mergeVertices:function(){var e,r,t,n,i,a,o,s,c={},l=[],h=[],d=4,u=Math.pow(10,d);for(t=0,
n=this.vertices.length;n>t;t++)e=this.vertices[t],r=Math.round(e.x*u)+"_"+Math.round(e.y*u)+"_"+Math.round(e.z*u),void 0===c[r]?(c[r]=t,l.push(this.vertices[t]),h[t]=l.length-1):h[t]=h[c[r]];var p=[];for(t=0,n=this.faces.length;n>t;t++){i=this.faces[t],i.a=h[i.a],i.b=h[i.b],i.c=h[i.c],a=[i.a,i.b,i.c];for(var f=-1,m=0;3>m;m++)if(a[m]===a[(m+1)%3]){f=m,p.push(t);break}}for(t=p.length-1;t>=0;t--){var E=p[t];for(this.faces.splice(E,1),o=0,s=this.faceVertexUvs.length;s>o;o++)this.faceVertexUvs[o].splice(E,1)}var g=this.vertices.length-l.length;return this.vertices=l,g},sortFacesByMaterialIndex:function(){function e(e,r){return e.materialIndex-r.materialIndex}for(var r=this.faces,t=r.length,n=0;t>n;n++)r[n]._id=n;r.sort(e);var i,a,o=this.faceVertexUvs[0],s=this.faceVertexUvs[1];o&&o.length===t&&(i=[]),s&&s.length===t&&(a=[]);for(var n=0;t>n;n++){var c=r[n]._id;i&&i.push(o[c]),a&&a.push(s[c])}i&&(this.faceVertexUvs[0]=i),a&&(this.faceVertexUvs[1]=a)},toJSON:function(){function e(e,r,t){return t?e|1<<r:e&~(1<<r)}function r(e){var r=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==u[r]?u[r]:(u[r]=d.length/3,d.push(e.x,e.y,e.z),u[r])}function t(e){var r=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==f[r]?f[r]:(f[r]=p.length,p.push(e.getHex()),f[r])}function n(e){var r=e.x.toString()+e.y.toString();return void 0!==E[r]?E[r]:(E[r]=m.length/2,m.push(e.x,e.y),E[r])}var i={metadata:{version:4.4,type:"Geometry",generator:"Geometry.toJSON"}};if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),void 0!==this.parameters){var a=this.parameters;for(var o in a)void 0!==a[o]&&(i[o]=a[o]);return i}for(var s=[],c=0;c<this.vertices.length;c++){var l=this.vertices[c];s.push(l.x,l.y,l.z)}for(var h=[],d=[],u={},p=[],f={},m=[],E={},c=0;c<this.faces.length;c++){var g=this.faces[c],v=!0,T=!1,_=void 0!==this.faceVertexUvs[0][c],y=g.normal.length()>0,x=g.vertexNormals.length>0,R=1!==g.color.r||1!==g.color.g||1!==g.color.b,b=g.vertexColors.length>0,H=0;if(H=e(H,0,0),H=e(H,1,v),H=e(H,2,T),H=e(H,3,_),H=e(H,4,y),H=e(H,5,x),H=e(H,6,R),H=e(H,7,b),h.push(H),h.push(g.a,g.b,g.c),h.push(g.materialIndex),_){var M=this.faceVertexUvs[0][c];h.push(n(M[0]),n(M[1]),n(M[2]))}if(y&&h.push(r(g.normal)),x){var S=g.vertexNormals;h.push(r(S[0]),r(S[1]),r(S[2]))}if(R&&h.push(t(g.color)),b){var w=g.vertexColors;h.push(t(w[0]),t(w[1]),t(w[2]))}}return i.data={},i.data.vertices=s,i.data.normals=d,p.length>0&&(i.data.colors=p),m.length>0&&(i.data.uvs=[m]),i.data.faces=h,i},clone:function(){return(new THREE.Geometry).copy(this)},copy:function(e){this.vertices=[],this.faces=[],this.faceVertexUvs=[[]];for(var r=e.vertices,t=0,n=r.length;n>t;t++)this.vertices.push(r[t].clone());for(var i=e.faces,t=0,n=i.length;n>t;t++)this.faces.push(i[t].clone());for(var t=0,n=e.faceVertexUvs.length;n>t;t++){var a=e.faceVertexUvs[t];void 0===this.faceVertexUvs[t]&&(this.faceVertexUvs[t]=[]);for(var o=0,s=a.length;s>o;o++){for(var c=a[o],l=[],h=0,d=c.length;d>h;h++){var u=c[h];l.push(u.clone())}this.faceVertexUvs[t].push(l)}}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),THREE.GeometryIdCount=0,THREE.DirectGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="DirectGeometry",this.indices=[],this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1},Object.assign(THREE.DirectGeometry.prototype,THREE.EventDispatcher.prototype,{computeBoundingBox:THREE.Geometry.prototype.computeBoundingBox,computeBoundingSphere:THREE.Geometry.prototype.computeBoundingSphere,computeFaceNormals:function(){console.warn("THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.")},computeVertexNormals:function(){console.warn("THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.")},computeGroups:function(e){for(var r,t,n=[],i=e.faces,a=0;a<i.length;a++){var o=i[a];o.materialIndex!==t&&(t=o.materialIndex,void 0!==r&&(r.count=3*a-r.start,n.push(r)),r={start:3*a,materialIndex:t})}void 0!==r&&(r.count=3*a-r.start,n.push(r)),this.groups=n},fromGeometry:function(e){var r,t=e.faces,n=e.vertices,i=e.faceVertexUvs,a=i[0]&&i[0].length>0,o=i[1]&&i[1].length>0,s=e.morphTargets,c=s.length;if(c>0){r=[];for(var l=0;c>l;l++)r[l]=[];this.morphTargets.position=r}var h,d=e.morphNormals,u=d.length;if(u>0){h=[];for(var l=0;u>l;l++)h[l]=[];this.morphTargets.normal=h}for(var p=e.skinIndices,f=e.skinWeights,m=p.length===n.length,E=f.length===n.length,l=0;l<t.length;l++){var g=t[l];this.vertices.push(n[g.a],n[g.b],n[g.c]);var v=g.vertexNormals;if(3===v.length)this.normals.push(v[0],v[1],v[2]);else{var T=g.normal;this.normals.push(T,T,T)}var _=g.vertexColors;if(3===_.length)this.colors.push(_[0],_[1],_[2]);else{var y=g.color;this.colors.push(y,y,y)}if(a===!0){var x=i[0][l];void 0!==x?this.uvs.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",l),this.uvs.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2))}if(o===!0){var x=i[1][l];void 0!==x?this.uvs2.push(x[0],x[1],x[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",l),this.uvs2.push(new THREE.Vector2,new THREE.Vector2,new THREE.Vector2))}for(var R=0;c>R;R++){var b=s[R].vertices;r[R].push(b[g.a],b[g.b],b[g.c])}for(var R=0;u>R;R++){var H=d[R].vertexNormals[l];h[R].push(H.a,H.b,H.c)}m&&this.skinIndices.push(p[g.a],p[g.b],p[g.c]),E&&this.skinWeights.push(f[g.a],f[g.b],f[g.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),THREE.BufferGeometry=function(){Object.defineProperty(this,"id",{value:THREE.GeometryIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}},Object.assign(THREE.BufferGeometry.prototype,THREE.EventDispatcher.prototype,{getIndex:function(){return this.index},setIndex:function(e){this.index=e},addAttribute:function(e,r){return r instanceof THREE.BufferAttribute==!1&&r instanceof THREE.InterleavedBufferAttribute==!1?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),void this.addAttribute(e,new THREE.BufferAttribute(arguments[1],arguments[2]))):"index"===e?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),void this.setIndex(r)):(this.attributes[e]=r,this)},getAttribute:function(e){return this.attributes[e]},removeAttribute:function(e){return delete this.attributes[e],this},addGroup:function(e,r,t){this.groups.push({start:e,count:r,materialIndex:void 0!==t?t:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(e,r){this.drawRange.start=e,this.drawRange.count=r},applyMatrix:function(e){var r=this.attributes.position;void 0!==r&&(e.applyToVector3Array(r.array),r.needsUpdate=!0);var t=this.attributes.normal;if(void 0!==t){var n=(new THREE.Matrix3).getNormalMatrix(e);n.applyToVector3Array(t.array),t.needsUpdate=!0}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var e;return function(r){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationX(r),this.applyMatrix(e),this}}(),rotateY:function(){var e;return function(r){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationY(r),this.applyMatrix(e),this}}(),rotateZ:function(){var e;return function(r){return void 0===e&&(e=new THREE.Matrix4),e.makeRotationZ(r),this.applyMatrix(e),this}}(),translate:function(){var e;return function(r,t,n){return void 0===e&&(e=new THREE.Matrix4),e.makeTranslation(r,t,n),this.applyMatrix(e),this}}(),scale:function(){var e;return function(r,t,n){return void 0===e&&(e=new THREE.Matrix4),e.makeScale(r,t,n),this.applyMatrix(e),this}}(),lookAt:function(){var e;return function(r){void 0===e&&(e=new THREE.Object3D),e.lookAt(r),e.updateMatrix(),this.applyMatrix(e.matrix)}}(),center:function(){this.computeBoundingBox();var e=this.boundingBox.center().negate();return this.translate(e.x,e.y,e.z),e},setFromObject:function(e){var r=e.geometry;if(e instanceof THREE.Points||e instanceof THREE.Line){var t=new THREE.Float32Attribute(3*r.vertices.length,3),n=new THREE.Float32Attribute(3*r.colors.length,3);if(this.addAttribute("position",t.copyVector3sArray(r.vertices)),this.addAttribute("color",n.copyColorsArray(r.colors)),r.lineDistances&&r.lineDistances.length===r.vertices.length){var i=new THREE.Float32Attribute(r.lineDistances.length,1);this.addAttribute("lineDistance",i.copyArray(r.lineDistances))}null!==r.boundingSphere&&(this.boundingSphere=r.boundingSphere.clone()),null!==r.boundingBox&&(this.boundingBox=r.boundingBox.clone())}else e instanceof THREE.Mesh&&r instanceof THREE.Geometry&&this.fromGeometry(r);return this},updateFromObject:function(e){var r=e.geometry;if(e instanceof THREE.Mesh){var t=r.__directGeometry;if(void 0===t)return this.fromGeometry(r);t.verticesNeedUpdate=r.verticesNeedUpdate,t.normalsNeedUpdate=r.normalsNeedUpdate,t.colorsNeedUpdate=r.colorsNeedUpdate,t.uvsNeedUpdate=r.uvsNeedUpdate,t.groupsNeedUpdate=r.groupsNeedUpdate,r.verticesNeedUpdate=!1,r.normalsNeedUpdate=!1,r.colorsNeedUpdate=!1,r.uvsNeedUpdate=!1,r.groupsNeedUpdate=!1,r=t}if(r.verticesNeedUpdate===!0){var n=this.attributes.position;void 0!==n&&(n.copyVector3sArray(r.vertices),n.needsUpdate=!0),r.verticesNeedUpdate=!1}if(r.normalsNeedUpdate===!0){var n=this.attributes.normal;void 0!==n&&(n.copyVector3sArray(r.normals),n.needsUpdate=!0),r.normalsNeedUpdate=!1}if(r.colorsNeedUpdate===!0){var n=this.attributes.color;void 0!==n&&(n.copyColorsArray(r.colors),n.needsUpdate=!0),r.colorsNeedUpdate=!1}if(r.uvsNeedUpdate){var n=this.attributes.uv;void 0!==n&&(n.copyVector2sArray(r.uvs),n.needsUpdate=!0),r.uvsNeedUpdate=!1}if(r.lineDistancesNeedUpdate){var n=this.attributes.lineDistance;void 0!==n&&(n.copyArray(r.lineDistances),n.needsUpdate=!0),r.lineDistancesNeedUpdate=!1}return r.groupsNeedUpdate&&(r.computeGroups(e.geometry),this.groups=r.groups,r.groupsNeedUpdate=!1),this},fromGeometry:function(e){return e.__directGeometry=(new THREE.DirectGeometry).fromGeometry(e),this.fromDirectGeometry(e.__directGeometry)},fromDirectGeometry:function(e){var r=new Float32Array(3*e.vertices.length);if(this.addAttribute("position",new THREE.BufferAttribute(r,3).copyVector3sArray(e.vertices)),e.normals.length>0){var t=new Float32Array(3*e.normals.length);this.addAttribute("normal",new THREE.BufferAttribute(t,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var n=new Float32Array(3*e.colors.length);this.addAttribute("color",new THREE.BufferAttribute(n,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var i=new Float32Array(2*e.uvs.length);this.addAttribute("uv",new THREE.BufferAttribute(i,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);this.addAttribute("uv2",new THREE.BufferAttribute(a,2).copyVector2sArray(e.uvs2))}if(e.indices.length>0){var o=e.vertices.length>65535?Uint32Array:Uint16Array,s=new o(3*e.indices.length);this.setIndex(new THREE.BufferAttribute(s,1).copyIndicesArray(e.indices))}this.groups=e.groups;for(var c in e.morphTargets){for(var l=[],h=e.morphTargets[c],d=0,u=h.length;u>d;d++){var p=h[d],f=new THREE.Float32Attribute(3*p.length,3);l.push(f.copyVector3sArray(p))}this.morphAttributes[c]=l}if(e.skinIndices.length>0){var m=new THREE.Float32Attribute(4*e.skinIndices.length,4);this.addAttribute("skinIndex",m.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var E=new THREE.Float32Attribute(4*e.skinWeights.length,4);this.addAttribute("skinWeight",E.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);var e=this.attributes.position.array;void 0!==e?this.boundingBox.setFromArray(e):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var e=new THREE.Box3,r=new THREE.Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);var t=this.attributes.position;if(t){var n=t.array,i=this.boundingSphere.center;e.setFromArray(n),e.center(i);for(var a=0,o=0,s=n.length;s>o;o+=3)r.fromArray(n,o),a=Math.max(a,i.distanceToSquared(r));this.boundingSphere.radius=Math.sqrt(a),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var e=this.index,r=this.attributes,t=this.groups;if(r.position){var n=r.position.array;if(void 0===r.normal)this.addAttribute("normal",new THREE.BufferAttribute(new Float32Array(n.length),3));else for(var i=r.normal.array,a=0,o=i.length;o>a;a++)i[a]=0;var s,c,l,h=r.normal.array,d=new THREE.Vector3,u=new THREE.Vector3,p=new THREE.Vector3,f=new THREE.Vector3,m=new THREE.Vector3;if(e){var E=e.array;0===t.length&&this.addGroup(0,E.length);for(var g=0,v=t.length;v>g;++g)for(var T=t[g],_=T.start,y=T.count,a=_,o=_+y;o>a;a+=3)s=3*E[a+0],c=3*E[a+1],l=3*E[a+2],d.fromArray(n,s),u.fromArray(n,c),p.fromArray(n,l),f.subVectors(p,u),m.subVectors(d,u),f.cross(m),h[s]+=f.x,h[s+1]+=f.y,h[s+2]+=f.z,h[c]+=f.x,h[c+1]+=f.y,h[c+2]+=f.z,h[l]+=f.x,h[l+1]+=f.y,h[l+2]+=f.z}else for(var a=0,o=n.length;o>a;a+=9)d.fromArray(n,a),u.fromArray(n,a+3),p.fromArray(n,a+6),f.subVectors(p,u),m.subVectors(d,u),f.cross(m),h[a]=f.x,h[a+1]=f.y,h[a+2]=f.z,h[a+3]=f.x,h[a+4]=f.y,h[a+5]=f.z,h[a+6]=f.x,h[a+7]=f.y,h[a+8]=f.z;this.normalizeNormals(),r.normal.needsUpdate=!0}},merge:function(e,r){if(e instanceof THREE.BufferGeometry==!1)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",e);void 0===r&&(r=0);var t=this.attributes;for(var n in t)if(void 0!==e.attributes[n])for(var i=t[n],a=i.array,o=e.attributes[n],s=o.array,c=o.itemSize,l=0,h=c*r;l<s.length;l++,h++)a[h]=s[l];return this},normalizeNormals:function(){for(var e,r,t,n,i=this.attributes.normal.array,a=0,o=i.length;o>a;a+=3)e=i[a],r=i[a+1],t=i[a+2],n=1/Math.sqrt(e*e+r*r+t*t),i[a]*=n,i[a+1]*=n,i[a+2]*=n},toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var e=new THREE.BufferGeometry,r=this.index.array,t=this.attributes;for(var n in t){for(var i=t[n],a=i.array,o=i.itemSize,s=new a.constructor(r.length*o),c=0,l=0,h=0,d=r.length;d>h;h++){c=r[h]*o;for(var u=0;o>u;u++)s[l++]=a[c++]}e.addAttribute(n,new THREE.BufferAttribute(s,o))}return e},toJSON:function(){var e={metadata:{version:4.4,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var r=this.parameters;for(var t in r)void 0!==r[t]&&(e[t]=r[t]);return e}e.data={attributes:{}};var n=this.index;if(null!==n){var i=Array.prototype.slice.call(n.array);e.data.index={type:n.array.constructor.name,array:i}}var a=this.attributes;for(var t in a){var o=a[t],i=Array.prototype.slice.call(o.array);e.data.attributes[t]={itemSize:o.itemSize,type:o.array.constructor.name,array:i,normalized:o.normalized}}var s=this.groups;s.length>0&&(e.data.groups=JSON.parse(JSON.stringify(s)));var c=this.boundingSphere;return null!==c&&(e.data.boundingSphere={center:c.center.toArray(),radius:c.radius}),e},clone:function(){return(new THREE.BufferGeometry).copy(this)},copy:function(e){var r=e.index;null!==r&&this.setIndex(r.clone());var t=e.attributes;for(var n in t){var i=t[n];this.addAttribute(n,i.clone())}for(var a=e.groups,o=0,s=a.length;s>o;o++){var c=a[o];this.addGroup(c.start,c.count,c.materialIndex)}return this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),THREE.BufferGeometry.MaxIndex=65535,THREE.InstancedBufferGeometry=function(){THREE.BufferGeometry.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0},THREE.InstancedBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.InstancedBufferGeometry.prototype.constructor=THREE.InstancedBufferGeometry,THREE.InstancedBufferGeometry.prototype.addGroup=function(e,r,t){this.groups.push({start:e,count:r,instances:t})},THREE.InstancedBufferGeometry.prototype.copy=function(e){var r=e.index;null!==r&&this.setIndex(r.clone());var t=e.attributes;for(var n in t){var i=t[n];this.addAttribute(n,i.clone())}for(var a=e.groups,o=0,s=a.length;s>o;o++){var c=a[o];this.addGroup(c.start,c.count,c.instances)}return this},THREE.Uniform=function(e){"string"==typeof e&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),e=arguments[1]),this.value=e,this.dynamic=!1},THREE.Uniform.prototype={constructor:THREE.Uniform,onUpdate:function(e){return this.dynamic=!0,this.onUpdateCallback=e,this}},THREE.AnimationAction=function(){throw new Error("THREE.AnimationAction: Use mixer.clipAction for construction.")},THREE.AnimationAction._new=function(e,r,t){this._mixer=e,this._clip=r,this._localRoot=t||null;for(var n=r.tracks,i=n.length,a=new Array(i),o={endingStart:THREE.ZeroCurvatureEnding,endingEnd:THREE.ZeroCurvatureEnding},s=0;s!==i;++s){var c=n[s].createInterpolant(null);a[s]=c,c.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=THREE.LoopRepeat,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0},THREE.AnimationAction._new.prototype={constructor:THREE.AnimationAction._new,play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){this._startTime;return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(e){return this._startTime=e,this},setLoop:function(e,r){return this.loop=e,this.repetitions=r,this},setEffectiveWeight:function(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(e){return this._scheduleFading(e,0,1)},fadeOut:function(e){return this._scheduleFading(e,1,0)},crossFadeFrom:function(e,r,t){this._mixer;if(e.fadeOut(r),this.fadeIn(r),t){var n=this._clip.duration,i=e._clip.duration,a=i/n,o=n/i;e.warp(1,a,r),this.warp(o,1,r)}return this},crossFadeTo:function(e,r,t){return e.crossFadeFrom(this,r,t)},stopFading:function(){var e=this._weightInterpolant;return null!==e&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},setEffectiveTimeScale:function(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(e){return this.timeScale=this._clip.duration/e,this.stopWarping()},syncWith:function(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()},halt:function(e){return this.warp(this._effectiveTimeScale,0,e)},warp:function(e,r,t){var n=this._mixer,i=n.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=n._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,c=a.sampleValues;return s[0]=i,s[1]=i+t,c[0]=e/o,c[1]=r/o,this},stopWarping:function(){var e=this._timeScaleInterpolant;return null!==e&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(e,r,t,n){var i=this._startTime;if(null!==i){var a=(e-i)*t;if(0>a||0===t)return;this._startTime=null,r=t*a}r*=this._updateTimeScale(e);var o=this._updateTime(r),s=this._updateWeight(e);if(s>0)for(var c=this._interpolants,l=this._propertyBindings,h=0,d=c.length;h!==d;++h)c[h].evaluate(o),l[h].accumulate(n,s)},_updateWeight:function(e){var r=0;if(this.enabled){r=this.weight;var t=this._weightInterpolant;if(null!==t){var n=t.evaluate(e)[0];r*=n,e>t.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=r,r},_updateTimeScale:function(e){var r=0;if(!this.paused){r=this.timeScale;var t=this._timeScaleInterpolant;if(null!==t){var n=t.evaluate(e)[0];r*=n,e>t.parameterPositions[1]&&(this.stopWarping(),0===r?this.paused=!0:this.timeScale=r)}}return this._effectiveTimeScale=r,r},_updateTime:function(e){var r=this.time+e;if(0===e)return r;var t=this._clip.duration,n=this.loop,i=this._loopCount;if(n===THREE.LoopOnce){-1===i&&(this.loopCount=0,this._setEndings(!0,!0,!1));e:{if(r>=t)r=t;else{if(!(0>r))break e;r=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:0>e?-1:1})}}else{var a=n===THREE.LoopPingPong;if(-1===i&&(e>=0?(i=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),r>=t||0>r){var o=Math.floor(r/t);r-=t*o,i+=Math.abs(o);var s=this.repetitions-i;if(0>s)this.clampWhenFinished?this.paused=!0:this.enabled=!1,r=e>0?t:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(0===s){var c=0>e;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}if(a&&1===(1&i))return this.time=r,t-r}return this.time=r,r},_setEndings:function(e,r,t){var n=this._interpolantSettings;t?(n.endingStart=THREE.ZeroSlopeEnding,n.endingEnd=THREE.ZeroSlopeEnding):(e?n.endingStart=this.zeroSlopeAtStart?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:n.endingStart=THREE.WrapAroundEnding,r?n.endingEnd=this.zeroSlopeAtEnd?THREE.ZeroSlopeEnding:THREE.ZeroCurvatureEnding:n.endingEnd=THREE.WrapAroundEnding)},_scheduleFading:function(e,r,t){var n=this._mixer,i=n.time,a=this._weightInterpolant;null===a&&(a=n._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=i,s[0]=r,o[1]=i+e,s[1]=t,this}},THREE.AnimationClip=function(e,r,t){this.name=e,this.tracks=t,this.duration=void 0!==r?r:-1,this.uuid=THREE.Math.generateUUID(),this.duration<0&&this.resetDuration(),this.trim(),this.optimize()},THREE.AnimationClip.prototype={constructor:THREE.AnimationClip,resetDuration:function(){for(var e=this.tracks,r=0,t=0,n=e.length;t!==n;++t){var i=this.tracks[t];r=Math.max(r,i.times[i.times.length-1])}this.duration=r},trim:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this},optimize:function(){for(var e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}},Object.assign(THREE.AnimationClip,{parse:function(e){for(var r=[],t=e.tracks,n=1/(e.fps||1),i=0,a=t.length;i!==a;++i)r.push(THREE.KeyframeTrack.parse(t[i]).scale(n));return new THREE.AnimationClip(e.name,e.duration,r)},toJSON:function(e){for(var r=[],t=e.tracks,n={name:e.name,duration:e.duration,tracks:r},i=0,a=t.length;i!==a;++i)r.push(THREE.KeyframeTrack.toJSON(t[i]));return n},CreateFromMorphTargetSequence:function(e,r,t,n){for(var i=r.length,a=[],o=0;i>o;o++){var s=[],c=[];s.push((o+i-1)%i,o,(o+1)%i),c.push(0,1,0);var l=THREE.AnimationUtils.getKeyframeOrder(s);s=THREE.AnimationUtils.sortedArray(s,1,l),c=THREE.AnimationUtils.sortedArray(c,1,l),n||0!==s[0]||(s.push(i),c.push(c[0])),a.push(new THREE.NumberKeyframeTrack(".morphTargetInfluences["+r[o].name+"]",s,c).scale(1/t))}return new THREE.AnimationClip(e,-1,a)},findByName:function(e,r){var t=e;if(!Array.isArray(e)){var n=e;t=n.geometry&&n.geometry.animations||n.animations}for(var i=0;i<t.length;i++)if(t[i].name===r)return t[i];return null},CreateClipsFromMorphTargetSequences:function(e,r,t){for(var n={},i=/^([\w-]*?)([\d]+)$/,a=0,o=e.length;o>a;a++){var s=e[a],c=s.name.match(i);if(c&&c.length>1){var l=c[1],h=n[l];h||(n[l]=h=[]),h.push(s)}}var d=[];for(var l in n)d.push(THREE.AnimationClip.CreateFromMorphTargetSequence(l,n[l],r,t));return d},parseAnimation:function(e,r,t){if(!e)return console.error("  no animation in JSONLoader data"),null;for(var n=function(e,r,t,n,i){if(0!==t.length){var a=[],o=[];THREE.AnimationUtils.flattenJSON(t,a,o,n),0!==a.length&&i.push(new e(r,a,o))}},i=[],a=e.name||"default",o=e.length||-1,s=e.fps||30,c=e.hierarchy||[],l=0;l<c.length;l++){var h=c[l].keys;if(h&&0!==h.length)if(h[0].morphTargets){for(var d={},u=0;u<h.length;u++)if(h[u].morphTargets)for(var p=0;p<h[u].morphTargets.length;p++)d[h[u].morphTargets[p]]=-1;for(var f in d){for(var m=[],E=[],p=0;p!==h[u].morphTargets.length;++p){var g=h[u];m.push(g.time),E.push(g.morphTarget===f?1:0)}i.push(new THREE.NumberKeyframeTrack(".morphTargetInfluence["+f+"]",m,E))}o=d.length*(s||1)}else{var v=".bones["+r[l].name+"]";n(THREE.VectorKeyframeTrack,v+".position",h,"pos",i),n(THREE.QuaternionKeyframeTrack,v+".quaternion",h,"rot",i),n(THREE.VectorKeyframeTrack,v+".scale",h,"scl",i)}}if(0===i.length)return null;var T=new THREE.AnimationClip(a,o,i);return T}}),THREE.AnimationMixer=function(e){this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1},Object.assign(THREE.AnimationMixer.prototype,THREE.EventDispatcher.prototype,{clipAction:function(e,r){var t=r||this._root,n=t.uuid,i="string"==typeof e?THREE.AnimationClip.findByName(t,e):e,a=null!==i?i.uuid:e,o=this._actionsByClip[a],s=null;if(void 0!==o){var c=o.actionByRoot[n];if(void 0!==c)return c;s=o.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;var l=new THREE.AnimationMixer._Action(this,i,r);return this._bindAction(l,s),this._addInactiveAction(l,a,n),l},existingAction:function(e,r){var t=r||this._root,n=t.uuid,i="string"==typeof e?THREE.AnimationClip.findByName(t,e):e,a=i?i.uuid:e,o=this._actionsByClip[a];return void 0!==o?o.actionByRoot[n]||null:null},stopAllAction:function(){var e=this._actions,r=this._nActiveActions,t=this._bindings,n=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==r;++i)e[i].reset();for(var i=0;i!==n;++i)t[i].useCount=0;return this},update:function(e){e*=this.timeScale;for(var r=this._actions,t=this._nActiveActions,n=this.time+=e,i=Math.sign(e),a=this._accuIndex^=1,o=0;o!==t;++o){var s=r[o];s.enabled&&s._update(n,e,i,a)}for(var c=this._bindings,l=this._nActiveBindings,o=0;o!==l;++o)c[o].apply(a);return this},getRoot:function(){return this._root},uncacheClip:function(e){var r=this._actions,t=e.uuid,n=this._actionsByClip,i=n[t];if(void 0!==i){for(var a=i.knownActions,o=0,s=a.length;o!==s;++o){var c=a[o];this._deactivateAction(c);var l=c._cacheIndex,h=r[r.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,h._cacheIndex=l,r[l]=h,r.pop(),this._removeInactiveBindingsForAction(c)}delete n[t]}},uncacheRoot:function(e){var r=e.uuid,t=this._actionsByClip;for(var n in t){var i=t[n].actionByRoot,a=i[r];void 0!==a&&(this._deactivateAction(a),this._removeInactiveAction(a))}var o=this._bindingsByRootAndName,s=o[r];if(void 0!==s)for(var c in s){var l=s[c];l.restoreOriginalState(),this._removeInactiveBinding(l)}},uncacheAction:function(e,r){var t=this.existingAction(e,r);null!==t&&(this._deactivateAction(t),this._removeInactiveAction(t))}}),THREE.AnimationMixer._Action=THREE.AnimationAction._new,Object.assign(THREE.AnimationMixer.prototype,{_bindAction:function(e,r){var t=e._localRoot||this._root,n=e._clip.tracks,i=n.length,a=e._propertyBindings,o=e._interpolants,s=t.uuid,c=this._bindingsByRootAndName,l=c[s];void 0===l&&(l={},c[s]=l);for(var h=0;h!==i;++h){var d=n[h],u=d.name,p=l[u];if(void 0!==p)a[h]=p;else{if(p=a[h],void 0!==p){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,u));continue}var f=r&&r._propertyBindings[h].binding.parsedPath;p=new THREE.PropertyMixer(THREE.PropertyBinding.create(t,u,f),d.ValueTypeName,d.getValueSize()),++p.referenceCount,this._addInactiveBinding(p,s,u),a[h]=p}o[h].resultBuffer=p.buffer}},_activateAction:function(e){if(!this._isActiveAction(e)){if(null===e._cacheIndex){var r=(e._localRoot||this._root).uuid,t=e._clip.uuid,n=this._actionsByClip[t];this._bindAction(e,n&&n.knownActions[0]),this._addInactiveAction(e,t,r)}for(var i=e._propertyBindings,a=0,o=i.length;a!==o;++a){var s=i[a];0===s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(e)}},_deactivateAction:function(e){if(this._isActiveAction(e)){for(var r=e._propertyBindings,t=0,n=r.length;t!==n;++t){var i=r[t];0===--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(e)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}},_isActiveAction:function(e){var r=e._cacheIndex;return null!==r&&r<this._nActiveActions},_addInactiveAction:function(e,r,t){var n=this._actions,i=this._actionsByClip,a=i[r];if(void 0===a)a={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,i[r]=a;else{var o=a.knownActions;e._byClipCacheIndex=o.length,o.push(e)}e._cacheIndex=n.length,n.push(e),a.actionByRoot[t]=e},_removeInactiveAction:function(e){var r=this._actions,t=r[r.length-1],n=e._cacheIndex;t._cacheIndex=n,r[n]=t,r.pop(),e._cacheIndex=null;var i=e._clip.uuid,a=this._actionsByClip,o=a[i],s=o.knownActions,c=s[s.length-1],l=e._byClipCacheIndex;c._byClipCacheIndex=l,s[l]=c,s.pop(),e._byClipCacheIndex=null;var h=o.actionByRoot,d=(r._localRoot||this._root).uuid;delete h[d],0===s.length&&delete a[i],this._removeInactiveBindingsForAction(e)},_removeInactiveBindingsForAction:function(e){for(var r=e._propertyBindings,t=0,n=r.length;t!==n;++t){var i=r[t];0===--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(e){var r=this._actions,t=e._cacheIndex,n=this._nActiveActions++,i=r[n];e._cacheIndex=n,r[n]=e,i._cacheIndex=t,r[t]=i},_takeBackAction:function(e){var r=this._actions,t=e._cacheIndex,n=--this._nActiveActions,i=r[n];e._cacheIndex=n,r[n]=e,i._cacheIndex=t,r[t]=i},_addInactiveBinding:function(e,r,t){var n=this._bindingsByRootAndName,i=n[r],a=this._bindings;void 0===i&&(i={},n[r]=i),i[t]=e,e._cacheIndex=a.length,a.push(e)},_removeInactiveBinding:function(e){var r=this._bindings,t=e.binding,n=t.rootNode.uuid,i=t.path,a=this._bindingsByRootAndName,o=a[n],s=r[r.length-1],c=e._cacheIndex;s._cacheIndex=c,r[c]=s,r.pop(),delete o[i];e:{for(var l in o)break e;delete a[n]}},_lendBinding:function(e){var r=this._bindings,t=e._cacheIndex,n=this._nActiveBindings++,i=r[n];
e._cacheIndex=n,r[n]=e,i._cacheIndex=t,r[t]=i},_takeBackBinding:function(e){var r=this._bindings,t=e._cacheIndex,n=--this._nActiveBindings,i=r[n];e._cacheIndex=n,r[n]=e,i._cacheIndex=t,r[t]=i},_lendControlInterpolant:function(){var e=this._controlInterpolants,r=this._nActiveControlInterpolants++,t=e[r];return void 0===t&&(t=new THREE.LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),t.__cacheIndex=r,e[r]=t),t},_takeBackControlInterpolant:function(e){var r=this._controlInterpolants,t=e.__cacheIndex,n=--this._nActiveControlInterpolants,i=r[n];e.__cacheIndex=n,r[n]=e,i.__cacheIndex=t,r[t]=i},_controlInterpolantsResultBuffer:new Float32Array(1)}),THREE.AnimationObjectGroup=function(e){this.uuid=THREE.Math.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var r={};this._indicesByUUID=r;for(var t=0,n=arguments.length;t!==n;++t)r[arguments[t].uuid]=t;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var i=this;this.stats={objects:{get total(){return i._objects.length},get inUse(){return this.total-i.nCachedObjects_}},get bindingsPerObject(){return i._bindings.length}}},THREE.AnimationObjectGroup.prototype={constructor:THREE.AnimationObjectGroup,add:function(e){for(var r=this._objects,t=r.length,n=this.nCachedObjects_,i=this._indicesByUUID,a=this._paths,o=this._parsedPaths,s=this._bindings,c=s.length,l=0,h=arguments.length;l!==h;++l){var d=arguments[l],u=d.uuid,p=i[u];if(void 0===p){p=t++,i[u]=p,r.push(d);for(var f=0,m=c;f!==m;++f)s[f].push(new THREE.PropertyBinding(d,a[f],o[f]))}else if(n>p){var E=r[p],g=--n,v=r[g];i[v.uuid]=p,r[p]=v,i[u]=g,r[g]=d;for(var f=0,m=c;f!==m;++f){var T=s[f],_=T[g],y=T[p];T[p]=_,void 0===y&&(y=new THREE.PropertyBinding(d,a[f],o[f])),T[g]=y}}else r[p]!==E&&console.error("Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes...")}this.nCachedObjects_=n},remove:function(e){for(var r=this._objects,t=(r.length,this.nCachedObjects_),n=this._indicesByUUID,i=this._bindings,a=i.length,o=0,s=arguments.length;o!==s;++o){var c=arguments[o],l=c.uuid,h=n[l];if(void 0!==h&&h>=t){var d=t++,u=r[d];n[u.uuid]=h,r[h]=u,n[l]=d,r[d]=c;for(var p=0,f=a;p!==f;++p){var m=i[p],E=m[d],g=m[h];m[h]=E,m[d]=g}}}this.nCachedObjects_=t},uncache:function(e){for(var r=this._objects,t=r.length,n=this.nCachedObjects_,i=this._indicesByUUID,a=this._bindings,o=a.length,s=0,c=arguments.length;s!==c;++s){var l=arguments[s],h=l.uuid,d=i[h];if(void 0!==d)if(delete i[h],n>d){var u=--n,p=r[u],f=--t,m=r[f];i[p.uuid]=d,r[d]=p,i[m.uuid]=u,r[u]=m,r.pop();for(var E=0,g=o;E!==g;++E){var v=a[E],T=v[u],_=v[f];v[d]=T,v[u]=_,v.pop()}}else{var f=--t,m=r[f];i[m.uuid]=d,r[d]=m,r.pop();for(var E=0,g=o;E!==g;++E){var v=a[E];v[d]=v[f],v.pop()}}}this.nCachedObjects_=n},subscribe_:function(e,r){var t=this._bindingsIndicesByPath,n=t[e],i=this._bindings;if(void 0!==n)return i[n];var a=this._paths,o=this._parsedPaths,s=this._objects,c=s.length,l=this.nCachedObjects_,h=new Array(c);n=i.length,t[e]=n,a.push(e),o.push(r),i.push(h);for(var d=l,u=s.length;d!==u;++d){var p=s[d];h[d]=new THREE.PropertyBinding(p,e,r)}return h},unsubscribe_:function(e){var r=this._bindingsIndicesByPath,t=r[e];if(void 0!==t){var n=this._paths,i=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o],c=e[o];r[c]=t,a[t]=s,a.pop(),i[t]=i[o],i.pop(),n[t]=n[o],n.pop()}}},THREE.AnimationUtils={arraySlice:function(e,r,t){return THREE.AnimationUtils.isTypedArray(e)?new e.constructor(e.subarray(r,t)):e.slice(r,t)},convertArray:function(e,r,t){return!e||!t&&e.constructor===r?e:"number"==typeof r.BYTES_PER_ELEMENT?new r(e):Array.prototype.slice.call(e)},isTypedArray:function(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)},getKeyframeOrder:function(e){function r(r,t){return e[r]-e[t]}for(var t=e.length,n=new Array(t),i=0;i!==t;++i)n[i]=i;return n.sort(r),n},sortedArray:function(e,r,t){for(var n=e.length,i=new e.constructor(n),a=0,o=0;o!==n;++a)for(var s=t[a]*r,c=0;c!==r;++c)i[o++]=e[s+c];return i},flattenJSON:function(e,r,t,n){for(var i=1,a=e[0];void 0!==a&&void 0===a[n];)a=e[i++];if(void 0!==a){var o=a[n];if(void 0!==o)if(Array.isArray(o)){do o=a[n],void 0!==o&&(r.push(a.time),t.push.apply(t,o)),a=e[i++];while(void 0!==a)}else if(void 0!==o.toArray){do o=a[n],void 0!==o&&(r.push(a.time),o.toArray(t,t.length)),a=e[i++];while(void 0!==a)}else do o=a[n],void 0!==o&&(r.push(a.time),t.push(o)),a=e[i++];while(void 0!==a)}}},THREE.KeyframeTrack=function(e,r,t,n){if(void 0===e)throw new Error("track name is undefined");if(void 0===r||0===r.length)throw new Error("no keyframes in track named "+e);this.name=e,this.times=THREE.AnimationUtils.convertArray(r,this.TimeBufferType),this.values=THREE.AnimationUtils.convertArray(t,this.ValueBufferType),this.setInterpolation(n||this.DefaultInterpolation),this.validate(),this.optimize()},THREE.KeyframeTrack.prototype={constructor:THREE.KeyframeTrack,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodDiscrete:function(e){return new THREE.DiscreteInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodLinear:function(e){return new THREE.LinearInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:function(e){return new THREE.CubicInterpolant(this.times,this.values,this.getValueSize(),e)},setInterpolation:function(e){var r;switch(e){case THREE.InterpolateDiscrete:r=this.InterpolantFactoryMethodDiscrete;break;case THREE.InterpolateLinear:r=this.InterpolantFactoryMethodLinear;break;case THREE.InterpolateSmooth:r=this.InterpolantFactoryMethodSmooth}if(void 0===r){var t="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(e===this.DefaultInterpolation)throw new Error(t);this.setInterpolation(this.DefaultInterpolation)}return void console.warn(t)}this.createInterpolant=r},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return THREE.InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return THREE.InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return THREE.InterpolateSmooth}},getValueSize:function(){return this.values.length/this.times.length},shift:function(e){if(0!==e)for(var r=this.times,t=0,n=r.length;t!==n;++t)r[t]+=e;return this},scale:function(e){if(1!==e)for(var r=this.times,t=0,n=r.length;t!==n;++t)r[t]*=e;return this},trim:function(e,r){for(var t=this.times,n=t.length,i=0,a=n-1;i!==n&&t[i]<e;)++i;for(;-1!==a&&t[a]>r;)--a;if(++a,0!==i||a!==n){i>=a&&(a=Math.max(a,1),i=a-1);var o=this.getValueSize();this.times=THREE.AnimationUtils.arraySlice(t,i,a),this.values=THREE.AnimationUtils.arraySlice(this.values,i*o,a*o)}return this},validate:function(){var e=!0,r=this.getValueSize();r-Math.floor(r)!==0&&(console.error("invalid value size in track",this),e=!1);var t=this.times,n=this.values,i=t.length;0===i&&(console.error("track is empty",this),e=!1);for(var a=null,o=0;o!==i;o++){var s=t[o];if("number"==typeof s&&isNaN(s)){console.error("time is not a valid number",this,o,s),e=!1;break}if(null!==a&&a>s){console.error("out of order keys",this,o,s,a),e=!1;break}a=s}if(void 0!==n&&THREE.AnimationUtils.isTypedArray(n))for(var o=0,c=n.length;o!==c;++o){var l=n[o];if(isNaN(l)){console.error("value is not a valid number",this,o,l),e=!1;break}}return e},optimize:function(){for(var e=this.times,r=this.values,t=this.getValueSize(),n=1,i=1,a=e.length-1;a>=i;++i){var o=!1,s=e[i],c=e[i+1];if(s!==c&&(1!==i||s!==s[0]))for(var l=i*t,h=l-t,d=l+t,u=0;u!==t;++u){var p=r[l+u];if(p!==r[h+u]||p!==r[d+u]){o=!0;break}}if(o){if(i!==n){e[n]=e[i];for(var f=i*t,m=n*t,u=0;u!==t;++u)r[m+u]=r[f+u]}++n}}return n!==e.length&&(this.times=THREE.AnimationUtils.arraySlice(e,0,n),this.values=THREE.AnimationUtils.arraySlice(r,0,n*t)),this}},Object.assign(THREE.KeyframeTrack,{parse:function(e){if(void 0===e.type)throw new Error("track type undefined, can not parse");var r=THREE.KeyframeTrack._getTrackTypeForValueTypeName(e.type);if(void 0===e.times){var t=[],n=[];THREE.AnimationUtils.flattenJSON(e.keys,t,n,"value"),e.times=t,e.values=n}return void 0!==r.parse?r.parse(e):new r(e.name,e.times,e.values,e.interpolation)},toJSON:function(e){var r,t=e.constructor;if(void 0!==t.toJSON)r=t.toJSON(e);else{r={name:e.name,times:THREE.AnimationUtils.convertArray(e.times,Array),values:THREE.AnimationUtils.convertArray(e.values,Array)};var n=e.getInterpolation();n!==e.DefaultInterpolation&&(r.interpolation=n)}return r.type=e.ValueTypeName,r},_getTrackTypeForValueTypeName:function(e){switch(e.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return THREE.NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return THREE.VectorKeyframeTrack;case"color":return THREE.ColorKeyframeTrack;case"quaternion":return THREE.QuaternionKeyframeTrack;case"bool":case"boolean":return THREE.BooleanKeyframeTrack;case"string":return THREE.StringKeyframeTrack}throw new Error("Unsupported typeName: "+e)}}),THREE.PropertyBinding=function(e,r,t){this.path=r,this.parsedPath=t||THREE.PropertyBinding.parseTrackName(r),this.node=THREE.PropertyBinding.findNode(e,this.parsedPath.nodeName)||e,this.rootNode=e},THREE.PropertyBinding.prototype={constructor:THREE.PropertyBinding,getValue:function(e,r){this.bind(),this.getValue(e,r)},setValue:function(e,r){this.bind(),this.setValue(e,r)},bind:function(){var e=this.node,r=this.parsedPath,t=r.objectName,n=r.propertyName,i=r.propertyIndex;if(e||(e=THREE.PropertyBinding.findNode(this.rootNode,r.nodeName)||this.rootNode,this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e)return void console.error("  trying to update node for track: "+this.path+" but it wasn't found.");if(t){var a=r.objectIndex;switch(t){case"materials":if(!e.material)return void console.error("  can not bind to material as node does not have a material",this);if(!e.material.materials)return void console.error("  can not bind to material.materials as node.material does not have a materials array",this);e=e.material.materials;break;case"bones":if(!e.skeleton)return void console.error("  can not bind to bones as node does not have a skeleton",this);e=e.skeleton.bones;for(var o=0;o<e.length;o++)if(e[o].name===a){a=o;break}break;default:if(void 0===e[t])return void console.error("  can not bind to objectName of node, undefined",this);e=e[t]}if(void 0!==a){if(void 0===e[a])return void console.error("  trying to bind to objectIndex of objectName, but is undefined:",this,e);e=e[a]}}var s=e[n];if(void 0===s){var c=r.nodeName;return void console.error("  trying to update property for track: "+c+"."+n+" but it wasn't found.",e)}var l=this.Versioning.None;void 0!==e.needsUpdate?(l=this.Versioning.NeedsUpdate,this.targetObject=e):void 0!==e.matrixWorldNeedsUpdate&&(l=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=e);var h=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===n){if(!e.geometry)return void console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry",this);if(!e.geometry.morphTargets)return void console.error("  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets",this);for(var o=0;o<this.node.geometry.morphTargets.length;o++)if(e.geometry.morphTargets[o].name===i){i=o;break}}h=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=i}else void 0!==s.fromArray&&void 0!==s.toArray?(h=this.BindingType.HasFromToArray,this.resolvedProperty=s):void 0!==s.length?(h=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=n;this.getValue=this.GetterByBindingType[h],this.setValue=this.SetterByBindingTypeAndVersioning[h][l]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}},Object.assign(THREE.PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},_getValue_unbound:THREE.PropertyBinding.prototype.getValue,_setValue_unbound:THREE.PropertyBinding.prototype.setValue,BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(e,r){e[r]=this.node[this.propertyName]},function(e,r){for(var t=this.resolvedProperty,n=0,i=t.length;n!==i;++n)e[r++]=t[n]},function(e,r){e[r]=this.resolvedProperty[this.propertyIndex]},function(e,r){this.resolvedProperty.toArray(e,r)}],SetterByBindingTypeAndVersioning:[[function(e,r){this.node[this.propertyName]=e[r]},function(e,r){this.node[this.propertyName]=e[r],this.targetObject.needsUpdate=!0},function(e,r){this.node[this.propertyName]=e[r],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,r){for(var t=this.resolvedProperty,n=0,i=t.length;n!==i;++n)t[n]=e[r++]},function(e,r){for(var t=this.resolvedProperty,n=0,i=t.length;n!==i;++n)t[n]=e[r++];this.targetObject.needsUpdate=!0},function(e,r){for(var t=this.resolvedProperty,n=0,i=t.length;n!==i;++n)t[n]=e[r++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,r){this.resolvedProperty[this.propertyIndex]=e[r]},function(e,r){this.resolvedProperty[this.propertyIndex]=e[r],this.targetObject.needsUpdate=!0},function(e,r){this.resolvedProperty[this.propertyIndex]=e[r],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(e,r){this.resolvedProperty.fromArray(e,r)},function(e,r){this.resolvedProperty.fromArray(e,r),this.targetObject.needsUpdate=!0},function(e,r){this.resolvedProperty.fromArray(e,r),this.targetObject.matrixWorldNeedsUpdate=!0}]]}),THREE.PropertyBinding.Composite=function(e,r,t){var n=t||THREE.PropertyBinding.parseTrackName(r);this._targetGroup=e,this._bindings=e.subscribe_(r,n)},THREE.PropertyBinding.Composite.prototype={constructor:THREE.PropertyBinding.Composite,getValue:function(e,r){this.bind();var t=this._targetGroup.nCachedObjects_,n=this._bindings[t];void 0!==n&&n.getValue(e,r)},setValue:function(e,r){for(var t=this._bindings,n=this._targetGroup.nCachedObjects_,i=t.length;n!==i;++n)t[n].setValue(e,r)},bind:function(){for(var e=this._bindings,r=this._targetGroup.nCachedObjects_,t=e.length;r!==t;++r)e[r].bind()},unbind:function(){for(var e=this._bindings,r=this._targetGroup.nCachedObjects_,t=e.length;r!==t;++r)e[r].unbind()}},THREE.PropertyBinding.create=function(e,r,t){return e instanceof THREE.AnimationObjectGroup?new THREE.PropertyBinding.Composite(e,r,t):new THREE.PropertyBinding(e,r,t)},THREE.PropertyBinding.parseTrackName=function(e){var r=/^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_.:\- ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/,t=r.exec(e);if(!t)throw new Error("cannot parse trackName at all: "+e);t.index===r.lastIndex&&r.lastIndex++;var n={nodeName:t[3],objectName:t[5],objectIndex:t[7],propertyName:t[9],propertyIndex:t[11]};if(null===n.propertyName||0===n.propertyName.length)throw new Error("can not parse propertyName from trackName: "+e);return n},THREE.PropertyBinding.findNode=function(e,r){if(!r||""===r||"root"===r||"."===r||-1===r||r===e.name||r===e.uuid)return e;if(e.skeleton){var t=function(e){for(var t=0;t<e.bones.length;t++){var n=e.bones[t];if(n.name===r)return n}return null},n=t(e.skeleton);if(n)return n}if(e.children){var i=function(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.name===r||n.uuid===r)return n;var a=i(n.children);if(a)return a}return null},a=i(e.children);if(a)return a}return null},THREE.PropertyMixer=function(e,r,t){this.binding=e,this.valueSize=t;var n,i=Float64Array;switch(r){case"quaternion":n=this._slerp;break;case"string":case"bool":i=Array,n=this._select;break;default:n=this._lerp}this.buffer=new i(4*t),this._mixBufferRegion=n,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0},THREE.PropertyMixer.prototype={constructor:THREE.PropertyMixer,accumulate:function(e,r){var t=this.buffer,n=this.valueSize,i=e*n+n,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==n;++o)t[i+o]=t[o];a=r}else{a+=r;var s=r/a;this._mixBufferRegion(t,i,0,s,n)}this.cumulativeWeight=a},apply:function(e){var r=this.valueSize,t=this.buffer,n=e*r+r,i=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,1>i){var o=3*r;this._mixBufferRegion(t,n,o,1-i,r)}for(var s=r,c=r+r;s!==c;++s)if(t[s]!==t[s+r]){a.setValue(t,n);break}},saveOriginalState:function(){var e=this.binding,r=this.buffer,t=this.valueSize,n=3*t;e.getValue(r,n);for(var i=t,a=n;i!==a;++i)r[i]=r[n+i%t];this.cumulativeWeight=0},restoreOriginalState:function(){var e=3*this.valueSize;this.binding.setValue(this.buffer,e)},_select:function(e,r,t,n,i){if(n>=.5)for(var a=0;a!==i;++a)e[r+a]=e[t+a]},_slerp:function(e,r,t,n,i){THREE.Quaternion.slerpFlat(e,r,e,r,e,t,n)},_lerp:function(e,r,t,n,i){for(var a=1-n,o=0;o!==i;++o){var s=r+o;e[s]=e[s]*a+e[t+o]*n}}},THREE.BooleanKeyframeTrack=function(e,r,t){THREE.KeyframeTrack.call(this,e,r,t)},THREE.BooleanKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.BooleanKeyframeTrack,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),THREE.ColorKeyframeTrack=function(e,r,t,n){THREE.KeyframeTrack.call(this,e,r,t,n)},THREE.ColorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.ColorKeyframeTrack,ValueTypeName:"color"}),THREE.NumberKeyframeTrack=function(e,r,t,n){THREE.KeyframeTrack.call(this,e,r,t,n)},THREE.NumberKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.NumberKeyframeTrack,ValueTypeName:"number"}),THREE.QuaternionKeyframeTrack=function(e,r,t,n){THREE.KeyframeTrack.call(this,e,r,t,n)},THREE.QuaternionKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.QuaternionKeyframeTrack,ValueTypeName:"quaternion",DefaultInterpolation:THREE.InterpolateLinear,InterpolantFactoryMethodLinear:function(e){return new THREE.QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),e)},InterpolantFactoryMethodSmooth:void 0}),THREE.StringKeyframeTrack=function(e,r,t,n){THREE.KeyframeTrack.call(this,e,r,t,n)},THREE.StringKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.StringKeyframeTrack,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:THREE.InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),THREE.VectorKeyframeTrack=function(e,r,t,n){THREE.KeyframeTrack.call(this,e,r,t,n)},THREE.VectorKeyframeTrack.prototype=Object.assign(Object.create(THREE.KeyframeTrack.prototype),{constructor:THREE.VectorKeyframeTrack,ValueTypeName:"vector"}),THREE.Audio=function(e){THREE.Object3D.call(this),this.type="Audio",this.context=e.context,this.source=this.context.createBufferSource(),this.source.onended=this.onEnded.bind(this),this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.startTime=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]},THREE.Audio.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Audio,getOutput:function(){return this.gain},setNodeSource:function(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this},setBuffer:function(e){return this.source.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(this.isPlaying===!0)return void console.warn("THREE.Audio: Audio is already playing.");if(this.hasPlaybackControl===!1)return void console.warn("THREE.Audio: this Audio has no playback control.");var e=this.context.createBufferSource();return e.buffer=this.source.buffer,e.loop=this.source.loop,e.onended=this.source.onended,e.start(0,this.startTime),e.playbackRate.value=this.playbackRate,this.isPlaying=!0,this.source=e,this.connect()},pause:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=this.context.currentTime,this.isPlaying=!1,this)},stop:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=0,this.isPlaying=!1,this)},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var e=1,r=this.filters.length;r>e;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var e=1,r=this.filters.length;r>e;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(e){return e||(e=[]),this.isPlaying===!0?(this.disconnect(),this.filters=e,this.connect()):this.filters=e,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(e){return this.setFilters(e?[e]:[])},setPlaybackRate:function(e){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.playbackRate=e,this.isPlaying===!0&&(this.source.playbackRate.value=this.playbackRate),this)},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.source.loop},setLoop:function(e){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):void(this.source.loop=e)},getVolume:function(){return this.gain.gain.value},setVolume:function(e){return this.gain.gain.value=e,this}}),THREE.AudioAnalyser=function(e,r){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=void 0!==r?r:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)},Object.assign(THREE.AudioAnalyser.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var e=0,r=this.getFrequencyData(),t=0;t<r.length;t++)e+=r[t];return e/r.length}}),Object.defineProperty(THREE,"AudioContext",{get:function(){var e;return function(){return void 0===e&&(e=new(window.AudioContext||window.webkitAudioContext)),e}}()}),THREE.PositionalAudio=function(e){THREE.Audio.call(this,e),this.panner=this.context.createPanner(),this.panner.connect(this.gain)},THREE.PositionalAudio.prototype=Object.assign(Object.create(THREE.Audio.prototype),{constructor:THREE.PositionalAudio,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(e){this.panner.refDistance=e},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(e){this.panner.rolloffFactor=e},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(e){this.panner.distanceModel=e},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(e){this.panner.maxDistance=e},updateMatrixWorld:function(){var e=new THREE.Vector3;return function(r){THREE.Object3D.prototype.updateMatrixWorld.call(this,r),e.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(e.x,e.y,e.z)}}()}),THREE.AudioListener=function(){THREE.Object3D.call(this),this.type="AudioListener",this.context=THREE.AudioContext,this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null},THREE.AudioListener.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.AudioListener,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(e){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(e){this.gain.gain.value=e},updateMatrixWorld:function(){var e=new THREE.Vector3,r=new THREE.Quaternion,t=new THREE.Vector3,n=new THREE.Vector3;return function(i){THREE.Object3D.prototype.updateMatrixWorld.call(this,i);var a=this.context.listener,o=this.up;this.matrixWorld.decompose(e,r,t),n.set(0,0,-1).applyQuaternion(r),a.setPosition(e.x,e.y,e.z),a.setOrientation(n.x,n.y,n.z,o.x,o.y,o.z)}}()}),THREE.Camera=function(){THREE.Object3D.call(this),this.type="Camera",this.matrixWorldInverse=new THREE.Matrix4,this.projectionMatrix=new THREE.Matrix4},THREE.Camera.prototype=Object.create(THREE.Object3D.prototype),THREE.Camera.prototype.constructor=THREE.Camera,THREE.Camera.prototype.getWorldDirection=function(){var e=new THREE.Quaternion;return function(r){var t=r||new THREE.Vector3;return this.getWorldQuaternion(e),t.set(0,0,-1).applyQuaternion(e)}}(),THREE.Camera.prototype.lookAt=function(){var e=new THREE.Matrix4;return function(r){e.lookAt(this.position,r,this.up),this.quaternion.setFromRotationMatrix(e)}}(),THREE.Camera.prototype.clone=function(){return(new this.constructor).copy(this)},THREE.Camera.prototype.copy=function(e){return THREE.Object3D.prototype.copy.call(this,e),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this},THREE.CubeCamera=function(e,r,t){THREE.Object3D.call(this),this.type="CubeCamera";var n=90,i=1,a=new THREE.PerspectiveCamera(n,i,e,r);a.up.set(0,-1,0),a.lookAt(new THREE.Vector3(1,0,0)),this.add(a);var o=new THREE.PerspectiveCamera(n,i,e,r);o.up.set(0,-1,0),o.lookAt(new THREE.Vector3(-1,0,0)),this.add(o);var s=new THREE.PerspectiveCamera(n,i,e,r);s.up.set(0,0,1),s.lookAt(new THREE.Vector3(0,1,0)),this.add(s);var c=new THREE.PerspectiveCamera(n,i,e,r);c.up.set(0,0,-1),c.lookAt(new THREE.Vector3(0,-1,0)),this.add(c);var l=new THREE.PerspectiveCamera(n,i,e,r);l.up.set(0,-1,0),l.lookAt(new THREE.Vector3(0,0,1)),this.add(l);var h=new THREE.PerspectiveCamera(n,i,e,r);h.up.set(0,-1,0),h.lookAt(new THREE.Vector3(0,0,-1)),this.add(h);var d={format:THREE.RGBFormat,magFilter:THREE.LinearFilter,minFilter:THREE.LinearFilter};this.renderTarget=new THREE.WebGLRenderTargetCube(t,t,d),this.updateCubeMap=function(e,r){null===this.parent&&this.updateMatrixWorld();var t=this.renderTarget,n=t.texture.generateMipmaps;t.texture.generateMipmaps=!1,t.activeCubeFace=0,e.render(r,a,t),t.activeCubeFace=1,e.render(r,o,t),t.activeCubeFace=2,e.render(r,s,t),t.activeCubeFace=3,e.render(r,c,t),t.activeCubeFace=4,e.render(r,l,t),t.texture.generateMipmaps=n,t.activeCubeFace=5,e.render(r,h,t),e.setRenderTarget(null)}},THREE.CubeCamera.prototype=Object.create(THREE.Object3D.prototype),THREE.CubeCamera.prototype.constructor=THREE.CubeCamera,THREE.OrthographicCamera=function(e,r,t,n,i,a){THREE.Camera.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=r,this.top=t,this.bottom=n,this.near=void 0!==i?i:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()},THREE.OrthographicCamera.prototype=Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.OrthographicCamera,copy:function(e){return THREE.Camera.prototype.copy.call(this,e),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=null===e.view?null:Object.assign({},e.view),this},setViewOffset:function(e,r,t,n,i,a){this.view={fullWidth:e,fullHeight:r,offsetX:t,offsetY:n,width:i,height:a},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=(this.right-this.left)/(2*this.zoom),r=(this.top-this.bottom)/(2*this.zoom),t=(this.right+this.left)/2,n=(this.top+this.bottom)/2,i=t-e,a=t+e,o=n+r,s=n-r;if(null!==this.view){var c=this.zoom/(this.view.width/this.view.fullWidth),l=this.zoom/(this.view.height/this.view.fullHeight),h=(this.right-this.left)/this.view.width,d=(this.top-this.bottom)/this.view.height;i+=h*(this.view.offsetX/c),a=i+h*(this.view.width/c),o-=d*(this.view.offsetY/l),s=o-d*(this.view.height/l)}this.projectionMatrix.makeOrthographic(i,a,o,s,this.near,this.far)},toJSON:function(e){var r=THREE.Object3D.prototype.toJSON.call(this,e);return r.object.zoom=this.zoom,r.object.left=this.left,r.object.right=this.right,r.object.top=this.top,r.object.bottom=this.bottom,r.object.near=this.near,r.object.far=this.far,null!==this.view&&(r.object.view=Object.assign({},this.view)),r}}),THREE.PerspectiveCamera=function(e,r,t,n){THREE.Camera.call(this),this.type="PerspectiveCamera",this.fov=void 0!==e?e:50,this.zoom=1,this.near=void 0!==t?t:.1,this.far=void 0!==n?n:2e3,this.focus=10,this.aspect=void 0!==r?r:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()},THREE.PerspectiveCamera.prototype=Object.assign(Object.create(THREE.Camera.prototype),{constructor:THREE.PerspectiveCamera,copy:function(e){return THREE.Camera.prototype.copy.call(this,e),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=null===e.view?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this},setFocalLength:function(e){var r=.5*this.getFilmHeight()/e;this.fov=2*THREE.Math.RAD2DEG*Math.atan(r),this.updateProjectionMatrix()},getFocalLength:function(){var e=Math.tan(.5*THREE.Math.DEG2RAD*this.fov);return.5*this.getFilmHeight()/e},getEffectiveFOV:function(){return 2*THREE.Math.RAD2DEG*Math.atan(Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(e,r,t,n,i,a){this.aspect=e/r,this.view={fullWidth:e,fullHeight:r,offsetX:t,offsetY:n,width:i,height:a},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var e=this.near,r=e*Math.tan(.5*THREE.Math.DEG2RAD*this.fov)/this.zoom,t=2*r,n=this.aspect*t,i=-.5*n,a=this.view;if(null!==a){var o=a.fullWidth,s=a.fullHeight;i+=a.offsetX*n/o,r-=a.offsetY*t/s,n*=a.width/o,t*=a.height/s}var c=this.filmOffset;0!==c&&(i+=e*c/this.getFilmWidth()),this.projectionMatrix.makeFrustum(i,i+n,r-t,r,e,this.far)},toJSON:function(e){var r=THREE.Object3D.prototype.toJSON.call(this,e);return r.object.fov=this.fov,r.object.zoom=this.zoom,r.object.near=this.near,r.object.far=this.far,r.object.focus=this.focus,r.object.aspect=this.aspect,null!==this.view&&(r.object.view=Object.assign({},this.view)),r.object.filmGauge=this.filmGauge,r.object.filmOffset=this.filmOffset,r}}),THREE.StereoCamera=function(){this.type="StereoCamera",this.aspect=1,this.cameraL=new THREE.PerspectiveCamera,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new THREE.PerspectiveCamera,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1},Object.assign(THREE.StereoCamera.prototype,{update:function(){var e,r,t,n,i,a=new THREE.Matrix4,o=new THREE.Matrix4;return function(s){var c=e!==s.focus||r!==s.fov||t!==s.aspect*this.aspect||n!==s.near||i!==s.far;if(c){e=s.focus,r=s.fov,t=s.aspect*this.aspect,n=s.near,i=s.far;var l,h,d=s.projectionMatrix.clone(),u=.032,p=u*n/e,f=n*Math.tan(THREE.Math.DEG2RAD*r*.5);o.elements[12]=-u,a.elements[12]=u,l=-f*t+p,h=f*t+p,d.elements[0]=2*n/(h-l),d.elements[8]=(h+l)/(h-l),
this.cameraL.projectionMatrix.copy(d),l=-f*t-p,h=f*t-p,d.elements[0]=2*n/(h-l),d.elements[8]=(h+l)/(h-l),this.cameraR.projectionMatrix.copy(d)}this.cameraL.matrixWorld.copy(s.matrixWorld).multiply(o),this.cameraR.matrixWorld.copy(s.matrixWorld).multiply(a)}}()}),THREE.Light=function(e,r){THREE.Object3D.call(this),this.type="Light",this.color=new THREE.Color(e),this.intensity=void 0!==r?r:1,this.receiveShadow=void 0},THREE.Light.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Light,copy:function(e){return THREE.Object3D.prototype.copy.call(this,e),this.color.copy(e.color),this.intensity=e.intensity,this},toJSON:function(e){var r=THREE.Object3D.prototype.toJSON.call(this,e);return r.object.color=this.color.getHex(),r.object.intensity=this.intensity,void 0!==this.groundColor&&(r.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(r.object.distance=this.distance),void 0!==this.angle&&(r.object.angle=this.angle),void 0!==this.decay&&(r.object.decay=this.decay),void 0!==this.penumbra&&(r.object.penumbra=this.penumbra),r}}),THREE.LightShadow=function(e){this.camera=e,this.bias=0,this.radius=1,this.mapSize=new THREE.Vector2(512,512),this.map=null,this.matrix=new THREE.Matrix4},Object.assign(THREE.LightShadow.prototype,{copy:function(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this},clone:function(){return(new this.constructor).copy(this)}}),THREE.AmbientLight=function(e,r){THREE.Light.call(this,e,r),this.type="AmbientLight",this.castShadow=void 0},THREE.AmbientLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.AmbientLight}),THREE.DirectionalLight=function(e,r){THREE.Light.call(this,e,r),this.type="DirectionalLight",this.position.set(0,1,0),this.updateMatrix(),this.target=new THREE.Object3D,this.shadow=new THREE.DirectionalLightShadow},THREE.DirectionalLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.DirectionalLight,copy:function(e){return THREE.Light.prototype.copy.call(this,e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),THREE.DirectionalLightShadow=function(e){THREE.LightShadow.call(this,new THREE.OrthographicCamera(-5,5,5,-5,.5,500))},THREE.DirectionalLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.DirectionalLightShadow}),THREE.HemisphereLight=function(e,r,t){THREE.Light.call(this,e,t),this.type="HemisphereLight",this.castShadow=void 0,this.position.set(0,1,0),this.updateMatrix(),this.groundColor=new THREE.Color(r)},THREE.HemisphereLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.HemisphereLight,copy:function(e){return THREE.Light.prototype.copy.call(this,e),this.groundColor.copy(e.groundColor),this}}),THREE.PointLight=function(e,r,t,n){THREE.Light.call(this,e,r),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(e){this.intensity=e/(4*Math.PI)}}),this.distance=void 0!==t?t:0,this.decay=void 0!==n?n:1,this.shadow=new THREE.LightShadow(new THREE.PerspectiveCamera(90,1,.5,500))},THREE.PointLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.PointLight,copy:function(e){return THREE.Light.prototype.copy.call(this,e),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}),THREE.SpotLight=function(e,r,t,n,i,a){THREE.Light.call(this,e,r),this.type="SpotLight",this.position.set(0,1,0),this.updateMatrix(),this.target=new THREE.Object3D,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(e){this.intensity=e/Math.PI}}),this.distance=void 0!==t?t:0,this.angle=void 0!==n?n:Math.PI/3,this.penumbra=void 0!==i?i:0,this.decay=void 0!==a?a:1,this.shadow=new THREE.SpotLightShadow},THREE.SpotLight.prototype=Object.assign(Object.create(THREE.Light.prototype),{constructor:THREE.SpotLight,copy:function(e){return THREE.Light.prototype.copy.call(this,e),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}),THREE.SpotLightShadow=function(){THREE.LightShadow.call(this,new THREE.PerspectiveCamera(50,1,.5,500))},THREE.SpotLightShadow.prototype=Object.assign(Object.create(THREE.LightShadow.prototype),{constructor:THREE.SpotLightShadow,update:function(e){var r=2*THREE.Math.RAD2DEG*e.angle,t=this.mapSize.width/this.mapSize.height,n=e.distance||500,i=this.camera;r===i.fov&&t===i.aspect&&n===i.far||(i.fov=r,i.aspect=t,i.far=n,i.updateProjectionMatrix())}}),THREE.AudioLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},Object.assign(THREE.AudioLoader.prototype,{load:function(e,r,t,n){var i=new THREE.XHRLoader(this.manager);i.setResponseType("arraybuffer"),i.load(e,function(e){var t=THREE.AudioContext;t.decodeAudioData(e,function(e){r(e)})},t,n)}}),THREE.Cache={enabled:!1,files:{},add:function(e,r){this.enabled!==!1&&(this.files[e]=r)},get:function(e){return this.enabled!==!1?this.files[e]:void 0},remove:function(e){delete this.files[e]},clear:function(){this.files={}}},THREE.Loader=function(){this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}},THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:void 0,extractUrlBase:function(e){var r=e.split("/");return 1===r.length?"./":(r.pop(),r.join("/")+"/")},initMaterials:function(e,r,t){for(var n=[],i=0;i<e.length;++i)n[i]=this.createMaterial(e[i],r,t);return n},createMaterial:function(){var e,r,t;return function(n,i,a){function o(e,t,n,o,c){var l,h=i+e,d=THREE.Loader.Handlers.get(h);null!==d?l=d.load(h):(r.setCrossOrigin(a),l=r.load(h)),void 0!==t&&(l.repeat.fromArray(t),1!==t[0]&&(l.wrapS=THREE.RepeatWrapping),1!==t[1]&&(l.wrapT=THREE.RepeatWrapping)),void 0!==n&&l.offset.fromArray(n),void 0!==o&&("repeat"===o[0]&&(l.wrapS=THREE.RepeatWrapping),"mirror"===o[0]&&(l.wrapS=THREE.MirroredRepeatWrapping),"repeat"===o[1]&&(l.wrapT=THREE.RepeatWrapping),"mirror"===o[1]&&(l.wrapT=THREE.MirroredRepeatWrapping)),void 0!==c&&(l.anisotropy=c);var u=THREE.Math.generateUUID();return s[u]=l,u}void 0===e&&(e=new THREE.Color),void 0===r&&(r=new THREE.TextureLoader),void 0===t&&(t=new THREE.MaterialLoader);var s={},c={uuid:THREE.Math.generateUUID(),type:"MeshLambertMaterial"};for(var l in n){var h=n[l];switch(l){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":c.name=h;break;case"blending":c.blending=THREE[h];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",l,"is no longer supported.");break;case"colorDiffuse":c.color=e.fromArray(h).getHex();break;case"colorSpecular":c.specular=e.fromArray(h).getHex();break;case"colorEmissive":c.emissive=e.fromArray(h).getHex();break;case"specularCoef":c.shininess=h;break;case"shading":"basic"===h.toLowerCase()&&(c.type="MeshBasicMaterial"),"phong"===h.toLowerCase()&&(c.type="MeshPhongMaterial"),"standard"===h.toLowerCase()&&(c.type="MeshStandardMaterial");break;case"mapDiffuse":c.map=o(h,n.mapDiffuseRepeat,n.mapDiffuseOffset,n.mapDiffuseWrap,n.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":c.emissiveMap=o(h,n.mapEmissiveRepeat,n.mapEmissiveOffset,n.mapEmissiveWrap,n.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":c.lightMap=o(h,n.mapLightRepeat,n.mapLightOffset,n.mapLightWrap,n.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":c.aoMap=o(h,n.mapAORepeat,n.mapAOOffset,n.mapAOWrap,n.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":c.bumpMap=o(h,n.mapBumpRepeat,n.mapBumpOffset,n.mapBumpWrap,n.mapBumpAnisotropy);break;case"mapBumpScale":c.bumpScale=h;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":c.normalMap=o(h,n.mapNormalRepeat,n.mapNormalOffset,n.mapNormalWrap,n.mapNormalAnisotropy);break;case"mapNormalFactor":c.normalScale=[h,h];break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":c.specularMap=o(h,n.mapSpecularRepeat,n.mapSpecularOffset,n.mapSpecularWrap,n.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":c.metalnessMap=o(h,n.mapMetalnessRepeat,n.mapMetalnessOffset,n.mapMetalnessWrap,n.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":c.roughnessMap=o(h,n.mapRoughnessRepeat,n.mapRoughnessOffset,n.mapRoughnessWrap,n.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":c.alphaMap=o(h,n.mapAlphaRepeat,n.mapAlphaOffset,n.mapAlphaWrap,n.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":c.side=THREE.BackSide;break;case"doubleSided":c.side=THREE.DoubleSide;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),c.opacity=h;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":c[l]=h;break;case"vertexColors":h===!0&&(c.vertexColors=THREE.VertexColors),"face"===h&&(c.vertexColors=THREE.FaceColors);break;default:console.error("THREE.Loader.createMaterial: Unsupported",l,h)}}return"MeshBasicMaterial"===c.type&&delete c.emissive,"MeshPhongMaterial"!==c.type&&delete c.specular,c.opacity<1&&(c.transparent=!0),t.setTextures(s),t.parse(c)}}()},THREE.Loader.Handlers={handlers:[],add:function(e,r){this.handlers.push(e,r)},get:function(e){for(var r=this.handlers,t=0,n=r.length;n>t;t+=2){var i=r[t],a=r[t+1];if(i.test(e))return a}return null}},THREE.XHRLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},Object.assign(THREE.XHRLoader.prototype,{load:function(e,r,t,n){void 0!==this.path&&(e=this.path+e);var i=this,a=THREE.Cache.get(e);if(void 0!==a)return r&&setTimeout(function(){r(a)},0),a;var o=new XMLHttpRequest;return o.overrideMimeType("text/plain"),o.open("GET",e,!0),o.addEventListener("load",function(t){var a=t.target.response;THREE.Cache.add(e,a),200===this.status?(r&&r(a),i.manager.itemEnd(e)):0===this.status?(console.warn("THREE.XHRLoader: HTTP Status 0 received."),r&&r(a),i.manager.itemEnd(e)):(n&&n(t),i.manager.itemError(e))},!1),void 0!==t&&o.addEventListener("progress",function(e){t(e)},!1),o.addEventListener("error",function(r){n&&n(r),i.manager.itemError(e)},!1),void 0!==this.responseType&&(o.responseType=this.responseType),void 0!==this.withCredentials&&(o.withCredentials=this.withCredentials),o.send(null),i.manager.itemStart(e),o},setPath:function(e){return this.path=e,this},setResponseType:function(e){return this.responseType=e,this},setWithCredentials:function(e){return this.withCredentials=e,this}}),THREE.FontLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},Object.assign(THREE.FontLoader.prototype,{load:function(e,r,t,n){var i=this,a=new THREE.XHRLoader(this.manager);a.load(e,function(e){var t;try{t=JSON.parse(e)}catch(n){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),t=JSON.parse(e.substring(65,e.length-2))}var a=i.parse(t);r&&r(a)},t,n)},parse:function(e){return new THREE.Font(e)}}),THREE.ImageLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},Object.assign(THREE.ImageLoader.prototype,{load:function(e,r,t,n){var i=document.createElementNS("http://www.w3.org/1999/xhtml","img");if(i.onload=function(){URL.revokeObjectURL(i.src),r&&r(i)},0===e.indexOf("data:"))i.src=e;else{var a=new THREE.XHRLoader(this.manager);a.setPath(this.path),a.setResponseType("blob"),a.load(e,function(e){i.src=URL.createObjectURL(e)},t,n)}return i},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),THREE.JSONLoader=function(e){"boolean"==typeof e&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),e=void 0),this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.withCredentials=!1},Object.assign(THREE.JSONLoader.prototype,{load:function(e,r,t,n){var i=this,a=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:THREE.Loader.prototype.extractUrlBase(e),o=new THREE.XHRLoader(this.manager);o.setWithCredentials(this.withCredentials),o.load(e,function(t){var n=JSON.parse(t),o=n.metadata;if(void 0!==o){var s=o.type;if(void 0!==s){if("object"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.ObjectLoader instead.");if("scene"===s.toLowerCase())return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.SceneLoader instead.")}}var c=i.parse(n,a);r(c.geometry,c.materials)},t,n)},setTexturePath:function(e){this.texturePath=e},parse:function(e,r){function t(r){function t(e,r){return e&1<<r}var n,i,a,s,c,l,h,d,u,p,f,m,E,g,v,T,_,y,x,R,b,H,M,S,w,L,C,P=e.faces,A=e.vertices,D=e.normals,I=e.colors,U=0;if(void 0!==e.uvs){for(n=0;n<e.uvs.length;n++)e.uvs[n].length&&U++;for(n=0;U>n;n++)o.faceVertexUvs[n]=[]}for(s=0,c=A.length;c>s;)y=new THREE.Vector3,y.x=A[s++]*r,y.y=A[s++]*r,y.z=A[s++]*r,o.vertices.push(y);for(s=0,c=P.length;c>s;)if(p=P[s++],f=t(p,0),m=t(p,1),E=t(p,3),g=t(p,4),v=t(p,5),T=t(p,6),_=t(p,7),f){if(R=new THREE.Face3,R.a=P[s],R.b=P[s+1],R.c=P[s+3],b=new THREE.Face3,b.a=P[s+1],b.b=P[s+2],b.c=P[s+3],s+=4,m&&(u=P[s++],R.materialIndex=u,b.materialIndex=u),a=o.faces.length,E)for(n=0;U>n;n++)for(S=e.uvs[n],o.faceVertexUvs[n][a]=[],o.faceVertexUvs[n][a+1]=[],i=0;4>i;i++)d=P[s++],L=S[2*d],C=S[2*d+1],w=new THREE.Vector2(L,C),2!==i&&o.faceVertexUvs[n][a].push(w),0!==i&&o.faceVertexUvs[n][a+1].push(w);if(g&&(h=3*P[s++],R.normal.set(D[h++],D[h++],D[h]),b.normal.copy(R.normal)),v)for(n=0;4>n;n++)h=3*P[s++],M=new THREE.Vector3(D[h++],D[h++],D[h]),2!==n&&R.vertexNormals.push(M),0!==n&&b.vertexNormals.push(M);if(T&&(l=P[s++],H=I[l],R.color.setHex(H),b.color.setHex(H)),_)for(n=0;4>n;n++)l=P[s++],H=I[l],2!==n&&R.vertexColors.push(new THREE.Color(H)),0!==n&&b.vertexColors.push(new THREE.Color(H));o.faces.push(R),o.faces.push(b)}else{if(x=new THREE.Face3,x.a=P[s++],x.b=P[s++],x.c=P[s++],m&&(u=P[s++],x.materialIndex=u),a=o.faces.length,E)for(n=0;U>n;n++)for(S=e.uvs[n],o.faceVertexUvs[n][a]=[],i=0;3>i;i++)d=P[s++],L=S[2*d],C=S[2*d+1],w=new THREE.Vector2(L,C),o.faceVertexUvs[n][a].push(w);if(g&&(h=3*P[s++],x.normal.set(D[h++],D[h++],D[h])),v)for(n=0;3>n;n++)h=3*P[s++],M=new THREE.Vector3(D[h++],D[h++],D[h]),x.vertexNormals.push(M);if(T&&(l=P[s++],x.color.setHex(I[l])),_)for(n=0;3>n;n++)l=P[s++],x.vertexColors.push(new THREE.Color(I[l]));o.faces.push(x)}}function n(){var r=void 0!==e.influencesPerVertex?e.influencesPerVertex:2;if(e.skinWeights)for(var t=0,n=e.skinWeights.length;n>t;t+=r){var i=e.skinWeights[t],a=r>1?e.skinWeights[t+1]:0,s=r>2?e.skinWeights[t+2]:0,c=r>3?e.skinWeights[t+3]:0;o.skinWeights.push(new THREE.Vector4(i,a,s,c))}if(e.skinIndices)for(var t=0,n=e.skinIndices.length;n>t;t+=r){var l=e.skinIndices[t],h=r>1?e.skinIndices[t+1]:0,d=r>2?e.skinIndices[t+2]:0,u=r>3?e.skinIndices[t+3]:0;o.skinIndices.push(new THREE.Vector4(l,h,d,u))}o.bones=e.bones,o.bones&&o.bones.length>0&&(o.skinWeights.length!==o.skinIndices.length||o.skinIndices.length!==o.vertices.length)&&console.warn("When skinning, number of vertices ("+o.vertices.length+"), skinIndices ("+o.skinIndices.length+"), and skinWeights ("+o.skinWeights.length+") should match.")}function i(r){if(void 0!==e.morphTargets)for(var t=0,n=e.morphTargets.length;n>t;t++){o.morphTargets[t]={},o.morphTargets[t].name=e.morphTargets[t].name,o.morphTargets[t].vertices=[];for(var i=o.morphTargets[t].vertices,a=e.morphTargets[t].vertices,s=0,c=a.length;c>s;s+=3){var l=new THREE.Vector3;l.x=a[s]*r,l.y=a[s+1]*r,l.z=a[s+2]*r,i.push(l)}}if(void 0!==e.morphColors&&e.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');for(var h=o.faces,d=e.morphColors[0].colors,t=0,n=h.length;n>t;t++)h[t].color.fromArray(d,3*t)}}function a(){var r=[],t=[];void 0!==e.animation&&t.push(e.animation),void 0!==e.animations&&(e.animations.length?t=t.concat(e.animations):t.push(e.animations));for(var n=0;n<t.length;n++){var i=THREE.AnimationClip.parseAnimation(t[n],o.bones);i&&r.push(i)}if(o.morphTargets){var a=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(o.morphTargets,10);r=r.concat(a)}r.length>0&&(o.animations=r)}var o=new THREE.Geometry,s=void 0!==e.scale?1/e.scale:1;if(t(s),n(),i(s),a(),o.computeFaceNormals(),o.computeBoundingSphere(),void 0===e.materials||0===e.materials.length)return{geometry:o};var c=THREE.Loader.prototype.initMaterials(e.materials,r,this.crossOrigin);return{geometry:o,materials:c}}}),THREE.LoadingManager=function(e,r,t){var n=this,i=!1,a=0,o=0;this.onStart=void 0,this.onLoad=e,this.onProgress=r,this.onError=t,this.itemStart=function(e){o++,i===!1&&void 0!==n.onStart&&n.onStart(e,a,o),i=!0},this.itemEnd=function(e){a++,void 0!==n.onProgress&&n.onProgress(e,a,o),a===o&&(i=!1,void 0!==n.onLoad&&n.onLoad())},this.itemError=function(e){void 0!==n.onError&&n.onError(e)}},THREE.DefaultLoadingManager=new THREE.LoadingManager,THREE.BufferGeometryLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},Object.assign(THREE.BufferGeometryLoader.prototype,{load:function(e,r,t,n){var i=this,a=new THREE.XHRLoader(i.manager);a.load(e,function(e){r(i.parse(JSON.parse(e)))},t,n)},parse:function(e){var r=new THREE.BufferGeometry,t=e.data.index,n={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};if(void 0!==t){var i=new n[t.type](t.array);r.setIndex(new THREE.BufferAttribute(i,1))}var a=e.data.attributes;for(var o in a){var s=a[o],i=new n[s.type](s.array);r.addAttribute(o,new THREE.BufferAttribute(i,s.itemSize,s.normalized))}var c=e.data.groups||e.data.drawcalls||e.data.offsets;if(void 0!==c)for(var l=0,h=c.length;l!==h;++l){var d=c[l];r.addGroup(d.start,d.count,d.materialIndex)}var u=e.data.boundingSphere;if(void 0!==u){var p=new THREE.Vector3;void 0!==u.center&&p.fromArray(u.center),r.boundingSphere=new THREE.Sphere(p,u.radius)}return r}}),THREE.MaterialLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.textures={}},Object.assign(THREE.MaterialLoader.prototype,{load:function(e,r,t,n){var i=this,a=new THREE.XHRLoader(i.manager);a.load(e,function(e){r(i.parse(JSON.parse(e)))},t,n)},setTextures:function(e){this.textures=e},getTexture:function(e){var r=this.textures;return void 0===r[e]&&console.warn("THREE.MaterialLoader: Undefined texture",e),r[e]},parse:function(e){var r=new THREE[e.type];if(void 0!==e.uuid&&(r.uuid=e.uuid),void 0!==e.name&&(r.name=e.name),void 0!==e.color&&r.color.setHex(e.color),void 0!==e.roughness&&(r.roughness=e.roughness),void 0!==e.metalness&&(r.metalness=e.metalness),void 0!==e.emissive&&r.emissive.setHex(e.emissive),void 0!==e.specular&&r.specular.setHex(e.specular),void 0!==e.shininess&&(r.shininess=e.shininess),void 0!==e.uniforms&&(r.uniforms=e.uniforms),void 0!==e.vertexShader&&(r.vertexShader=e.vertexShader),void 0!==e.fragmentShader&&(r.fragmentShader=e.fragmentShader),void 0!==e.vertexColors&&(r.vertexColors=e.vertexColors),void 0!==e.shading&&(r.shading=e.shading),void 0!==e.blending&&(r.blending=e.blending),void 0!==e.side&&(r.side=e.side),void 0!==e.opacity&&(r.opacity=e.opacity),void 0!==e.transparent&&(r.transparent=e.transparent),void 0!==e.alphaTest&&(r.alphaTest=e.alphaTest),void 0!==e.depthTest&&(r.depthTest=e.depthTest),void 0!==e.depthWrite&&(r.depthWrite=e.depthWrite),void 0!==e.colorWrite&&(r.colorWrite=e.colorWrite),void 0!==e.wireframe&&(r.wireframe=e.wireframe),void 0!==e.wireframeLinewidth&&(r.wireframeLinewidth=e.wireframeLinewidth),void 0!==e.size&&(r.size=e.size),void 0!==e.sizeAttenuation&&(r.sizeAttenuation=e.sizeAttenuation),void 0!==e.map&&(r.map=this.getTexture(e.map)),void 0!==e.alphaMap&&(r.alphaMap=this.getTexture(e.alphaMap),r.transparent=!0),void 0!==e.bumpMap&&(r.bumpMap=this.getTexture(e.bumpMap)),void 0!==e.bumpScale&&(r.bumpScale=e.bumpScale),void 0!==e.normalMap&&(r.normalMap=this.getTexture(e.normalMap)),void 0!==e.normalScale){var t=e.normalScale;Array.isArray(t)===!1&&(t=[t,t]),r.normalScale=(new THREE.Vector2).fromArray(t)}if(void 0!==e.displacementMap&&(r.displacementMap=this.getTexture(e.displacementMap)),void 0!==e.displacementScale&&(r.displacementScale=e.displacementScale),void 0!==e.displacementBias&&(r.displacementBias=e.displacementBias),void 0!==e.roughnessMap&&(r.roughnessMap=this.getTexture(e.roughnessMap)),void 0!==e.metalnessMap&&(r.metalnessMap=this.getTexture(e.metalnessMap)),void 0!==e.emissiveMap&&(r.emissiveMap=this.getTexture(e.emissiveMap)),void 0!==e.emissiveIntensity&&(r.emissiveIntensity=e.emissiveIntensity),void 0!==e.specularMap&&(r.specularMap=this.getTexture(e.specularMap)),void 0!==e.envMap&&(r.envMap=this.getTexture(e.envMap),r.combine=THREE.MultiplyOperation),void 0!==e.reflectivity&&(r.reflectivity=e.reflectivity),void 0!==e.lightMap&&(r.lightMap=this.getTexture(e.lightMap)),void 0!==e.lightMapIntensity&&(r.lightMapIntensity=e.lightMapIntensity),void 0!==e.aoMap&&(r.aoMap=this.getTexture(e.aoMap)),void 0!==e.aoMapIntensity&&(r.aoMapIntensity=e.aoMapIntensity),void 0!==e.materials)for(var n=0,i=e.materials.length;i>n;n++)r.materials.push(this.parse(e.materials[n]));return r}}),THREE.ObjectLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.texturePath=""},Object.assign(THREE.ObjectLoader.prototype,{load:function(e,r,t,n){""===this.texturePath&&(this.texturePath=e.substring(0,e.lastIndexOf("/")+1));var i=this,a=new THREE.XHRLoader(i.manager);a.load(e,function(e){i.parse(JSON.parse(e),r)},t,n)},setTexturePath:function(e){this.texturePath=e},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e,r){var t=this.parseGeometries(e.geometries),n=this.parseImages(e.images,function(){void 0!==r&&r(o)}),i=this.parseTextures(e.textures,n),a=this.parseMaterials(e.materials,i),o=this.parseObject(e.object,t,a);return e.animations&&(o.animations=this.parseAnimations(e.animations)),void 0!==e.images&&0!==e.images.length||void 0!==r&&r(o),o},parseGeometries:function(e){var r={};if(void 0!==e)for(var t=new THREE.JSONLoader,n=new THREE.BufferGeometryLoader,i=0,a=e.length;a>i;i++){var o,s=e[i];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new THREE[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new THREE[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new THREE[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new THREE[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new THREE[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new THREE[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"IcosahedronGeometry":case"OctahedronGeometry":case"TetrahedronGeometry":o=new THREE[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new THREE[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new THREE[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new THREE[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"LatheGeometry":case"LatheBufferGeometry":o=new THREE[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case"BufferGeometry":o=n.parse(s);break;case"Geometry":o=t.parse(s.data,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),r[s.uuid]=o}return r},parseMaterials:function(e,r){var t={};if(void 0!==e){var n=new THREE.MaterialLoader;n.setTextures(r);for(var i=0,a=e.length;a>i;i++){var o=n.parse(e[i]);t[o.uuid]=o}}return t},parseAnimations:function(e){for(var r=[],t=0;t<e.length;t++){var n=THREE.AnimationClip.parse(e[t]);r.push(n)}return r},parseImages:function(e,r){function t(e){return n.manager.itemStart(e),o.load(e,function(){n.manager.itemEnd(e)})}var n=this,i={};if(void 0!==e&&e.length>0){var a=new THREE.LoadingManager(r),o=new THREE.ImageLoader(a);o.setCrossOrigin(this.crossOrigin);for(var s=0,c=e.length;c>s;s++){var l=e[s],h=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(l.url)?l.url:n.texturePath+l.url;i[l.uuid]=t(h)}}return i},parseTextures:function(e,r){function t(e){return"number"==typeof e?e:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",e),THREE[e])}var n={};if(void 0!==e)for(var i=0,a=e.length;a>i;i++){var o=e[i];void 0===o.image&&console.warn('THREE.ObjectLoader: No "image" specified for',o.uuid),void 0===r[o.image]&&console.warn("THREE.ObjectLoader: Undefined image",o.image);var s=new THREE.Texture(r[o.image]);s.needsUpdate=!0,s.uuid=o.uuid,void 0!==o.name&&(s.name=o.name),void 0!==o.mapping&&(s.mapping=t(o.mapping)),void 0!==o.offset&&(s.offset=new THREE.Vector2(o.offset[0],o.offset[1])),void 0!==o.repeat&&(s.repeat=new THREE.Vector2(o.repeat[0],o.repeat[1])),void 0!==o.minFilter&&(s.minFilter=t(o.minFilter)),void 0!==o.magFilter&&(s.magFilter=t(o.magFilter)),void 0!==o.anisotropy&&(s.anisotropy=o.anisotropy),Array.isArray(o.wrap)&&(s.wrapS=t(o.wrap[0]),s.wrapT=t(o.wrap[1])),n[o.uuid]=s}return n},parseObject:function(){var e=new THREE.Matrix4;return function(r,t,n){function i(e){return void 0===t[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),t[e]}function a(e){return void 0!==e?(void 0===n[e]&&console.warn("THREE.ObjectLoader: Undefined material",e),n[e]):void 0}var o;switch(r.type){case"Scene":o=new THREE.Scene;break;case"PerspectiveCamera":o=new THREE.PerspectiveCamera(r.fov,r.aspect,r.near,r.far),void 0!==r.focus&&(o.focus=r.focus),void 0!==r.zoom&&(o.zoom=r.zoom),void 0!==r.filmGauge&&(o.filmGauge=r.filmGauge),void 0!==r.filmOffset&&(o.filmOffset=r.filmOffset),void 0!==r.view&&(o.view=Object.assign({},r.view));break;case"OrthographicCamera":o=new THREE.OrthographicCamera(r.left,r.right,r.top,r.bottom,r.near,r.far);break;case"AmbientLight":o=new THREE.AmbientLight(r.color,r.intensity);break;case"DirectionalLight":o=new THREE.DirectionalLight(r.color,r.intensity);break;case"PointLight":o=new THREE.PointLight(r.color,r.intensity,r.distance,r.decay);break;case"SpotLight":o=new THREE.SpotLight(r.color,r.intensity,r.distance,r.angle,r.penumbra,r.decay);break;case"HemisphereLight":o=new THREE.HemisphereLight(r.color,r.groundColor,r.intensity);break;case"Mesh":var s=i(r.geometry),c=a(r.material);o=s.bones&&s.bones.length>0?new THREE.SkinnedMesh(s,c):new THREE.Mesh(s,c);break;case"LOD":o=new THREE.LOD;break;case"Line":o=new THREE.Line(i(r.geometry),a(r.material),r.mode);break;case"PointCloud":case"Points":o=new THREE.Points(i(r.geometry),a(r.material));break;case"Sprite":o=new THREE.Sprite(a(r.material));break;case"Group":o=new THREE.Group;break;default:o=new THREE.Object3D}if(o.uuid=r.uuid,void 0!==r.name&&(o.name=r.name),void 0!==r.matrix?(e.fromArray(r.matrix),e.decompose(o.position,o.quaternion,o.scale)):(void 0!==r.position&&o.position.fromArray(r.position),void 0!==r.rotation&&o.rotation.fromArray(r.rotation),void 0!==r.scale&&o.scale.fromArray(r.scale)),void 0!==r.castShadow&&(o.castShadow=r.castShadow),void 0!==r.receiveShadow&&(o.receiveShadow=r.receiveShadow),void 0!==r.visible&&(o.visible=r.visible),void 0!==r.userData&&(o.userData=r.userData),void 0!==r.children)for(var l in r.children)o.add(this.parseObject(r.children[l],t,n));if("LOD"===r.type)for(var h=r.levels,d=0;d<h.length;d++){var u=h[d],l=o.getObjectByProperty("uuid",u.object);void 0!==l&&o.addLevel(l,u.distance)}return o}}()}),THREE.TextureLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},Object.assign(THREE.TextureLoader.prototype,{load:function(e,r,t,n){var i=new THREE.Texture,a=new THREE.ImageLoader(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(e,function(e){i.image=e,i.needsUpdate=!0,void 0!==r&&r(i)},t,n),i},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),THREE.CubeTextureLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager},Object.assign(THREE.CubeTextureLoader.prototype,{load:function(e,r,t,n){function i(t){o.load(e[t],function(e){a.images[t]=e,s++,6===s&&(a.needsUpdate=!0,r&&r(a))},void 0,n)}var a=new THREE.CubeTexture,o=new THREE.ImageLoader(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);for(var s=0,c=0;c<e.length;++c)i(c);return a},setCrossOrigin:function(e){return this.crossOrigin=e,this},setPath:function(e){return this.path=e,this}}),THREE.DataTextureLoader=THREE.BinaryTextureLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this._parser=null},Object.assign(THREE.BinaryTextureLoader.prototype,{load:function(e,r,t,n){var i=this,a=new THREE.DataTexture,o=new THREE.XHRLoader(this.manager);return o.setResponseType("arraybuffer"),o.load(e,function(e){var t=i._parser(e);t&&(void 0!==t.image?a.image=t.image:void 0!==t.data&&(a.image.width=t.width,a.image.height=t.height,a.image.data=t.data),a.wrapS=void 0!==t.wrapS?t.wrapS:THREE.ClampToEdgeWrapping,a.wrapT=void 0!==t.wrapT?t.wrapT:THREE.ClampToEdgeWrapping,a.magFilter=void 0!==t.magFilter?t.magFilter:THREE.LinearFilter,a.minFilter=void 0!==t.minFilter?t.minFilter:THREE.LinearMipMapLinearFilter,a.anisotropy=void 0!==t.anisotropy?t.anisotropy:1,void 0!==t.format&&(a.format=t.format),void 0!==t.type&&(a.type=t.type),void 0!==t.mipmaps&&(a.mipmaps=t.mipmaps),1===t.mipmapCount&&(a.minFilter=THREE.LinearFilter),a.needsUpdate=!0,r&&r(a,t))},t,n),a}}),THREE.CompressedTextureLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this._parser=null},Object.assign(THREE.CompressedTextureLoader.prototype,{load:function(e,r,t,n){function i(i){c.load(e[i],function(e){var t=a._parser(e,!0);o[i]={width:t.width,height:t.height,format:t.format,mipmaps:t.mipmaps},l+=1,6===l&&(1===t.mipmapCount&&(s.minFilter=THREE.LinearFilter),s.format=t.format,s.needsUpdate=!0,r&&r(s))},t,n)}var a=this,o=[],s=new THREE.CompressedTexture;s.image=o;var c=new THREE.XHRLoader(this.manager);if(c.setPath(this.path),c.setResponseType("arraybuffer"),Array.isArray(e))for(var l=0,h=0,d=e.length;d>h;++h)i(h);else c.load(e,function(e){var t=a._parser(e,!0);if(t.isCubemap)for(var n=t.mipmaps.length/t.mipmapCount,i=0;n>i;i++){o[i]={mipmaps:[]};for(var c=0;c<t.mipmapCount;c++)o[i].mipmaps.push(t.mipmaps[i*t.mipmapCount+c]),o[i].format=t.format,o[i].width=t.width,o[i].height=t.height}else s.image.width=t.width,s.image.height=t.height,s.mipmaps=t.mipmaps;1===t.mipmapCount&&(s.minFilter=THREE.LinearFilter),s.format=t.format,s.needsUpdate=!0,r&&r(s)},t,n);return s},setPath:function(e){
return this.path=e,this}}),THREE.Material=function(){Object.defineProperty(this,"id",{value:THREE.MaterialIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=THREE.NormalBlending,this.side=THREE.FrontSide,this.shading=THREE.SmoothShading,this.vertexColors=THREE.NoColors,this.opacity=1,this.transparent=!1,this.blendSrc=THREE.SrcAlphaFactor,this.blendDst=THREE.OneMinusSrcAlphaFactor,this.blendEquation=THREE.AddEquation,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=THREE.LessEqualDepth,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipShadows=!1,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this._needsUpdate=!0},THREE.Material.prototype={constructor:THREE.Material,get needsUpdate(){return this._needsUpdate},set needsUpdate(e){e===!0&&this.update(),this._needsUpdate=e},setValues:function(e){if(void 0!==e)for(var r in e){var t=e[r];if(void 0!==t){var n=this[r];void 0!==n?n instanceof THREE.Color?n.set(t):n instanceof THREE.Vector3&&t instanceof THREE.Vector3?n.copy(t):"overdraw"===r?this[r]=Number(t):this[r]=t:console.warn("THREE."+this.type+": '"+r+"' is not a property of this material.")}else console.warn("THREE.Material: '"+r+"' parameter is undefined.")}},toJSON:function(e){function r(e){var r=[];for(var t in e){var n=e[t];delete n.metadata,r.push(n)}return r}var t=void 0===e;t&&(e={textures:{},images:{}});var n={metadata:{version:4.4,type:"Material",generator:"Material.toJSON"}};if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color instanceof THREE.Color&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.emissive instanceof THREE.Color&&(n.emissive=this.emissive.getHex()),this.specular instanceof THREE.Color&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),this.map instanceof THREE.Texture&&(n.map=this.map.toJSON(e).uuid),this.alphaMap instanceof THREE.Texture&&(n.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap instanceof THREE.Texture&&(n.lightMap=this.lightMap.toJSON(e).uuid),this.bumpMap instanceof THREE.Texture&&(n.bumpMap=this.bumpMap.toJSON(e).uuid,n.bumpScale=this.bumpScale),this.normalMap instanceof THREE.Texture&&(n.normalMap=this.normalMap.toJSON(e).uuid,n.normalScale=this.normalScale.toArray()),this.displacementMap instanceof THREE.Texture&&(n.displacementMap=this.displacementMap.toJSON(e).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap instanceof THREE.Texture&&(n.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap instanceof THREE.Texture&&(n.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap instanceof THREE.Texture&&(n.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap instanceof THREE.Texture&&(n.specularMap=this.specularMap.toJSON(e).uuid),this.envMap instanceof THREE.Texture&&(n.envMap=this.envMap.toJSON(e).uuid,n.reflectivity=this.reflectivity),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==THREE.NormalBlending&&(n.blending=this.blending),this.shading!==THREE.SmoothShading&&(n.shading=this.shading),this.side!==THREE.FrontSide&&(n.side=this.side),this.vertexColors!==THREE.NoColors&&(n.vertexColors=this.vertexColors),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=this.transparent),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),t){var i=r(e.textures),a=r(e.images);i.length>0&&(n.textures=i),a.length>0&&(n.images=a)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(e){this.name=e.name,this.fog=e.fog,this.lights=e.lights,this.blending=e.blending,this.side=e.side,this.shading=e.shading,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.alphaTest=e.alphaTest,this.premultipliedAlpha=e.premultipliedAlpha,this.overdraw=e.overdraw,this.visible=e.visible,this.clipShadows=e.clipShadows;var r=e.clippingPlanes,t=null;if(null!==r){var n=r.length;t=new Array(n);for(var i=0;i!==n;++i)t[i]=r[i].clone()}return this.clippingPlanes=t,this},update:function(){this.dispatchEvent({type:"update"})},dispose:function(){this.dispatchEvent({type:"dispose"})}},Object.assign(THREE.Material.prototype,THREE.EventDispatcher.prototype),THREE.MaterialIdCount=0,THREE.LineBasicMaterial=function(e){THREE.Material.call(this),this.type="LineBasicMaterial",this.color=new THREE.Color(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(e)},THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype),THREE.LineBasicMaterial.prototype.constructor=THREE.LineBasicMaterial,THREE.LineBasicMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this},THREE.LineDashedMaterial=function(e){THREE.Material.call(this),this.type="LineDashedMaterial",this.color=new THREE.Color(16777215),this.linewidth=1,this.scale=1,this.dashSize=3,this.gapSize=1,this.lights=!1,this.setValues(e)},THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype),THREE.LineDashedMaterial.prototype.constructor=THREE.LineDashedMaterial,THREE.LineDashedMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.linewidth=e.linewidth,this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this},THREE.MeshBasicMaterial=function(e){THREE.Material.call(this),this.type="MeshBasicMaterial",this.color=new THREE.Color(16777215),this.map=null,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(e)},THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshBasicMaterial.prototype.constructor=THREE.MeshBasicMaterial,THREE.MeshBasicMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this},THREE.MeshDepthMaterial=function(e){THREE.Material.call(this),this.type="MeshDepthMaterial",this.depthPacking=THREE.BasicDepthPacking,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(e)},THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshDepthMaterial.prototype.constructor=THREE.MeshDepthMaterial,THREE.MeshDepthMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.depthPacking=e.depthPacking,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},THREE.MeshLambertMaterial=function(e){THREE.Material.call(this),this.type="MeshLambertMaterial",this.color=new THREE.Color(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new THREE.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)},THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshLambertMaterial.prototype.constructor=THREE.MeshLambertMaterial,THREE.MeshLambertMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},THREE.MeshNormalMaterial=function(e){THREE.Material.call(this,e),this.type="MeshNormalMaterial",this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.morphTargets=!1,this.setValues(e)},THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshNormalMaterial.prototype.constructor=THREE.MeshNormalMaterial,THREE.MeshNormalMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this},THREE.MeshPhongMaterial=function(e){THREE.Material.call(this),this.type="MeshPhongMaterial",this.color=new THREE.Color(16777215),this.specular=new THREE.Color(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new THREE.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new THREE.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=THREE.MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)},THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshPhongMaterial.prototype.constructor=THREE.MeshPhongMaterial,THREE.MeshPhongMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},THREE.MeshStandardMaterial=function(e){THREE.Material.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new THREE.Color(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new THREE.Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new THREE.Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(e)},THREE.MeshStandardMaterial.prototype=Object.create(THREE.Material.prototype),THREE.MeshStandardMaterial.prototype.constructor=THREE.MeshStandardMaterial,THREE.MeshStandardMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this},THREE.MeshPhysicalMaterial=function(e){THREE.MeshStandardMaterial.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(e)},THREE.MeshPhysicalMaterial.prototype=Object.create(THREE.MeshStandardMaterial.prototype),THREE.MeshPhysicalMaterial.prototype.constructor=THREE.MeshPhysicalMaterial,THREE.MeshPhysicalMaterial.prototype.copy=function(e){return THREE.MeshStandardMaterial.prototype.copy.call(this,e),this.defines={PHYSICAL:""},this.reflectivity=e.reflectivity,this.clearCoat=e.clearCoat,this.clearCoatRoughness=e.clearCoatRoughness,this},THREE.MultiMaterial=function(e){this.uuid=THREE.Math.generateUUID(),this.type="MultiMaterial",this.materials=e instanceof Array?e:[],this.visible=!0},THREE.MultiMaterial.prototype={constructor:THREE.MultiMaterial,toJSON:function(e){for(var r={metadata:{version:4.2,type:"material",generator:"MaterialExporter"},uuid:this.uuid,type:this.type,materials:[]},t=this.materials,n=0,i=t.length;i>n;n++){var a=t[n].toJSON(e);delete a.metadata,r.materials.push(a)}return r.visible=this.visible,r},clone:function(){for(var e=new this.constructor,r=0;r<this.materials.length;r++)e.materials.push(this.materials[r].clone());return e.visible=this.visible,e}},THREE.PointsMaterial=function(e){THREE.Material.call(this),this.type="PointsMaterial",this.color=new THREE.Color(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.lights=!1,this.setValues(e)},THREE.PointsMaterial.prototype=Object.create(THREE.Material.prototype),THREE.PointsMaterial.prototype.constructor=THREE.PointsMaterial,THREE.PointsMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this},THREE.ShaderMaterial=function(e){THREE.Material.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,void 0!==e&&(void 0!==e.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(e))},THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype),THREE.ShaderMaterial.prototype.constructor=THREE.ShaderMaterial,THREE.ShaderMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=THREE.UniformsUtils.clone(e.uniforms),this.defines=e.defines,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.lights=e.lights,this.clipping=e.clipping,this.skinning=e.skinning,this.morphTargets=e.morphTargets,this.morphNormals=e.morphNormals,this.extensions=e.extensions,this},THREE.ShaderMaterial.prototype.toJSON=function(e){var r=THREE.Material.prototype.toJSON.call(this,e);return r.uniforms=this.uniforms,r.vertexShader=this.vertexShader,r.fragmentShader=this.fragmentShader,r},THREE.RawShaderMaterial=function(e){THREE.ShaderMaterial.call(this,e),this.type="RawShaderMaterial"},THREE.RawShaderMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.RawShaderMaterial.prototype.constructor=THREE.RawShaderMaterial,THREE.SpriteMaterial=function(e){THREE.Material.call(this),this.type="SpriteMaterial",this.color=new THREE.Color(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(e)},THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype),THREE.SpriteMaterial.prototype.constructor=THREE.SpriteMaterial,THREE.SpriteMaterial.prototype.copy=function(e){return THREE.Material.prototype.copy.call(this,e),this.color.copy(e.color),this.map=e.map,this.rotation=e.rotation,this},THREE.ShadowMaterial=function(){THREE.ShaderMaterial.call(this,{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.lights,{opacity:{value:1}}]),vertexShader:THREE.ShaderChunk.shadow_vert,fragmentShader:THREE.ShaderChunk.shadow_frag}),this.lights=!0,this.transparent=!0,Object.defineProperties(this,{opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(e){this.uniforms.opacity.value=e}}})},THREE.ShadowMaterial.prototype=Object.create(THREE.ShaderMaterial.prototype),THREE.ShadowMaterial.prototype.constructor=THREE.ShadowMaterial,THREE.Texture=function(e,r,t,n,i,a,o,s,c,l){Object.defineProperty(this,"id",{value:THREE.TextureIdCount++}),this.uuid=THREE.Math.generateUUID(),this.name="",this.sourceFile="",this.image=void 0!==e?e:THREE.Texture.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==r?r:THREE.Texture.DEFAULT_MAPPING,this.wrapS=void 0!==t?t:THREE.ClampToEdgeWrapping,this.wrapT=void 0!==n?n:THREE.ClampToEdgeWrapping,this.magFilter=void 0!==i?i:THREE.LinearFilter,this.minFilter=void 0!==a?a:THREE.LinearMipMapLinearFilter,this.anisotropy=void 0!==c?c:1,this.format=void 0!==o?o:THREE.RGBAFormat,this.type=void 0!==s?s:THREE.UnsignedByteType,this.offset=new THREE.Vector2(0,0),this.repeat=new THREE.Vector2(1,1),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==l?l:THREE.LinearEncoding,this.version=0,this.onUpdate=null},THREE.Texture.DEFAULT_IMAGE=void 0,THREE.Texture.DEFAULT_MAPPING=THREE.UVMapping,THREE.Texture.prototype={constructor:THREE.Texture,set needsUpdate(e){e===!0&&this.version++},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.image=e.image,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.encoding=e.encoding,this},toJSON:function(e){function r(e){var r;return void 0!==e.toDataURL?r=e:(r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),r.width=e.width,r.height=e.height,r.getContext("2d").drawImage(e,0,0,e.width,e.height)),r.width>2048||r.height>2048?r.toDataURL("image/jpeg",.6):r.toDataURL("image/png")}if(void 0!==e.textures[this.uuid])return e.textures[this.uuid];var t={metadata:{version:4.4,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy};if(void 0!==this.image){var n=this.image;void 0===n.uuid&&(n.uuid=THREE.Math.generateUUID()),void 0===e.images[n.uuid]&&(e.images[n.uuid]={uuid:n.uuid,url:r(n)}),t.image=n.uuid}return e.textures[this.uuid]=t,t},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(e){if(this.mapping===THREE.UVMapping){if(e.multiply(this.repeat),e.add(this.offset),e.x<0||e.x>1)switch(this.wrapS){case THREE.RepeatWrapping:e.x=e.x-Math.floor(e.x);break;case THREE.ClampToEdgeWrapping:e.x=e.x<0?0:1;break;case THREE.MirroredRepeatWrapping:1===Math.abs(Math.floor(e.x)%2)?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x)}if(e.y<0||e.y>1)switch(this.wrapT){case THREE.RepeatWrapping:e.y=e.y-Math.floor(e.y);break;case THREE.ClampToEdgeWrapping:e.y=e.y<0?0:1;break;case THREE.MirroredRepeatWrapping:1===Math.abs(Math.floor(e.y)%2)?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y)}this.flipY&&(e.y=1-e.y)}}},Object.assign(THREE.Texture.prototype,THREE.EventDispatcher.prototype),THREE.TextureIdCount=0,THREE.DepthTexture=function(e,r,t,n,i,a,o,s,c){THREE.Texture.call(this,null,n,i,a,o,s,THREE.DepthFormat,t,c),this.image={width:e,height:r},this.type=void 0!==t?t:THREE.UnsignedShortType,this.magFilter=void 0!==o?o:THREE.NearestFilter,this.minFilter=void 0!==s?s:THREE.NearestFilter,this.flipY=!1,this.generateMipmaps=!1},THREE.DepthTexture.prototype=Object.create(THREE.Texture.prototype),THREE.DepthTexture.prototype.constructor=THREE.DepthTexture,THREE.CanvasTexture=function(e,r,t,n,i,a,o,s,c){THREE.Texture.call(this,e,r,t,n,i,a,o,s,c),this.needsUpdate=!0},THREE.CanvasTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CanvasTexture.prototype.constructor=THREE.CanvasTexture,THREE.CubeTexture=function(e,r,t,n,i,a,o,s,c,l){e=void 0!==e?e:[],r=void 0!==r?r:THREE.CubeReflectionMapping,THREE.Texture.call(this,e,r,t,n,i,a,o,s,c,l),this.flipY=!1},THREE.CubeTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CubeTexture.prototype.constructor=THREE.CubeTexture,Object.defineProperty(THREE.CubeTexture.prototype,"images",{get:function(){return this.image},set:function(e){this.image=e}}),THREE.CompressedTexture=function(e,r,t,n,i,a,o,s,c,l,h,d){THREE.Texture.call(this,null,a,o,s,c,l,n,i,h,d),this.image={width:r,height:t},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1},THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype),THREE.CompressedTexture.prototype.constructor=THREE.CompressedTexture,THREE.DataTexture=function(e,r,t,n,i,a,o,s,c,l,h,d){THREE.Texture.call(this,null,a,o,s,c,l,n,i,h,d),this.image={data:e,width:r,height:t},this.magFilter=void 0!==c?c:THREE.NearestFilter,this.minFilter=void 0!==l?l:THREE.NearestFilter,this.flipY=!1,this.generateMipmaps=!1},THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype),THREE.DataTexture.prototype.constructor=THREE.DataTexture,THREE.VideoTexture=function(e,r,t,n,i,a,o,s,c){function l(){requestAnimationFrame(l),e.readyState>=e.HAVE_CURRENT_DATA&&(h.needsUpdate=!0)}THREE.Texture.call(this,e,r,t,n,i,a,o,s,c),this.generateMipmaps=!1;var h=this;l()},THREE.VideoTexture.prototype=Object.create(THREE.Texture.prototype),THREE.VideoTexture.prototype.constructor=THREE.VideoTexture,THREE.Group=function(){THREE.Object3D.call(this),this.type="Group"},THREE.Group.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Group}),THREE.Points=function(e,r){THREE.Object3D.call(this),this.type="Points",this.geometry=void 0!==e?e:new THREE.BufferGeometry,this.material=void 0!==r?r:new THREE.PointsMaterial({color:16777215*Math.random()})},THREE.Points.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Points,raycast:function(){var e=new THREE.Matrix4,r=new THREE.Ray,t=new THREE.Sphere;return function(n,i){function a(e,t){var a=r.distanceSqToPoint(e);if(d>a){var s=r.closestPointToPoint(e);s.applyMatrix4(c);var l=n.ray.origin.distanceTo(s);if(l<n.near||l>n.far)return;i.push({distance:l,distanceToRay:Math.sqrt(a),point:s.clone(),index:t,face:null,object:o})}}var o=this,s=this.geometry,c=this.matrixWorld,l=n.params.Points.threshold;if(null===s.boundingSphere&&s.computeBoundingSphere(),t.copy(s.boundingSphere),t.applyMatrix4(c),n.ray.intersectsSphere(t)!==!1){e.getInverse(c),r.copy(n.ray).applyMatrix4(e);var h=l/((this.scale.x+this.scale.y+this.scale.z)/3),d=h*h,u=new THREE.Vector3;if(s instanceof THREE.BufferGeometry){var p=s.index,f=s.attributes,m=f.position.array;if(null!==p)for(var E=p.array,g=0,v=E.length;v>g;g++){var T=E[g];u.fromArray(m,3*T),a(u,T)}else for(var g=0,_=m.length/3;_>g;g++)u.fromArray(m,3*g),a(u,g)}else for(var y=s.vertices,g=0,_=y.length;_>g;g++)a(y[g],g)}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),THREE.Line=function(e,r,t){return 1===t?(console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new THREE.LineSegments(e,r)):(THREE.Object3D.call(this),this.type="Line",this.geometry=void 0!==e?e:new THREE.BufferGeometry,void(this.material=void 0!==r?r:new THREE.LineBasicMaterial({color:16777215*Math.random()})))},THREE.Line.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Line,raycast:function(){var e=new THREE.Matrix4,r=new THREE.Ray,t=new THREE.Sphere;return function(n,i){var a=n.linePrecision,o=a*a,s=this.geometry,c=this.matrixWorld;if(null===s.boundingSphere&&s.computeBoundingSphere(),t.copy(s.boundingSphere),t.applyMatrix4(c),n.ray.intersectsSphere(t)!==!1){e.getInverse(c),r.copy(n.ray).applyMatrix4(e);var l=new THREE.Vector3,h=new THREE.Vector3,d=new THREE.Vector3,u=new THREE.Vector3,p=this instanceof THREE.LineSegments?2:1;if(s instanceof THREE.BufferGeometry){var f=s.index,m=s.attributes,E=m.position.array;if(null!==f)for(var g=f.array,v=0,T=g.length-1;T>v;v+=p){var _=g[v],y=g[v+1];l.fromArray(E,3*_),h.fromArray(E,3*y);var x=r.distanceSqToSegment(l,h,u,d);if(!(x>o)){u.applyMatrix4(this.matrixWorld);var R=n.ray.origin.distanceTo(u);R<n.near||R>n.far||i.push({distance:R,point:d.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}else for(var v=0,T=E.length/3-1;T>v;v+=p){l.fromArray(E,3*v),h.fromArray(E,3*v+3);var x=r.distanceSqToSegment(l,h,u,d);if(!(x>o)){u.applyMatrix4(this.matrixWorld);var R=n.ray.origin.distanceTo(u);R<n.near||R>n.far||i.push({distance:R,point:d.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}}else if(s instanceof THREE.Geometry)for(var b=s.vertices,H=b.length,v=0;H-1>v;v+=p){var x=r.distanceSqToSegment(b[v],b[v+1],u,d);if(!(x>o)){u.applyMatrix4(this.matrixWorld);var R=n.ray.origin.distanceTo(u);R<n.near||R>n.far||i.push({distance:R,point:d.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),THREE.LineSegments=function(e,r){THREE.Line.call(this,e,r),this.type="LineSegments"},THREE.LineSegments.prototype=Object.assign(Object.create(THREE.Line.prototype),{constructor:THREE.LineSegments}),THREE.Mesh=function(e,r){THREE.Object3D.call(this),this.type="Mesh",this.geometry=void 0!==e?e:new THREE.BufferGeometry,this.material=void 0!==r?r:new THREE.MeshBasicMaterial({color:16777215*Math.random()}),this.drawMode=THREE.TrianglesDrawMode,this.updateMorphTargets()},THREE.Mesh.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Mesh,setDrawMode:function(e){this.drawMode=e},copy:function(e){return THREE.Object3D.prototype.copy.call(this,e),this.drawMode=e.drawMode,this},updateMorphTargets:function(){if(void 0!==this.geometry.morphTargets&&this.geometry.morphTargets.length>0){this.morphTargetBase=-1,this.morphTargetInfluences=[],this.morphTargetDictionary={};for(var e=0,r=this.geometry.morphTargets.length;r>e;e++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[e].name]=e}},getMorphTargetIndexByName:function(e){return void 0!==this.morphTargetDictionary[e]?this.morphTargetDictionary[e]:(console.warn("THREE.Mesh.getMorphTargetIndexByName: morph target "+e+" does not exist. Returning 0."),0)},raycast:function(){function e(e,r,t,n,i,a,o){return THREE.Triangle.barycoordFromPoint(e,r,t,n,m),i.multiplyScalar(m.x),a.multiplyScalar(m.y),o.multiplyScalar(m.z),i.add(a).add(o),i.clone()}function r(e,r,t,n,i,a,o){var s,c=e.material;if(s=c.side===THREE.BackSide?t.intersectTriangle(a,i,n,!0,o):t.intersectTriangle(n,i,a,c.side!==THREE.DoubleSide,o),null===s)return null;g.copy(o),g.applyMatrix4(e.matrixWorld);var l=r.ray.origin.distanceTo(g);return l<r.near||l>r.far?null:{distance:l,point:g.clone(),object:e}}function t(t,n,i,a,l,h,d,m){o.fromArray(a,3*h),s.fromArray(a,3*d),c.fromArray(a,3*m);var g=r(t,n,i,o,s,c,E);return g&&(l&&(u.fromArray(l,2*h),p.fromArray(l,2*d),f.fromArray(l,2*m),g.uv=e(E,o,s,c,u,p,f)),g.face=new THREE.Face3(h,d,m,THREE.Triangle.normal(o,s,c)),g.faceIndex=h),g}var n=new THREE.Matrix4,i=new THREE.Ray,a=new THREE.Sphere,o=new THREE.Vector3,s=new THREE.Vector3,c=new THREE.Vector3,l=new THREE.Vector3,h=new THREE.Vector3,d=new THREE.Vector3,u=new THREE.Vector2,p=new THREE.Vector2,f=new THREE.Vector2,m=new THREE.Vector3,E=new THREE.Vector3,g=new THREE.Vector3;return function(m,g){var v=this.geometry,T=this.material,_=this.matrixWorld;if(void 0!==T&&(null===v.boundingSphere&&v.computeBoundingSphere(),a.copy(v.boundingSphere),a.applyMatrix4(_),m.ray.intersectsSphere(a)!==!1&&(n.getInverse(_),i.copy(m.ray).applyMatrix4(n),null===v.boundingBox||i.intersectsBox(v.boundingBox)!==!1))){var y,x;if(v instanceof THREE.BufferGeometry){var R,b,H,M=v.index,S=v.attributes,w=S.position.array;if(void 0!==S.uv&&(y=S.uv.array),null!==M)for(var L=M.array,C=0,P=L.length;P>C;C+=3)R=L[C],b=L[C+1],H=L[C+2],x=t(this,m,i,w,y,R,b,H),x&&(x.faceIndex=Math.floor(C/3),g.push(x));else for(var C=0,P=w.length;P>C;C+=9)R=C/3,b=R+1,H=R+2,x=t(this,m,i,w,y,R,b,H),
x&&(x.index=R,g.push(x))}else if(v instanceof THREE.Geometry){var A,D,I,U=T instanceof THREE.MultiMaterial,N=U===!0?T.materials:null,O=v.vertices,B=v.faces,F=v.faceVertexUvs[0];F.length>0&&(y=F);for(var G=0,V=B.length;V>G;G++){var z=B[G],k=U===!0?N[z.materialIndex]:T;if(void 0!==k){if(A=O[z.a],D=O[z.b],I=O[z.c],k.morphTargets===!0){var j=v.morphTargets,W=this.morphTargetInfluences;o.set(0,0,0),s.set(0,0,0),c.set(0,0,0);for(var X=0,Y=j.length;Y>X;X++){var q=W[X];if(0!==q){var Z=j[X].vertices;o.addScaledVector(l.subVectors(Z[z.a],A),q),s.addScaledVector(h.subVectors(Z[z.b],D),q),c.addScaledVector(d.subVectors(Z[z.c],I),q)}}o.add(A),s.add(D),c.add(I),A=o,D=s,I=c}if(x=r(this,m,i,A,D,I,E)){if(y){var K=y[G];u.copy(K[0]),p.copy(K[1]),f.copy(K[2]),x.uv=e(E,A,D,I,u,p,f)}x.face=z,x.faceIndex=G,g.push(x)}}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),THREE.Bone=function(e){THREE.Object3D.call(this),this.type="Bone",this.skin=e},THREE.Bone.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Bone,copy:function(e){return THREE.Object3D.prototype.copy.call(this,e),this.skin=e.skin,this}}),THREE.Skeleton=function(e,r,t){if(this.useVertexTexture=void 0!==t?t:!0,this.identityMatrix=new THREE.Matrix4,e=e||[],this.bones=e.slice(0),this.useVertexTexture){var n=Math.sqrt(4*this.bones.length);n=THREE.Math.nextPowerOfTwo(Math.ceil(n)),n=Math.max(n,4),this.boneTextureWidth=n,this.boneTextureHeight=n,this.boneMatrices=new Float32Array(this.boneTextureWidth*this.boneTextureHeight*4),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType)}else this.boneMatrices=new Float32Array(16*this.bones.length);if(void 0===r)this.calculateInverses();else if(this.bones.length===r.length)this.boneInverses=r.slice(0);else{console.warn("THREE.Skeleton bonInverses is the wrong length."),this.boneInverses=[];for(var i=0,a=this.bones.length;a>i;i++)this.boneInverses.push(new THREE.Matrix4)}},Object.assign(THREE.Skeleton.prototype,{calculateInverses:function(){this.boneInverses=[];for(var e=0,r=this.bones.length;r>e;e++){var t=new THREE.Matrix4;this.bones[e]&&t.getInverse(this.bones[e].matrixWorld),this.boneInverses.push(t)}},pose:function(){for(var e,r=0,t=this.bones.length;t>r;r++)e=this.bones[r],e&&e.matrixWorld.getInverse(this.boneInverses[r]);for(var r=0,t=this.bones.length;t>r;r++)e=this.bones[r],e&&(e.parent instanceof THREE.Bone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))},update:function(){var e=new THREE.Matrix4;return function(){for(var r=0,t=this.bones.length;t>r;r++){var n=this.bones[r]?this.bones[r].matrixWorld:this.identityMatrix;e.multiplyMatrices(n,this.boneInverses[r]),e.toArray(this.boneMatrices,16*r)}this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)}}(),clone:function(){return new THREE.Skeleton(this.bones,this.boneInverses,this.useVertexTexture)}}),THREE.SkinnedMesh=function(e,r,t){THREE.Mesh.call(this,e,r),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new THREE.Matrix4,this.bindMatrixInverse=new THREE.Matrix4;var n=[];if(this.geometry&&void 0!==this.geometry.bones){for(var i,a,o=0,s=this.geometry.bones.length;s>o;++o)a=this.geometry.bones[o],i=new THREE.Bone(this),n.push(i),i.name=a.name,i.position.fromArray(a.pos),i.quaternion.fromArray(a.rotq),void 0!==a.scl&&i.scale.fromArray(a.scl);for(var o=0,s=this.geometry.bones.length;s>o;++o)a=this.geometry.bones[o],-1!==a.parent&&null!==a.parent&&void 0!==n[a.parent]?n[a.parent].add(n[o]):this.add(n[o])}this.normalizeSkinWeights(),this.updateMatrixWorld(!0),this.bind(new THREE.Skeleton(n,void 0,t),this.matrixWorld)},THREE.SkinnedMesh.prototype=Object.assign(Object.create(THREE.Mesh.prototype),{constructor:THREE.SkinnedMesh,bind:function(e,r){this.skeleton=e,void 0===r&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),r=this.matrixWorld),this.bindMatrix.copy(r),this.bindMatrixInverse.getInverse(r)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){if(this.geometry instanceof THREE.Geometry)for(var e=0;e<this.geometry.skinWeights.length;e++){var r=this.geometry.skinWeights[e],t=1/r.lengthManhattan();t!==1/0?r.multiplyScalar(t):r.set(1,0,0,0)}else if(this.geometry instanceof THREE.BufferGeometry)for(var n=new THREE.Vector4,i=this.geometry.attributes.skinWeight,e=0;e<i.count;e++){n.x=i.getX(e),n.y=i.getY(e),n.z=i.getZ(e),n.w=i.getW(e);var t=1/n.lengthManhattan();t!==1/0?n.multiplyScalar(t):n.set(1,0,0,0),i.setXYZW(e,n.x,n.y,n.z,n.w)}},updateMatrixWorld:function(e){THREE.Mesh.prototype.updateMatrixWorld.call(this,!0),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material,this.skeleton.useVertexTexture).copy(this)}}),THREE.LOD=function(){THREE.Object3D.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})},THREE.LOD.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LOD,copy:function(e){THREE.Object3D.prototype.copy.call(this,e,!1);for(var r=e.levels,t=0,n=r.length;n>t;t++){var i=r[t];this.addLevel(i.object.clone(),i.distance)}return this},addLevel:function(e,r){void 0===r&&(r=0),r=Math.abs(r);for(var t=this.levels,n=0;n<t.length&&!(r<t[n].distance);n++);t.splice(n,0,{distance:r,object:e}),this.add(e)},getObjectForDistance:function(e){for(var r=this.levels,t=1,n=r.length;n>t&&!(e<r[t].distance);t++);return r[t-1].object},raycast:function(){var e=new THREE.Vector3;return function(r,t){e.setFromMatrixPosition(this.matrixWorld);var n=r.ray.origin.distanceTo(e);this.getObjectForDistance(n).raycast(r,t)}}(),update:function(){var e=new THREE.Vector3,r=new THREE.Vector3;return function(t){var n=this.levels;if(n.length>1){e.setFromMatrixPosition(t.matrixWorld),r.setFromMatrixPosition(this.matrixWorld);var i=e.distanceTo(r);n[0].object.visible=!0;for(var a=1,o=n.length;o>a&&i>=n[a].distance;a++)n[a-1].object.visible=!1,n[a].object.visible=!0;for(;o>a;a++)n[a].object.visible=!1}}}(),toJSON:function(e){var r=THREE.Object3D.prototype.toJSON.call(this,e);r.object.levels=[];for(var t=this.levels,n=0,i=t.length;i>n;n++){var a=t[n];r.object.levels.push({object:a.object.uuid,distance:a.distance})}return r}}),THREE.Sprite=function(e){THREE.Object3D.call(this),this.type="Sprite",this.material=void 0!==e?e:new THREE.SpriteMaterial},THREE.Sprite.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.Sprite,raycast:function(){var e=new THREE.Vector3;return function(r,t){e.setFromMatrixPosition(this.matrixWorld);var n=r.ray.distanceSqToPoint(e),i=this.scale.x*this.scale.y/4;n>i||t.push({distance:Math.sqrt(n),point:this.position,face:null,object:this})}}(),clone:function(){return new this.constructor(this.material).copy(this)}}),THREE.LensFlare=function(e,r,t,n,i){THREE.Object3D.call(this),this.lensFlares=[],this.positionScreen=new THREE.Vector3,this.customUpdateCallback=void 0,void 0!==e&&this.add(e,r,t,n,i)},THREE.LensFlare.prototype=Object.assign(Object.create(THREE.Object3D.prototype),{constructor:THREE.LensFlare,copy:function(e){THREE.Object3D.prototype.copy.call(this,e),this.positionScreen.copy(e.positionScreen),this.customUpdateCallback=e.customUpdateCallback;for(var r=0,t=e.lensFlares.length;t>r;r++)this.lensFlares.push(e.lensFlares[r]);return this},add:function(e,r,t,n,i,a){void 0===r&&(r=-1),void 0===t&&(t=0),void 0===a&&(a=1),void 0===i&&(i=new THREE.Color(16777215)),void 0===n&&(n=THREE.NormalBlending),t=Math.min(t,Math.max(0,t)),this.lensFlares.push({texture:e,size:r,distance:t,x:0,y:0,z:0,scale:1,rotation:0,opacity:a,color:i,blending:n})},updateLensFlares:function(){var e,r,t=this.lensFlares.length,n=2*-this.positionScreen.x,i=2*-this.positionScreen.y;for(e=0;t>e;e++)r=this.lensFlares[e],r.x=this.positionScreen.x+n*r.distance,r.y=this.positionScreen.y+i*r.distance,r.wantedRotation=r.x*Math.PI*.25,r.rotation+=.25*(r.wantedRotation-r.rotation)}}),THREE.Scene=function(){THREE.Object3D.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0},THREE.Scene.prototype=Object.create(THREE.Object3D.prototype),THREE.Scene.prototype.constructor=THREE.Scene,THREE.Scene.prototype.copy=function(e,r){return THREE.Object3D.prototype.copy.call(this,e,r),null!==e.background&&(this.background=e.background.clone()),null!==e.fog&&(this.fog=e.fog.clone()),null!==e.overrideMaterial&&(this.overrideMaterial=e.overrideMaterial.clone()),this.autoUpdate=e.autoUpdate,this.matrixAutoUpdate=e.matrixAutoUpdate,this},THREE.Fog=function(e,r,t){this.name="",this.color=new THREE.Color(e),this.near=void 0!==r?r:1,this.far=void 0!==t?t:1e3},THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)},THREE.FogExp2=function(e,r){this.name="",this.color=new THREE.Color(e),this.density=void 0!==r?r:25e-5},THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)},THREE.ShaderChunk={},THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\r\n\r\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\r\n\r\n#endif\r\n",THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\r\n\r\n	uniform sampler2D alphaMap;\r\n\r\n#endif\r\n",THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\r\n\r\n	if ( diffuseColor.a < ALPHATEST ) discard;\r\n\r\n#endif\r\n",THREE.ShaderChunk.aomap_fragment="#ifdef USE_AOMAP\r\n\r\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\r\n\r\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\r\n\r\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL )\r\n\r\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n\r\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.aomap_pars_fragment="#ifdef USE_AOMAP\r\n\r\n	uniform sampler2D aoMap;\r\n	uniform float aoMapIntensity;\r\n\r\n#endif",THREE.ShaderChunk.begin_vertex="\r\nvec3 transformed = vec3( position );\r\n",THREE.ShaderChunk.beginnormal_vertex="\r\nvec3 objectNormal = vec3( normal );\r\n",THREE.ShaderChunk.bsdfs='bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\r\n\r\n	return any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\r\n\r\n}\r\n\r\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\r\n\r\n		if( decayExponent > 0.0 ) {\r\n\r\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\r\n\r\n			// based upon Frostbite 3 Moving to Physically-based Rendering\r\n			// page 32, equation 26: E[window1]\r\n			// http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr_v2.pdf\r\n			// this is intended to be used on spot and point lights who are represented as luminous intensity\r\n			// but who must be converted to luminous irradiance for surface lighting calculation\r\n			float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\r\n			float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\r\n			return distanceFalloff * maxDistanceCutoffFactor;\r\n\r\n#else\r\n\r\n			return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\r\n\r\n#endif\r\n\r\n		}\r\n\r\n		return 1.0;\r\n}\r\n\r\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\r\n\r\n	return RECIPROCAL_PI * diffuseColor;\r\n\r\n} // validated\r\n\r\n\r\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\r\n\r\n	// Original approximation by Christophe Schlick \'94\r\n	//;float fresnel = pow( 1.0 - dotLH, 5.0 );\r\n\r\n	// Optimized variant (presented by Epic at SIGGRAPH \'13)\r\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\r\n\r\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\r\n\r\n} // validated\r\n\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is "roughness squared" in Disney’s reparameterization\r\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\r\n\r\n	// geometry term = G(l)⋅G(v) / 4(n⋅l)(n⋅v)\r\n\r\n	float a2 = pow2( alpha );\r\n\r\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\r\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\r\n\r\n	return 1.0 / ( gl * gv );\r\n\r\n} // validated\r\n\r\n// from page 12, listing 2 of http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr_v2.pdf\r\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\r\n\r\n	float a2 = pow2( alpha );\r\n\r\n	// dotNL and dotNV are explicitly swapped. This is not a mistake.\r\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\r\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\r\n\r\n	return 0.5 / max( gv + gl, EPSILON );\r\n}\r\n\r\n\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is "roughness squared" in Disney’s reparameterization\r\nfloat D_GGX( const in float alpha, const in float dotNH ) {\r\n\r\n	float a2 = pow2( alpha );\r\n\r\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\r\n\r\n	return RECIPROCAL_PI * a2 / pow2( denom );\r\n\r\n}\r\n\r\n\r\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\r\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\r\n\r\n	float alpha = pow2( roughness ); // UE4\'s roughness\r\n\r\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\r\n\r\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\r\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\r\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\r\n\r\n	vec3 F = F_Schlick( specularColor, dotLH );\r\n\r\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\r\n\r\n	float D = D_GGX( alpha, dotNH );\r\n\r\n	return F * ( G * D );\r\n\r\n} // validated\r\n\r\n\r\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\r\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\r\n\r\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n\r\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\r\n\r\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\r\n\r\n	vec4 r = roughness * c0 + c1;\r\n\r\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\r\n\r\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\r\n\r\n	return specularColor * AB.x + AB.y;\r\n\r\n} // validated\r\n\r\n\r\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\r\n\r\n	// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\r\n	return 0.25;\r\n\r\n}\r\n\r\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\r\n\r\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\r\n\r\n}\r\n\r\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\r\n\r\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\r\n\r\n	//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\r\n	//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\r\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\r\n\r\n	vec3 F = F_Schlick( specularColor, dotLH );\r\n\r\n	float G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\r\n\r\n	float D = D_BlinnPhong( shininess, dotNH );\r\n\r\n	return F * ( G * D );\r\n\r\n} // validated\r\n\r\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\r\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\r\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\r\n}\r\n\r\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\r\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\r\n}\r\n',THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\r\n\r\n	uniform sampler2D bumpMap;\r\n	uniform float bumpScale;\r\n\r\n	// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\r\n	// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\r\n\r\n	// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\n	vec2 dHdxy_fwd() {\r\n\r\n		vec2 dSTdx = dFdx( vUv );\r\n		vec2 dSTdy = dFdy( vUv );\r\n\r\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\r\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\r\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\r\n\r\n		return vec2( dBx, dBy );\r\n\r\n	}\r\n\r\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\r\n\r\n		vec3 vSigmaX = dFdx( surf_pos );\r\n		vec3 vSigmaY = dFdy( surf_pos );\r\n		vec3 vN = surf_norm;		// normalized\r\n\r\n		vec3 R1 = cross( vSigmaY, vN );\r\n		vec3 R2 = cross( vN, vSigmaX );\r\n\r\n		float fDet = dot( vSigmaX, R1 );\r\n\r\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\r\n		return normalize( abs( fDet ) * surf_norm - vGrad );\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\r\n\r\n	for ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\r\n\r\n		vec4 plane = clippingPlanes[ i ];\r\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\r\n\r\n	#if ! defined( PHYSICAL ) && ! defined( PHONG )\r\n		varying vec3 vViewPosition;\r\n	#endif\r\n\r\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\r\n\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\r\n	varying vec3 vViewPosition;\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\r\n	vViewPosition = - mvPosition.xyz;\r\n#endif\r\n\r\n",THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\r\n\r\n	diffuseColor.rgb *= vColor;\r\n\r\n#endif",THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\r\n\r\n	varying vec3 vColor;\r\n\r\n#endif\r\n",THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\r\n\r\n	varying vec3 vColor;\r\n\r\n#endif",THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\r\n\r\n	vColor.xyz = color.xyz;\r\n\r\n#endif",THREE.ShaderChunk.common="#define PI 3.14159265359\r\n#define PI2 6.28318530718\r\n#define RECIPROCAL_PI 0.31830988618\r\n#define RECIPROCAL_PI2 0.15915494\r\n#define LOG2 1.442695\r\n#define EPSILON 1e-6\r\n\r\n#define saturate(a) clamp( a, 0.0, 1.0 )\r\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\r\n\r\nfloat pow2( const in float x ) { return x*x; }\r\nfloat pow3( const in float x ) { return x*x*x; }\r\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\r\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\r\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\r\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\r\nhighp float rand( const in vec2 uv ) {\r\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\r\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\r\n	return fract(sin(sn) * c);\r\n}\r\n\r\nstruct IncidentLight {\r\n	vec3 color;\r\n	vec3 direction;\r\n	bool visible;\r\n};\r\n\r\nstruct ReflectedLight {\r\n	vec3 directDiffuse;\r\n	vec3 directSpecular;\r\n	vec3 indirectDiffuse;\r\n	vec3 indirectSpecular;\r\n};\r\n\r\nstruct GeometricContext {\r\n	vec3 position;\r\n	vec3 normal;\r\n	vec3 viewDir;\r\n};\r\n\r\n\r\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\r\n\r\n}\r\n\r\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\r\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\r\n\r\n}\r\n\r\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\r\n	float distance = dot( planeNormal, point - pointOnPlane );\r\n\r\n	return - distance * planeNormal + point;\r\n\r\n}\r\n\r\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\r\n	return sign( dot( point - pointOnPlane, planeNormal ) );\r\n\r\n}\r\n\r\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\r\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\r\n\r\n}\r\n",THREE.ShaderChunk.cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\r\n\r\n#define cubeUV_textureSize (1024.0)\r\n\r\nint getFaceFromDirection(vec3 direction) {\r\n	vec3 absDirection = abs(direction);\r\n	int face = -1;\r\n	if( absDirection.x > absDirection.z ) {\r\n		if(absDirection.x > absDirection.y )\r\n			face = direction.x > 0.0 ? 0 : 3;\r\n		else\r\n			face = direction.y > 0.0 ? 1 : 4;\r\n	}\r\n	else {\r\n		if(absDirection.z > absDirection.y )\r\n			face = direction.z > 0.0 ? 2 : 5;\r\n		else\r\n			face = direction.y > 0.0 ? 1 : 4;\r\n	}\r\n	return face;\r\n}\r\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\r\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\r\n\r\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\r\n	float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\r\n	float dxRoughness = dFdx(roughness);\r\n	float dyRoughness = dFdy(roughness);\r\n	vec3 dx = dFdx( vec * scale * dxRoughness );\r\n	vec3 dy = dFdy( vec * scale * dyRoughness );\r\n	float d = max( dot( dx, dx ), dot( dy, dy ) );\r\n	// Clamp the value to the max mip level counts. hard coded to 6 mips\r\n	d = clamp(d, 1.0, cubeUV_rangeClamp);\r\n	float mipLevel = 0.5 * log2(d);\r\n	return vec2(floor(mipLevel), fract(mipLevel));\r\n}\r\n\r\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\r\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\r\n\r\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\r\n	mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\r\n	float a = 16.0 * cubeUV_rcpTextureSize;\r\n\r\n	vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\r\n	vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\r\n	// float powScale = exp2(roughnessLevel + mipLevel);\r\n	float powScale = exp2_packed.x * exp2_packed.y;\r\n	// float scale =  1.0 / exp2(roughnessLevel + 2.0 + mipLevel);\r\n	float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\r\n	// float mipOffset = 0.75*(1.0 - 1.0/exp2(mipLevel))/exp2(roughnessLevel);\r\n	float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\r\n\r\n	bool bRes = mipLevel == 0.0;\r\n	scale =  bRes && (scale < a) ? a : scale;\r\n\r\n	vec3 r;\r\n	vec2 offset;\r\n	int face = getFaceFromDirection(direction);\r\n\r\n	float rcpPowScale = 1.0 / powScale;\r\n\r\n	if( face == 0) {\r\n		r = vec3(direction.x, -direction.z, direction.y);\r\n		offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\r\n	}\r\n	else if( face == 1) {\r\n		r = vec3(direction.y, direction.x, direction.z);\r\n		offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\r\n	}\r\n	else if( face == 2) {\r\n		r = vec3(direction.z, direction.x, direction.y);\r\n		offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\r\n	}\r\n	else if( face == 3) {\r\n		r = vec3(direction.x, direction.z, direction.y);\r\n		offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\r\n	}\r\n	else if( face == 4) {\r\n		r = vec3(direction.y, direction.x, -direction.z);\r\n		offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\r\n	}\r\n	else {\r\n		r = vec3(direction.z, -direction.x, direction.y);\r\n		offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\r\n	}\r\n	r = normalize(r);\r\n	float texelOffset = 0.5 * cubeUV_rcpTextureSize;\r\n	vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\r\n	vec2 base = offset + vec2( texelOffset );\r\n	return base + s * ( scale - 2.0 * texelOffset );\r\n}\r\n\r\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\r\n\r\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\r\n	float roughnessVal = roughness* cubeUV_maxLods3;\r\n	float r1 = floor(roughnessVal);\r\n	float r2 = r1 + 1.0;\r\n	float t = fract(roughnessVal);\r\n	vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\r\n	float s = mipInfo.y;\r\n	float level0 = mipInfo.x;\r\n	float level1 = level0 + 1.0;\r\n	level1 = level1 > 5.0 ? 5.0 : level1;\r\n\r\n	// round to nearest mipmap if we are not interpolating.\r\n	level0 += min( floor( s + 0.5 ), 5.0 );\r\n\r\n	// Tri linear interpolation.\r\n	vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\r\n	vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\r\n\r\n	vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\r\n	vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\r\n\r\n	vec4 result = mix(color10, color20, t);\r\n\r\n	return vec4(result.rgb, 1.0);\r\n}\r\n\r\n#endif\r\n",THREE.ShaderChunk.defaultnormal_vertex="#ifdef FLIP_SIDED\r\n\r\n	objectNormal = -objectNormal;\r\n\r\n#endif\r\n\r\nvec3 transformedNormal = normalMatrix * objectNormal;\r\n",THREE.ShaderChunk.displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\r\n\r\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\r\n\r\n#endif\r\n",THREE.ShaderChunk.displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\r\n\r\n	uniform sampler2D displacementMap;\r\n	uniform float displacementScale;\r\n	uniform float displacementBias;\r\n\r\n#endif\r\n",THREE.ShaderChunk.emissivemap_fragment="#ifdef USE_EMISSIVEMAP\r\n\r\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\r\n\r\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\r\n\r\n	totalEmissiveRadiance *= emissiveColor.rgb;\r\n\r\n#endif\r\n",THREE.ShaderChunk.emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\r\n\r\n	uniform sampler2D emissiveMap;\r\n\r\n#endif\r\n",THREE.ShaderChunk.encodings_pars_fragment="// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\r\n\r\nvec4 LinearToLinear( in vec4 value ) {\r\n  return value;\r\n}\r\n\r\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\r\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\r\n}\r\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\r\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\r\n}\r\n\r\nvec4 sRGBToLinear( in vec4 value ) {\r\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\r\n}\r\nvec4 LinearTosRGB( in vec4 value ) {\r\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\r\n}\r\n\r\nvec4 RGBEToLinear( in vec4 value ) {\r\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\r\n}\r\nvec4 LinearToRGBE( in vec4 value ) {\r\n  float maxComponent = max( max( value.r, value.g ), value.b );\r\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\r\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\r\n//  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\r\n}\r\n\r\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\r\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\r\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\r\n}\r\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\r\n  float maxRGB = max( value.x, max( value.g, value.b ) );\r\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\r\n  M            = ceil( M * 255.0 ) / 255.0;\r\n  return vec4( value.rgb / ( M * maxRange ), M );\r\n}\r\n\r\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\r\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\r\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\r\n}\r\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\r\n    float maxRGB = max( value.x, max( value.g, value.b ) );\r\n    float D      = max( maxRange / maxRGB, 1.0 );\r\n    D            = min( floor( D ) / 255.0, 1.0 );\r\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\r\n}\r\n\r\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\r\n\r\n// M matrix, for encoding\r\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\r\nvec4 LinearToLogLuv( in vec4 value )  {\r\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\r\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\r\n  vec4 vResult;\r\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\r\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\r\n  vResult.w = fract(Le);\r\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\r\n  return vResult;\r\n}\r\n\r\n// Inverse M matrix, for decoding\r\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\r\nvec4 LogLuvToLinear( in vec4 value ) {\r\n  float Le = value.z * 255.0 + value.w;\r\n  vec3 Xp_Y_XYZp;\r\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\r\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\r\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\r\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\r\n  return vec4( max(vRGB, 0.0), 1.0 );\r\n}\r\n",THREE.ShaderChunk.encodings_fragment="  gl_FragColor = linearToOutputTexel( gl_FragColor );\r\n",THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n\r\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\r\n\r\n		// Transforming Normal Vectors with the Inverse Transformation\r\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\r\n\r\n		#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\r\n\r\n		#else\r\n\r\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\r\n\r\n		#endif\r\n\r\n	#else\r\n\r\n		vec3 reflectVec = vReflect;\r\n\r\n	#endif\r\n\r\n	#ifdef ENVMAP_TYPE_CUBE\r\n\r\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\r\n\r\n	#elif defined( ENVMAP_TYPE_EQUIREC )\r\n\r\n		vec2 sampleUV;\r\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\r\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\r\n		vec4 envColor = texture2D( envMap, sampleUV );\r\n\r\n	#elif defined( ENVMAP_TYPE_SPHERE )\r\n\r\n		vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\r\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\r\n\r\n	#endif\r\n\r\n	envColor = envMapTexelToLinear( envColor );\r\n\r\n	#ifdef ENVMAP_BLENDING_MULTIPLY\r\n\r\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\r\n\r\n	#elif defined( ENVMAP_BLENDING_MIX )\r\n\r\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\r\n\r\n	#elif defined( ENVMAP_BLENDING_ADD )\r\n\r\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\r\n\r\n	#endif\r\n\r\n#endif\r\n",
THREE.ShaderChunk.envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( PHYSICAL )\r\n	uniform float reflectivity;\r\n	uniform float envMapIntenstiy;\r\n#endif\r\n\r\n#ifdef USE_ENVMAP\r\n\r\n	#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\r\n		varying vec3 vWorldPosition;\r\n	#endif\r\n\r\n	#ifdef ENVMAP_TYPE_CUBE\r\n		uniform samplerCube envMap;\r\n	#else\r\n		uniform sampler2D envMap;\r\n	#endif\r\n	uniform float flipEnvMap;\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\r\n		uniform float refractionRatio;\r\n	#else\r\n		varying vec3 vReflect;\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.envmap_pars_vertex="#ifdef USE_ENVMAP\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n		varying vec3 vWorldPosition;\r\n\r\n	#else\r\n\r\n		varying vec3 vReflect;\r\n		uniform float refractionRatio;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.envmap_vertex="#ifdef USE_ENVMAP\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n\r\n		vWorldPosition = worldPosition.xyz;\r\n\r\n	#else\r\n\r\n		vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\r\n\r\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\r\n\r\n		#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n			vReflect = reflect( cameraToVertex, worldNormal );\r\n\r\n		#else\r\n\r\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\r\n\r\n		#endif\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\r\n\r\n	#else\r\n\r\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\r\n\r\n	#endif\r\n\r\n	#ifdef FOG_EXP2\r\n\r\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\r\n\r\n	#else\r\n\r\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\r\n\r\n	#endif\r\n\r\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\r\n\r\n#endif\r\n",THREE.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\r\n\r\n	uniform vec3 fogColor;\r\n\r\n	#ifdef FOG_EXP2\r\n\r\n		uniform float fogDensity;\r\n\r\n	#else\r\n\r\n		uniform float fogNear;\r\n		uniform float fogFar;\r\n	#endif\r\n\r\n#endif",THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\r\n\r\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\r\n\r\n#endif\r\n",THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\r\n\r\n	uniform sampler2D lightMap;\r\n	uniform float lightMapIntensity;\r\n\r\n#endif",THREE.ShaderChunk.lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\r\n\r\nGeometricContext geometry;\r\ngeometry.position = mvPosition.xyz;\r\ngeometry.normal = normalize( transformedNormal );\r\ngeometry.viewDir = normalize( -mvPosition.xyz );\r\n\r\nGeometricContext backGeometry;\r\nbackGeometry.position = geometry.position;\r\nbackGeometry.normal = -geometry.normal;\r\nbackGeometry.viewDir = geometry.viewDir;\r\n\r\nvLightFront = vec3( 0.0 );\r\n\r\n#ifdef DOUBLE_SIDED\r\n	vLightBack = vec3( 0.0 );\r\n#endif\r\n\r\nIncidentLight directLight;\r\nfloat dotNL;\r\nvec3 directLightColor_Diffuse;\r\n\r\n#if NUM_POINT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\r\n\r\n		dotNL = dot( geometry.normal, directLight.direction );\r\n		directLightColor_Diffuse = PI * directLight.color;\r\n\r\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if NUM_SPOT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\r\n\r\n		dotNL = dot( geometry.normal, directLight.direction );\r\n		directLightColor_Diffuse = PI * directLight.color;\r\n\r\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\r\n\r\n		#endif\r\n	}\r\n\r\n#endif\r\n\r\n#if NUM_DIR_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\r\n\r\n		dotNL = dot( geometry.normal, directLight.direction );\r\n		directLightColor_Diffuse = PI * directLight.color;\r\n\r\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if NUM_HEMI_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\r\n\r\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.lights_pars="uniform vec3 ambientLightColor;\r\n\r\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\r\n\r\n	vec3 irradiance = ambientLightColor;\r\n\r\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n		irradiance *= PI;\r\n\r\n	#endif\r\n\r\n	return irradiance;\r\n\r\n}\r\n\r\n#if NUM_DIR_LIGHTS > 0\r\n\r\n	struct DirectionalLight {\r\n		vec3 direction;\r\n		vec3 color;\r\n\r\n		int shadow;\r\n		float shadowBias;\r\n		float shadowRadius;\r\n		vec2 shadowMapSize;\r\n	};\r\n\r\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\r\n\r\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\r\n\r\n		directLight.color = directionalLight.color;\r\n		directLight.direction = directionalLight.direction;\r\n		directLight.visible = true;\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_POINT_LIGHTS > 0\r\n\r\n	struct PointLight {\r\n		vec3 position;\r\n		vec3 color;\r\n		float distance;\r\n		float decay;\r\n\r\n		int shadow;\r\n		float shadowBias;\r\n		float shadowRadius;\r\n		vec2 shadowMapSize;\r\n	};\r\n\r\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\r\n\r\n	// directLight is an out parameter as having it as a return value caused compiler errors on some devices\r\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\r\n\r\n		vec3 lVector = pointLight.position - geometry.position;\r\n		directLight.direction = normalize( lVector );\r\n\r\n		float lightDistance = length( lVector );\r\n\r\n		if ( testLightInRange( lightDistance, pointLight.distance ) ) {\r\n\r\n			directLight.color = pointLight.color;\r\n			directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\r\n\r\n			directLight.visible = true;\r\n\r\n		} else {\r\n\r\n			directLight.color = vec3( 0.0 );\r\n			directLight.visible = false;\r\n\r\n		}\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_SPOT_LIGHTS > 0\r\n\r\n	struct SpotLight {\r\n		vec3 position;\r\n		vec3 direction;\r\n		vec3 color;\r\n		float distance;\r\n		float decay;\r\n		float coneCos;\r\n		float penumbraCos;\r\n\r\n		int shadow;\r\n		float shadowBias;\r\n		float shadowRadius;\r\n		vec2 shadowMapSize;\r\n	};\r\n\r\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\r\n\r\n	// directLight is an out parameter as having it as a return value caused compiler errors on some devices\r\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\r\n\r\n		vec3 lVector = spotLight.position - geometry.position;\r\n		directLight.direction = normalize( lVector );\r\n\r\n		float lightDistance = length( lVector );\r\n		float angleCos = dot( directLight.direction, spotLight.direction );\r\n\r\n		if ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\r\n\r\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\r\n\r\n			directLight.color = spotLight.color;\r\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\r\n\r\n			directLight.visible = true;\r\n\r\n		} else {\r\n\r\n			directLight.color = vec3( 0.0 );\r\n			directLight.visible = false;\r\n\r\n		}\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_HEMI_LIGHTS > 0\r\n\r\n	struct HemisphereLight {\r\n		vec3 direction;\r\n		vec3 skyColor;\r\n		vec3 groundColor;\r\n	};\r\n\r\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\r\n\r\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\r\n\r\n		float dotNL = dot( geometry.normal, hemiLight.direction );\r\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\r\n\r\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\r\n\r\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n			irradiance *= PI;\r\n\r\n		#endif\r\n\r\n		return irradiance;\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\r\n\r\n	vec3 getLightProbeIndirectIrradiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in int maxMIPLevel ) {\r\n\r\n		#include <normal_flip>\r\n\r\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\r\n\r\n		#ifdef ENVMAP_TYPE_CUBE\r\n\r\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\r\n\r\n			// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\r\n			// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\r\n\r\n			#else\r\n\r\n				// force the bias high to get the last LOD level as it is the most blurred.\r\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\r\n			vec4 envMapColor = textureCubeUV( queryVec, 1.0 );\r\n\r\n		#else\r\n\r\n			vec4 envMapColor = vec4( 0.0 );\r\n\r\n		#endif\r\n\r\n		return PI * envMapColor.rgb * envMapIntensity;\r\n\r\n	}\r\n\r\n	// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\r\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\r\n\r\n		//float envMapWidth = pow( 2.0, maxMIPLevelScalar );\r\n		//float desiredMIPLevel = log2( envMapWidth * sqrt( 3.0 ) ) - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\r\n\r\n		float maxMIPLevelScalar = float( maxMIPLevel );\r\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\r\n\r\n		// clamp to allowable LOD ranges.\r\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\r\n\r\n	}\r\n\r\n	vec3 getLightProbeIndirectRadiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\r\n\r\n		#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\r\n\r\n		#else\r\n\r\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\r\n\r\n		#endif\r\n\r\n		#include <normal_flip>\r\n\r\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\r\n\r\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\r\n\r\n		#ifdef ENVMAP_TYPE_CUBE\r\n\r\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\r\n\r\n			#else\r\n\r\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\r\n			vec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\r\n\r\n		#elif defined( ENVMAP_TYPE_EQUIREC )\r\n\r\n			vec2 sampleUV;\r\n			sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\r\n			sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\r\n\r\n			#else\r\n\r\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#elif defined( ENVMAP_TYPE_SPHERE )\r\n\r\n			vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\r\n\r\n			#else\r\n\r\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#endif\r\n\r\n		return envMapColor.rgb * envMapIntensity;\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.lights_phong_fragment="BlinnPhongMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb;\r\nmaterial.specularColor = specular;\r\nmaterial.specularShininess = shininess;\r\nmaterial.specularStrength = specularStrength;\r\n",THREE.ShaderChunk.lights_phong_pars_fragment="varying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n\r\nstruct BlinnPhongMaterial {\r\n\r\n	vec3	diffuseColor;\r\n	vec3	specularColor;\r\n	float	specularShininess;\r\n	float	specularStrength;\r\n\r\n};\r\n\r\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\r\n\r\n	vec3 irradiance = dotNL * directLight.color;\r\n\r\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n		irradiance *= PI; // punctual light\r\n\r\n	#endif\r\n\r\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\r\n\r\n}\r\n\r\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\n#define RE_Direct				RE_Direct_BlinnPhong\r\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\r\n\r\n#define Material_LightProbeLOD( material )	(0)\r\n",THREE.ShaderChunk.lights_physical_fragment="PhysicalMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\r\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\r\n#ifdef STANDARD\r\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\r\n#else\r\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\r\n	material.clearCoat = saturate( clearCoat ); // Burley clearcoat model\r\n	material.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\r\n#endif\r\n",THREE.ShaderChunk.lights_physical_pars_fragment="struct PhysicalMaterial {\r\n\r\n	vec3	diffuseColor;\r\n	float	specularRoughness;\r\n	vec3	specularColor;\r\n\r\n	#ifndef STANDARD\r\n		float clearCoat;\r\n		float clearCoatRoughness;\r\n	#endif\r\n\r\n};\r\n\r\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\r\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\r\n\r\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\r\n\r\n	vec3 irradiance = dotNL * directLight.color;\r\n\r\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n		irradiance *= PI; // punctual light\r\n\r\n	#endif\r\n\r\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\r\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n	#ifndef STANDARD\r\n\r\n		reflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\r\n\r\n	#endif\r\n\r\n}\r\n\r\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	reflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\r\n\r\n	#ifndef STANDARD\r\n\r\n		reflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\r\n\r\n	#endif\r\n\r\n}\r\n\r\n#define RE_Direct				RE_Direct_Physical\r\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\r\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\r\n\r\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\r\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\r\n\r\n// ref: http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr_v2.pdf\r\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\r\n\r\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\r\n\r\n}\r\n",THREE.ShaderChunk.lights_template="//\r\n// This is a template that can be used to light a material, it uses pluggable RenderEquations (RE)\r\n//   for specific lighting scenarios.\r\n//\r\n// Instructions for use:\r\n//  - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\r\n//  - If you have defined an RE_IndirectSpecular, you need to also provide a Material_LightProbeLOD. <---- ???\r\n//  - Create a material parameter that is to be passed as the third parameter to your lighting functions.\r\n//\r\n// TODO:\r\n//  - Add area light support.\r\n//  - Add sphere light support.\r\n//  - Add diffuse light probe (irradiance cubemap) support.\r\n//\r\n\r\nGeometricContext geometry;\r\n\r\ngeometry.position = - vViewPosition;\r\ngeometry.normal = normal;\r\ngeometry.viewDir = normalize( vViewPosition );\r\n\r\nIncidentLight directLight;\r\n\r\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n	PointLight pointLight;\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		pointLight = pointLights[ i ];\r\n\r\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\r\n\r\n		#ifdef USE_SHADOWMAP\r\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\r\n		#endif\r\n\r\n		RE_Direct( directLight, geometry, material, reflectedLight );\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n	SpotLight spotLight;\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		spotLight = spotLights[ i ];\r\n\r\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\r\n\r\n		#ifdef USE_SHADOWMAP\r\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\r\n		#endif\r\n\r\n		RE_Direct( directLight, geometry, material, reflectedLight );\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n	DirectionalLight directionalLight;\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		directionalLight = directionalLights[ i ];\r\n\r\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\r\n\r\n		#ifdef USE_SHADOWMAP\r\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n		#endif\r\n\r\n		RE_Direct( directLight, geometry, material, reflectedLight );\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if defined( RE_IndirectDiffuse )\r\n\r\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\r\n\r\n	#ifdef USE_LIGHTMAP\r\n\r\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\r\n\r\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n			lightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\r\n\r\n		#endif\r\n\r\n		irradiance += lightMapIrradiance;\r\n\r\n	#endif\r\n\r\n	#if ( NUM_HEMI_LIGHTS > 0 )\r\n\r\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\r\n\r\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\r\n\r\n		}\r\n\r\n	#endif\r\n\r\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n		// TODO, replace 8 with the real maxMIPLevel\r\n	 	irradiance += getLightProbeIndirectIrradiance( /*lightProbe,*/ geometry, 8 );\r\n\r\n	#endif\r\n\r\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\r\n\r\n#endif\r\n\r\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\r\n\r\n	// TODO, replace 8 with the real maxMIPLevel\r\n	vec3 radiance = getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry, Material_BlinnShininessExponent( material ), 8 );\r\n\r\n	#ifndef STANDARD\r\n		vec3 clearCoatRadiance = getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\r\n	#else\r\n		vec3 clearCoatRadiance = vec3( 0.0 );\r\n	#endif\r\n		\r\n	RE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\r\n\r\n#endif\r\n",THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\r\n\r\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\r\n\r\n#endif",THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\r\n\r\n	uniform float logDepthBufFC;\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		varying float vFragDepth;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		varying float vFragDepth;\r\n\r\n	#endif\r\n\r\n	uniform float logDepthBufFC;\r\n\r\n#endif",THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\r\n\r\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		vFragDepth = 1.0 + gl_Position.w;\r\n\r\n	#else\r\n\r\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\r\n\r\n	vec4 texelColor = texture2D( map, vUv );\r\n\r\n	texelColor = mapTexelToLinear( texelColor );\r\n	diffuseColor *= texelColor;\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_pars_fragment="#ifdef USE_MAP\r\n\r\n	uniform sampler2D map;\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\r\n\r\n	vec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\r\n	diffuseColor *= mapTexelToLinear( mapTexel );\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\r\n\r\n	uniform vec4 offsetRepeat;\r\n	uniform sampler2D map;\r\n\r\n#endif\r\n",THREE.ShaderChunk.metalnessmap_fragment="float metalnessFactor = metalness;\r\n\r\n#ifdef USE_METALNESSMAP\r\n\r\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\r\n	metalnessFactor *= texelMetalness.r;\r\n\r\n#endif\r\n",THREE.ShaderChunk.metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\r\n\r\n	uniform sampler2D metalnessMap;\r\n\r\n#endif",THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\r\n\r\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\r\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\r\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\r\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\r\n\r\n#endif\r\n",THREE.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\r\n\r\n	#ifndef USE_MORPHNORMALS\r\n\r\n	uniform float morphTargetInfluences[ 8 ];\r\n\r\n	#else\r\n\r\n	uniform float morphTargetInfluences[ 4 ];\r\n\r\n	#endif\r\n\r\n#endif",THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\r\n\r\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\r\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\r\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\r\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\r\n\r\n	#ifndef USE_MORPHNORMALS\r\n\r\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\r\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\r\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\r\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.normal_flip="#ifdef DOUBLE_SIDED\r\n	float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n#else\r\n	float flipNormal = 1.0;\r\n#endif\r\n",THREE.ShaderChunk.normal_fragment="#ifdef FLAT_SHADED\r\n\r\n	// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\r\n\r\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\r\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\r\n	vec3 normal = normalize( cross( fdx, fdy ) );\r\n\r\n#else\r\n\r\n	vec3 normal = normalize( vNormal ) * flipNormal;\r\n\r\n#endif\r\n\r\n#ifdef USE_NORMALMAP\r\n\r\n	normal = perturbNormal2Arb( -vViewPosition, normal );\r\n\r\n#elif defined( USE_BUMPMAP )\r\n\r\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n#endif\r\n",THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\r\n\r\n	uniform sampler2D normalMap;\r\n	uniform vec2 normalScale;\r\n\r\n	// Per-Pixel Tangent Space Normal Mapping\r\n	// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\r\n\r\n		vec3 q0 = dFdx( eye_pos.xyz );\r\n		vec3 q1 = dFdy( eye_pos.xyz );\r\n		vec2 st0 = dFdx( vUv.st );\r\n		vec2 st1 = dFdy( vUv.st );\r\n\r\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\r\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\r\n		vec3 N = normalize( surf_norm );\r\n\r\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\r\n		mapN.xy = normalScale * mapN.xy;\r\n		mat3 tsn = mat3( S, T, N );\r\n		return normalize( tsn * mapN );\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.packing="vec3 packNormalToRGB( const in vec3 normal ) {\r\n  return normalize( normal ) * 0.5 + 0.5;\r\n}\r\n\r\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\r\n  return 1.0 - 2.0 * rgb.xyz;\r\n}\r\n\r\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\r\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\r\n\r\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\r\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\r\n\r\nconst float ShiftRight8 = 1. / 256.;\r\n\r\nvec4 packDepthToRGBA( const in float v ) {\r\n\r\n	vec4 r = vec4( fract( v * PackFactors ), v );\r\n	r.yzw -= r.xyz * ShiftRight8; // tidy overflow\r\n	return r * PackUpscale;\r\n\r\n}\r\n\r\nfloat unpackRGBAToDepth( const in vec4 v ) {\r\n\r\n	return dot( v, UnpackFactors );\r\n\r\n}\r\n\r\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\r\n\r\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\r\n  return ( viewZ + near ) / ( near - far );\r\n}\r\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\r\n  return linearClipZ * ( near - far ) - near;\r\n}\r\n\r\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\r\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\r\n}\r\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\r\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\r\n}\r\n",THREE.ShaderChunk.premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\r\n\r\n	// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\r\n	gl_FragColor.rgb *= gl_FragColor.a;\r\n\r\n#endif\r\n",THREE.ShaderChunk.project_vertex="#ifdef USE_SKINNING\r\n\r\n	vec4 mvPosition = modelViewMatrix * skinned;\r\n\r\n#else\r\n\r\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\r\n\r\n#endif\r\n\r\ngl_Position = projectionMatrix * mvPosition;\r\n",THREE.ShaderChunk.roughnessmap_fragment="float roughnessFactor = roughness;\r\n\r\n#ifdef USE_ROUGHNESSMAP\r\n\r\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\r\n	roughnessFactor *= texelRoughness.r;\r\n\r\n#endif\r\n",THREE.ShaderChunk.roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\r\n\r\n	uniform sampler2D roughnessMap;\r\n\r\n#endif",THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\r\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\r\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\r\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\r\n\r\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\r\n\r\n	}\r\n\r\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\r\n\r\n		const vec2 offset = vec2( 0.0, 1.0 );\r\n\r\n		vec2 texelSize = vec2( 1.0 ) / size;\r\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\r\n\r\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\r\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\r\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\r\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\r\n\r\n		vec2 f = fract( uv * size + 0.5 );\r\n\r\n		float a = mix( lb, lt, f.y );\r\n		float b = mix( rb, rt, f.y );\r\n		float c = mix( a, b, f.x );\r\n\r\n		return c;\r\n\r\n	}\r\n\r\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\r\n\r\n		shadowCoord.xyz /= shadowCoord.w;\r\n		shadowCoord.z += shadowBias;\r\n\r\n		// if ( something && something ) breaks ATI OpenGL shader compiler\r\n		// if ( all( something, something ) ) using this instead\r\n\r\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\r\n		bool inFrustum = all( inFrustumVec );\r\n\r\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\r\n\r\n		bool frustumTest = all( frustumTestVec );\r\n\r\n		if ( frustumTest ) {\r\n\r\n		#if defined( SHADOWMAP_TYPE_PCF )\r\n\r\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\r\n\r\n			float dx0 = - texelSize.x * shadowRadius;\r\n			float dy0 = - texelSize.y * shadowRadius;\r\n			float dx1 = + texelSize.x * shadowRadius;\r\n			float dy1 = + texelSize.y * shadowRadius;\r\n\r\n			return (\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\r\n			) * ( 1.0 / 9.0 );\r\n\r\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\r\n\r\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\r\n\r\n			float dx0 = - texelSize.x * shadowRadius;\r\n			float dy0 = - texelSize.y * shadowRadius;\r\n			float dx1 = + texelSize.x * shadowRadius;\r\n			float dy1 = + texelSize.y * shadowRadius;\r\n\r\n			return (\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\r\n			) * ( 1.0 / 9.0 );\r\n\r\n		#else // no percentage-closer filtering:\r\n\r\n			return texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\r\n\r\n		#endif\r\n\r\n		}\r\n\r\n		return 1.0;\r\n\r\n	}\r\n\r\n	// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\r\n	// vector suitable for 2D texture mapping. This code uses the following layout for the\r\n	// 2D texture:\r\n	//\r\n	// xzXZ\r\n	//  y Y\r\n	//\r\n	// Y - Positive y direction\r\n	// y - Negative y direction\r\n	// X - Positive x direction\r\n	// x - Negative x direction\r\n	// Z - Positive z direction\r\n	// z - Negative z direction\r\n	//\r\n	// Source and test bed:\r\n	// https://gist.github.com/tschw/da10c43c467ce8afd0c4\r\n\r\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\r\n\r\n		// Number of texels to avoid at the edge of each square\r\n\r\n		vec3 absV = abs( v );\r\n\r\n		// Intersect unit cube\r\n\r\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\r\n		absV *= scaleToCube;\r\n\r\n		// Apply scale to avoid seams\r\n\r\n		// two texels less per square (one texel will do for NEAREST)\r\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\r\n\r\n		// Unwrap\r\n\r\n		// space: -1 ... 1 range for each square\r\n		//\r\n		// #X##		dim    := ( 4 , 2 )\r\n		//  # #		center := ( 1 , 1 )\r\n\r\n		vec2 planar = v.xy;\r\n\r\n		float almostATexel = 1.5 * texelSizeY;\r\n		float almostOne = 1.0 - almostATexel;\r\n\r\n		if ( absV.z >= almostOne ) {\r\n\r\n			if ( v.z > 0.0 )\r\n				planar.x = 4.0 - v.x;\r\n\r\n		} else if ( absV.x >= almostOne ) {\r\n\r\n			float signX = sign( v.x );\r\n			planar.x = v.z * signX + 2.0 * signX;\r\n\r\n		} else if ( absV.y >= almostOne ) {\r\n\r\n			float signY = sign( v.y );\r\n			planar.x = v.x + 2.0 * signY + 2.0;\r\n			planar.y = v.z * signY - 2.0;\r\n\r\n		}\r\n\r\n		// Transform to UV space\r\n\r\n		// scale := 0.5 / dim\r\n		// translate := ( center + 0.5 ) / dim\r\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\r\n\r\n	}\r\n\r\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\r\n\r\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\r\n\r\n		// for point lights, the uniform @vShadowCoord is re-purposed to hold\r\n		// the distance from the light to the world-space position of the fragment.\r\n		vec3 lightToPosition = shadowCoord.xyz;\r\n\r\n		// bd3D = base direction 3D\r\n		vec3 bd3D = normalize( lightToPosition );\r\n		// dp = distance from light to fragment position\r\n		float dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\r\n\r\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\r\n\r\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\r\n\r\n			return (\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\r\n			) * ( 1.0 / 9.0 );\r\n\r\n		#else // no percentage-closer filtering\r\n\r\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n",
THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\r\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\r\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\r\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.shadowmask_pars_fragment="float getShadowMask() {\r\n\r\n	float shadow = 1.0;\r\n\r\n	#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n	DirectionalLight directionalLight;\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		directionalLight = directionalLights[ i ];\r\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n	SpotLight spotLight;\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		spotLight = spotLights[ i ];\r\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n	PointLight pointLight;\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		pointLight = pointLights[ i ];\r\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#endif\r\n\r\n	return shadow;\r\n\r\n}\r\n",THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\r\n\r\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\r\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\r\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\r\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\r\n\r\n#endif",THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\r\n\r\n	uniform mat4 bindMatrix;\r\n	uniform mat4 bindMatrixInverse;\r\n\r\n	#ifdef BONE_TEXTURE\r\n\r\n		uniform sampler2D boneTexture;\r\n		uniform int boneTextureWidth;\r\n		uniform int boneTextureHeight;\r\n\r\n		mat4 getBoneMatrix( const in float i ) {\r\n\r\n			float j = i * 4.0;\r\n			float x = mod( j, float( boneTextureWidth ) );\r\n			float y = floor( j / float( boneTextureWidth ) );\r\n\r\n			float dx = 1.0 / float( boneTextureWidth );\r\n			float dy = 1.0 / float( boneTextureHeight );\r\n\r\n			y = dy * ( y + 0.5 );\r\n\r\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\r\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\r\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\r\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\r\n\r\n			mat4 bone = mat4( v1, v2, v3, v4 );\r\n\r\n			return bone;\r\n\r\n		}\r\n\r\n	#else\r\n\r\n		uniform mat4 boneMatrices[ MAX_BONES ];\r\n\r\n		mat4 getBoneMatrix( const in float i ) {\r\n\r\n			mat4 bone = boneMatrices[ int(i) ];\r\n			return bone;\r\n\r\n		}\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\r\n\r\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\r\n\r\n	vec4 skinned = vec4( 0.0 );\r\n	skinned += boneMatX * skinVertex * skinWeight.x;\r\n	skinned += boneMatY * skinVertex * skinWeight.y;\r\n	skinned += boneMatZ * skinVertex * skinWeight.z;\r\n	skinned += boneMatW * skinVertex * skinWeight.w;\r\n	skinned  = bindMatrixInverse * skinned;\r\n\r\n#endif\r\n",THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\r\n\r\n	mat4 skinMatrix = mat4( 0.0 );\r\n	skinMatrix += skinWeight.x * boneMatX;\r\n	skinMatrix += skinWeight.y * boneMatY;\r\n	skinMatrix += skinWeight.z * boneMatZ;\r\n	skinMatrix += skinWeight.w * boneMatW;\r\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\r\n\r\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\r\n\r\n#endif\r\n",THREE.ShaderChunk.specularmap_fragment="float specularStrength;\r\n\r\n#ifdef USE_SPECULARMAP\r\n\r\n	vec4 texelSpecular = texture2D( specularMap, vUv );\r\n	specularStrength = texelSpecular.r;\r\n\r\n#else\r\n\r\n	specularStrength = 1.0;\r\n\r\n#endif",THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\r\n\r\n	uniform sampler2D specularMap;\r\n\r\n#endif",THREE.ShaderChunk.tonemapping_fragment="#if defined( TONE_MAPPING )\r\n\r\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\r\n\r\n#endif\r\n",THREE.ShaderChunk.tonemapping_pars_fragment="#define saturate(a) clamp( a, 0.0, 1.0 )\r\n\r\nuniform float toneMappingExposure;\r\nuniform float toneMappingWhitePoint;\r\n\r\n// exposure only\r\nvec3 LinearToneMapping( vec3 color ) {\r\n\r\n  return toneMappingExposure * color;\r\n\r\n}\r\n\r\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\r\nvec3 ReinhardToneMapping( vec3 color ) {\r\n\r\n  color *= toneMappingExposure;\r\n  return saturate( color / ( vec3( 1.0 ) + color ) );\r\n\r\n}\r\n\r\n// source: http://filmicgames.com/archives/75\r\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\r\nvec3 Uncharted2ToneMapping( vec3 color ) {\r\n\r\n  // John Hable's filmic operator from Uncharted 2 video game\r\n  color *= toneMappingExposure;\r\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\r\n\r\n}\r\n\r\n// source: http://filmicgames.com/archives/75\r\nvec3 OptimizedCineonToneMapping( vec3 color ) {\r\n\r\n  // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n  color *= toneMappingExposure;\r\n  color = max( vec3( 0.0 ), color - 0.004 );\r\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\r\n\r\n}\r\n",THREE.ShaderChunk.uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\r\n\r\n	varying vec2 vUv2;\r\n\r\n#endif",THREE.ShaderChunk.uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\r\n\r\n	attribute vec2 uv2;\r\n	varying vec2 vUv2;\r\n\r\n#endif",THREE.ShaderChunk.uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\r\n\r\n	vUv2 = uv2;\r\n\r\n#endif",THREE.ShaderChunk.uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\r\n\r\n	varying vec2 vUv;\r\n\r\n#endif",THREE.ShaderChunk.uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\r\n\r\n	varying vec2 vUv;\r\n	uniform vec4 offsetRepeat;\r\n\r\n#endif\r\n",THREE.ShaderChunk.uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\r\n\r\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n#endif",THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\r\n\r\n	#ifdef USE_SKINNING\r\n\r\n		vec4 worldPosition = modelMatrix * skinned;\r\n\r\n	#else\r\n\r\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.cube_frag="uniform samplerCube tCube;\r\nuniform float tFlip;\r\n\r\nvarying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.cube_vert="varying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	vWorldPosition = transformDirection( position, modelMatrix );\r\n\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.depth_frag="#if DEPTH_PACKING == 3200\r\n\r\n	uniform float opacity;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( 1.0 );\r\n\r\n	#if DEPTH_PACKING == 3200\r\n\r\n		diffuseColor.a = opacity;\r\n\r\n	#endif\r\n\r\n	#include <map_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n	#if DEPTH_PACKING == 3200\r\n\r\n		gl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\r\n\r\n	#elif DEPTH_PACKING == 3201\r\n\r\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\r\n\r\n	#endif\r\n\r\n}\r\n",THREE.ShaderChunk.depth_vert="#include <common>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n\r\n	#include <skinbase_vertex>\r\n\r\n	#include <begin_vertex>\r\n	#include <displacementmap_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.distanceRGBA_frag="uniform vec3 lightPos;\r\nvarying vec4 vWorldPosition;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main () {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	gl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\r\n\r\n}\r\n",THREE.ShaderChunk.distanceRGBA_vert="varying vec4 vWorldPosition;\r\n\r\n#include <common>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <skinbase_vertex>\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <worldpos_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	vWorldPosition = worldPosition;\r\n\r\n}\r\n",THREE.ShaderChunk.equirect_frag="uniform sampler2D tEquirect;\r\nuniform float tFlip;\r\n\r\nvarying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	// 	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\r\n	vec3 direction = normalize( vWorldPosition );\r\n	vec2 sampleUV;\r\n	sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\r\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\r\n	gl_FragColor = texture2D( tEquirect, sampleUV );\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.equirect_vert="varying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	vWorldPosition = transformDirection( position, modelMatrix );\r\n\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.linedashed_frag="uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float dashSize;\r\nuniform float totalSize;\r\n\r\nvarying float vLineDistance;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\r\n\r\n		discard;\r\n\r\n	}\r\n\r\n	vec3 outgoingLight = vec3( 0.0 );\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <color_fragment>\r\n\r\n	outgoingLight = diffuseColor.rgb; // simple shader\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.linedashed_vert="uniform float scale;\r\nattribute float lineDistance;\r\n\r\nvarying float vLineDistance;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <color_vertex>\r\n\r\n	vLineDistance = scale * lineDistance;\r\n\r\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n	gl_Position = projectionMatrix * mvPosition;\r\n\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshbasic_frag="uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n\r\n	ReflectedLight reflectedLight;\r\n	reflectedLight.directDiffuse = vec3( 0.0 );\r\n	reflectedLight.directSpecular = vec3( 0.0 );\r\n	reflectedLight.indirectDiffuse = diffuseColor.rgb;\r\n	reflectedLight.indirectSpecular = vec3( 0.0 );\r\n\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\r\n\r\n	#include <normal_flip>\r\n	#include <envmap_fragment>\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshbasic_vert="#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n	#include <skinbase_vertex>\r\n\r\n	#ifdef USE_ENVMAP\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n	#endif\r\n\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n\r\n	#include <worldpos_vertex>\r\n	#include <clipping_planes_vertex>\r\n	#include <envmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshlambert_frag="uniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform float opacity;\r\n\r\nvarying vec3 vLightFront;\r\n\r\n#ifdef DOUBLE_SIDED\r\n\r\n	varying vec3 vLightBack;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <fog_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <shadowmask_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n	vec3 totalEmissiveRadiance = emissive;\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n	#include <emissivemap_fragment>\r\n\r\n	// accumulation\r\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\r\n\r\n	#include <lightmap_fragment>\r\n\r\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\r\n\r\n	#ifdef DOUBLE_SIDED\r\n\r\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\r\n\r\n	#else\r\n\r\n		reflectedLight.directDiffuse = vLightFront;\r\n\r\n	#endif\r\n\r\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\r\n\r\n	// modulation\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\r\n\r\n	#include <normal_flip>\r\n	#include <envmap_fragment>\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshlambert_vert="#define LAMBERT\r\n\r\nvarying vec3 vLightFront;\r\n\r\n#ifdef DOUBLE_SIDED\r\n\r\n	varying vec3 vLightBack;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinbase_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	#include <worldpos_vertex>\r\n	#include <envmap_vertex>\r\n	#include <lights_lambert_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphong_frag="#define PHONG\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <lights_phong_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n	vec3 totalEmissiveRadiance = emissive;\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n	#include <normal_flip>\r\n	#include <normal_fragment>\r\n	#include <emissivemap_fragment>\r\n\r\n	// accumulation\r\n	#include <lights_phong_fragment>\r\n	#include <lights_template>\r\n\r\n	// modulation\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n	#include <envmap_fragment>\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphong_vert="#define PHONG\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinbase_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n	vNormal = normalize( transformedNormal );\r\n\r\n#endif\r\n\r\n	#include <begin_vertex>\r\n	#include <displacementmap_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	vViewPosition = - mvPosition.xyz;\r\n\r\n	#include <worldpos_vertex>\r\n	#include <envmap_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphysical_frag="#define PHYSICAL\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform float roughness;\r\nuniform float metalness;\r\nuniform float opacity;\r\n\r\n#ifndef STANDARD\r\n	uniform float clearCoat;\r\n	uniform float clearCoatRoughness;\r\n#endif\r\n\r\nuniform float envMapIntensity; // temporary\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <cube_uv_reflection_fragment>\r\n#include <lights_pars>\r\n#include <lights_physical_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <roughnessmap_pars_fragment>\r\n#include <metalnessmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n	vec3 totalEmissiveRadiance = emissive;\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n	#include <roughnessmap_fragment>\r\n	#include <metalnessmap_fragment>\r\n	#include <normal_flip>\r\n	#include <normal_fragment>\r\n	#include <emissivemap_fragment>\r\n\r\n	// accumulation\r\n	#include <lights_physical_fragment>\r\n	#include <lights_template>\r\n\r\n	// modulation\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphysical_vert="#define PHYSICAL\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinbase_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n	vNormal = normalize( transformedNormal );\r\n\r\n#endif\r\n\r\n	#include <begin_vertex>\r\n	#include <displacementmap_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	vViewPosition = - mvPosition.xyz;\r\n\r\n	#include <worldpos_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.normal_frag="uniform float opacity;\r\nvarying vec3 vNormal;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n	gl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.normal_vert="varying vec3 vNormal;\r\n\r\n#include <common>\r\n#include <morphtarget_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	vNormal = normalize( normalMatrix * normal );\r\n\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.points_frag="uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <map_particle_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec3 outgoingLight = vec3( 0.0 );\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_particle_fragment>\r\n	#include <color_fragment>\r\n	#include <alphatest_fragment>\r\n\r\n	outgoingLight = diffuseColor.rgb;\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.points_vert="uniform float size;\r\nuniform float scale;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <color_vertex>\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n\r\n	#ifdef USE_SIZEATTENUATION\r\n		gl_PointSize = size * ( scale / - mvPosition.z );\r\n	#else\r\n		gl_PointSize = size;\r\n	#endif\r\n\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n	#include <worldpos_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.shadow_frag="uniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <shadowmap_pars_fragment>\r\n#include <shadowmask_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	gl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\r\n\r\n}\r\n",THREE.ShaderChunk.shadow_vert="#include <shadowmap_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n	#include <worldpos_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\r\n\r\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\r\n\r\n#endif\r\n",THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\r\n\r\n	uniform sampler2D alphaMap;\r\n\r\n#endif\r\n",THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\r\n\r\n	if ( diffuseColor.a < ALPHATEST ) discard;\r\n\r\n#endif\r\n",THREE.ShaderChunk.aomap_fragment="#ifdef USE_AOMAP\r\n\r\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\r\n\r\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\r\n\r\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL )\r\n\r\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n\r\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.aomap_pars_fragment="#ifdef USE_AOMAP\r\n\r\n	uniform sampler2D aoMap;\r\n	uniform float aoMapIntensity;\r\n\r\n#endif",THREE.ShaderChunk.begin_vertex="\r\nvec3 transformed = vec3( position );\r\n",THREE.ShaderChunk.beginnormal_vertex="\r\nvec3 objectNormal = vec3( normal );\r\n",THREE.ShaderChunk.bsdfs='bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\r\n\r\n	return any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\r\n\r\n}\r\n\r\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\r\n\r\n		if( decayExponent > 0.0 ) {\r\n\r\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\r\n\r\n			// based upon Frostbite 3 Moving to Physically-based Rendering\r\n			// page 32, equation 26: E[window1]\r\n			// http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr_v2.pdf\r\n			// this is intended to be used on spot and point lights who are represented as luminous intensity\r\n			// but who must be converted to luminous irradiance for surface lighting calculation\r\n			float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\r\n			float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\r\n			return distanceFalloff * maxDistanceCutoffFactor;\r\n\r\n#else\r\n\r\n			return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\r\n\r\n#endif\r\n\r\n		}\r\n\r\n		return 1.0;\r\n}\r\n\r\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\r\n\r\n	return RECIPROCAL_PI * diffuseColor;\r\n\r\n} // validated\r\n\r\n\r\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\r\n\r\n	// Original approximation by Christophe Schlick \'94\r\n	//;float fresnel = pow( 1.0 - dotLH, 5.0 );\r\n\r\n	// Optimized variant (presented by Epic at SIGGRAPH \'13)\r\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\r\n\r\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\r\n\r\n} // validated\r\n\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is "roughness squared" in Disney’s reparameterization\r\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\r\n\r\n	// geometry term = G(l)⋅G(v) / 4(n⋅l)(n⋅v)\r\n\r\n	float a2 = pow2( alpha );\r\n\r\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\r\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\r\n\r\n	return 1.0 / ( gl * gv );\r\n\r\n} // validated\r\n\r\n// from page 12, listing 2 of http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr_v2.pdf\r\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\r\n\r\n	float a2 = pow2( alpha );\r\n\r\n	// dotNL and dotNV are explicitly swapped. This is not a mistake.\r\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\r\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\r\n\r\n	return 0.5 / max( gv + gl, EPSILON );\r\n}\r\n\r\n\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is "roughness squared" in Disney’s reparameterization\r\nfloat D_GGX( const in float alpha, const in float dotNH ) {\r\n\r\n	float a2 = pow2( alpha );\r\n\r\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\r\n\r\n	return RECIPROCAL_PI * a2 / pow2( denom );\r\n\r\n}\r\n\r\n\r\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\r\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\r\n\r\n	float alpha = pow2( roughness ); // UE4\'s roughness\r\n\r\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\r\n\r\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\r\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\r\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\r\n\r\n	vec3 F = F_Schlick( specularColor, dotLH );\r\n\r\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\r\n\r\n	float D = D_GGX( alpha, dotNH );\r\n\r\n	return F * ( G * D );\r\n\r\n} // validated\r\n\r\n\r\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\r\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\r\n\r\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n\r\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\r\n\r\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\r\n\r\n	vec4 r = roughness * c0 + c1;\r\n\r\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\r\n\r\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\r\n\r\n	return specularColor * AB.x + AB.y;\r\n\r\n} // validated\r\n\r\n\r\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\r\n\r\n	// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\r\n	return 0.25;\r\n\r\n}\r\n\r\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\r\n\r\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\r\n\r\n}\r\n\r\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\r\n\r\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\r\n\r\n	//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\r\n	//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\r\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\r\n\r\n	vec3 F = F_Schlick( specularColor, dotLH );\r\n\r\n	float G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\r\n\r\n	float D = D_BlinnPhong( shininess, dotNH );\r\n\r\n	return F * ( G * D );\r\n\r\n} // validated\r\n\r\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\r\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\r\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\r\n}\r\n\r\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\r\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\r\n}\r\n',
THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\r\n\r\n	uniform sampler2D bumpMap;\r\n	uniform float bumpScale;\r\n\r\n	// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\r\n	// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\r\n\r\n	// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\n	vec2 dHdxy_fwd() {\r\n\r\n		vec2 dSTdx = dFdx( vUv );\r\n		vec2 dSTdy = dFdy( vUv );\r\n\r\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\r\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\r\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\r\n\r\n		return vec2( dBx, dBy );\r\n\r\n	}\r\n\r\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\r\n\r\n		vec3 vSigmaX = dFdx( surf_pos );\r\n		vec3 vSigmaY = dFdy( surf_pos );\r\n		vec3 vN = surf_norm;		// normalized\r\n\r\n		vec3 R1 = cross( vSigmaY, vN );\r\n		vec3 R2 = cross( vN, vSigmaX );\r\n\r\n		float fDet = dot( vSigmaX, R1 );\r\n\r\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\r\n		return normalize( abs( fDet ) * surf_norm - vGrad );\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\r\n\r\n	for ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\r\n\r\n		vec4 plane = clippingPlanes[ i ];\r\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\r\n\r\n	#if ! defined( PHYSICAL ) && ! defined( PHONG )\r\n		varying vec3 vViewPosition;\r\n	#endif\r\n\r\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\r\n\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\r\n	varying vec3 vViewPosition;\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\r\n	vViewPosition = - mvPosition.xyz;\r\n#endif\r\n\r\n",THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\r\n\r\n	diffuseColor.rgb *= vColor;\r\n\r\n#endif",THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\r\n\r\n	varying vec3 vColor;\r\n\r\n#endif\r\n",THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\r\n\r\n	varying vec3 vColor;\r\n\r\n#endif",THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\r\n\r\n	vColor.xyz = color.xyz;\r\n\r\n#endif",THREE.ShaderChunk.common="#define PI 3.14159265359\r\n#define PI2 6.28318530718\r\n#define RECIPROCAL_PI 0.31830988618\r\n#define RECIPROCAL_PI2 0.15915494\r\n#define LOG2 1.442695\r\n#define EPSILON 1e-6\r\n\r\n#define saturate(a) clamp( a, 0.0, 1.0 )\r\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\r\n\r\nfloat pow2( const in float x ) { return x*x; }\r\nfloat pow3( const in float x ) { return x*x*x; }\r\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\r\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\r\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\r\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\r\nhighp float rand( const in vec2 uv ) {\r\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\r\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\r\n	return fract(sin(sn) * c);\r\n}\r\n\r\nstruct IncidentLight {\r\n	vec3 color;\r\n	vec3 direction;\r\n	bool visible;\r\n};\r\n\r\nstruct ReflectedLight {\r\n	vec3 directDiffuse;\r\n	vec3 directSpecular;\r\n	vec3 indirectDiffuse;\r\n	vec3 indirectSpecular;\r\n};\r\n\r\nstruct GeometricContext {\r\n	vec3 position;\r\n	vec3 normal;\r\n	vec3 viewDir;\r\n};\r\n\r\n\r\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\r\n\r\n}\r\n\r\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\r\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\r\n\r\n}\r\n\r\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\r\n	float distance = dot( planeNormal, point - pointOnPlane );\r\n\r\n	return - distance * planeNormal + point;\r\n\r\n}\r\n\r\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\r\n	return sign( dot( point - pointOnPlane, planeNormal ) );\r\n\r\n}\r\n\r\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\r\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\r\n\r\n}\r\n",THREE.ShaderChunk.cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\r\n\r\n#define cubeUV_textureSize (1024.0)\r\n\r\nint getFaceFromDirection(vec3 direction) {\r\n	vec3 absDirection = abs(direction);\r\n	int face = -1;\r\n	if( absDirection.x > absDirection.z ) {\r\n		if(absDirection.x > absDirection.y )\r\n			face = direction.x > 0.0 ? 0 : 3;\r\n		else\r\n			face = direction.y > 0.0 ? 1 : 4;\r\n	}\r\n	else {\r\n		if(absDirection.z > absDirection.y )\r\n			face = direction.z > 0.0 ? 2 : 5;\r\n		else\r\n			face = direction.y > 0.0 ? 1 : 4;\r\n	}\r\n	return face;\r\n}\r\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\r\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\r\n\r\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\r\n	float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\r\n	float dxRoughness = dFdx(roughness);\r\n	float dyRoughness = dFdy(roughness);\r\n	vec3 dx = dFdx( vec * scale * dxRoughness );\r\n	vec3 dy = dFdy( vec * scale * dyRoughness );\r\n	float d = max( dot( dx, dx ), dot( dy, dy ) );\r\n	// Clamp the value to the max mip level counts. hard coded to 6 mips\r\n	d = clamp(d, 1.0, cubeUV_rangeClamp);\r\n	float mipLevel = 0.5 * log2(d);\r\n	return vec2(floor(mipLevel), fract(mipLevel));\r\n}\r\n\r\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\r\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\r\n\r\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\r\n	mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\r\n	float a = 16.0 * cubeUV_rcpTextureSize;\r\n\r\n	vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\r\n	vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\r\n	// float powScale = exp2(roughnessLevel + mipLevel);\r\n	float powScale = exp2_packed.x * exp2_packed.y;\r\n	// float scale =  1.0 / exp2(roughnessLevel + 2.0 + mipLevel);\r\n	float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\r\n	// float mipOffset = 0.75*(1.0 - 1.0/exp2(mipLevel))/exp2(roughnessLevel);\r\n	float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\r\n\r\n	bool bRes = mipLevel == 0.0;\r\n	scale =  bRes && (scale < a) ? a : scale;\r\n\r\n	vec3 r;\r\n	vec2 offset;\r\n	int face = getFaceFromDirection(direction);\r\n\r\n	float rcpPowScale = 1.0 / powScale;\r\n\r\n	if( face == 0) {\r\n		r = vec3(direction.x, -direction.z, direction.y);\r\n		offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\r\n	}\r\n	else if( face == 1) {\r\n		r = vec3(direction.y, direction.x, direction.z);\r\n		offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\r\n	}\r\n	else if( face == 2) {\r\n		r = vec3(direction.z, direction.x, direction.y);\r\n		offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\r\n	}\r\n	else if( face == 3) {\r\n		r = vec3(direction.x, direction.z, direction.y);\r\n		offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\r\n	}\r\n	else if( face == 4) {\r\n		r = vec3(direction.y, direction.x, -direction.z);\r\n		offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\r\n	}\r\n	else {\r\n		r = vec3(direction.z, -direction.x, direction.y);\r\n		offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\r\n	}\r\n	r = normalize(r);\r\n	float texelOffset = 0.5 * cubeUV_rcpTextureSize;\r\n	vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\r\n	vec2 base = offset + vec2( texelOffset );\r\n	return base + s * ( scale - 2.0 * texelOffset );\r\n}\r\n\r\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\r\n\r\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\r\n	float roughnessVal = roughness* cubeUV_maxLods3;\r\n	float r1 = floor(roughnessVal);\r\n	float r2 = r1 + 1.0;\r\n	float t = fract(roughnessVal);\r\n	vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\r\n	float s = mipInfo.y;\r\n	float level0 = mipInfo.x;\r\n	float level1 = level0 + 1.0;\r\n	level1 = level1 > 5.0 ? 5.0 : level1;\r\n\r\n	// round to nearest mipmap if we are not interpolating.\r\n	level0 += min( floor( s + 0.5 ), 5.0 );\r\n\r\n	// Tri linear interpolation.\r\n	vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\r\n	vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\r\n\r\n	vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\r\n	vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\r\n\r\n	vec4 result = mix(color10, color20, t);\r\n\r\n	return vec4(result.rgb, 1.0);\r\n}\r\n\r\n#endif\r\n",THREE.ShaderChunk.defaultnormal_vertex="#ifdef FLIP_SIDED\r\n\r\n	objectNormal = -objectNormal;\r\n\r\n#endif\r\n\r\nvec3 transformedNormal = normalMatrix * objectNormal;\r\n",THREE.ShaderChunk.displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\r\n\r\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\r\n\r\n#endif\r\n",THREE.ShaderChunk.displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\r\n\r\n	uniform sampler2D displacementMap;\r\n	uniform float displacementScale;\r\n	uniform float displacementBias;\r\n\r\n#endif\r\n",THREE.ShaderChunk.emissivemap_fragment="#ifdef USE_EMISSIVEMAP\r\n\r\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\r\n\r\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\r\n\r\n	totalEmissiveRadiance *= emissiveColor.rgb;\r\n\r\n#endif\r\n",THREE.ShaderChunk.emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\r\n\r\n	uniform sampler2D emissiveMap;\r\n\r\n#endif\r\n",THREE.ShaderChunk.encodings_pars_fragment="// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\r\n\r\nvec4 LinearToLinear( in vec4 value ) {\r\n  return value;\r\n}\r\n\r\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\r\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\r\n}\r\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\r\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\r\n}\r\n\r\nvec4 sRGBToLinear( in vec4 value ) {\r\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\r\n}\r\nvec4 LinearTosRGB( in vec4 value ) {\r\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\r\n}\r\n\r\nvec4 RGBEToLinear( in vec4 value ) {\r\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\r\n}\r\nvec4 LinearToRGBE( in vec4 value ) {\r\n  float maxComponent = max( max( value.r, value.g ), value.b );\r\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\r\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\r\n//  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\r\n}\r\n\r\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\r\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\r\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\r\n}\r\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\r\n  float maxRGB = max( value.x, max( value.g, value.b ) );\r\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\r\n  M            = ceil( M * 255.0 ) / 255.0;\r\n  return vec4( value.rgb / ( M * maxRange ), M );\r\n}\r\n\r\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\r\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\r\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\r\n}\r\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\r\n    float maxRGB = max( value.x, max( value.g, value.b ) );\r\n    float D      = max( maxRange / maxRGB, 1.0 );\r\n    D            = min( floor( D ) / 255.0, 1.0 );\r\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\r\n}\r\n\r\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\r\n\r\n// M matrix, for encoding\r\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\r\nvec4 LinearToLogLuv( in vec4 value )  {\r\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\r\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\r\n  vec4 vResult;\r\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\r\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\r\n  vResult.w = fract(Le);\r\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\r\n  return vResult;\r\n}\r\n\r\n// Inverse M matrix, for decoding\r\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\r\nvec4 LogLuvToLinear( in vec4 value ) {\r\n  float Le = value.z * 255.0 + value.w;\r\n  vec3 Xp_Y_XYZp;\r\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\r\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\r\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\r\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\r\n  return vec4( max(vRGB, 0.0), 1.0 );\r\n}\r\n",THREE.ShaderChunk.encodings_fragment="  gl_FragColor = linearToOutputTexel( gl_FragColor );\r\n",THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n\r\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\r\n\r\n		// Transforming Normal Vectors with the Inverse Transformation\r\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\r\n\r\n		#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\r\n\r\n		#else\r\n\r\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\r\n\r\n		#endif\r\n\r\n	#else\r\n\r\n		vec3 reflectVec = vReflect;\r\n\r\n	#endif\r\n\r\n	#ifdef ENVMAP_TYPE_CUBE\r\n\r\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\r\n\r\n	#elif defined( ENVMAP_TYPE_EQUIREC )\r\n\r\n		vec2 sampleUV;\r\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\r\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\r\n		vec4 envColor = texture2D( envMap, sampleUV );\r\n\r\n	#elif defined( ENVMAP_TYPE_SPHERE )\r\n\r\n		vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\r\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\r\n\r\n	#endif\r\n\r\n	envColor = envMapTexelToLinear( envColor );\r\n\r\n	#ifdef ENVMAP_BLENDING_MULTIPLY\r\n\r\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\r\n\r\n	#elif defined( ENVMAP_BLENDING_MIX )\r\n\r\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\r\n\r\n	#elif defined( ENVMAP_BLENDING_ADD )\r\n\r\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( PHYSICAL )\r\n	uniform float reflectivity;\r\n	uniform float envMapIntenstiy;\r\n#endif\r\n\r\n#ifdef USE_ENVMAP\r\n\r\n	#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\r\n		varying vec3 vWorldPosition;\r\n	#endif\r\n\r\n	#ifdef ENVMAP_TYPE_CUBE\r\n		uniform samplerCube envMap;\r\n	#else\r\n		uniform sampler2D envMap;\r\n	#endif\r\n	uniform float flipEnvMap;\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\r\n		uniform float refractionRatio;\r\n	#else\r\n		varying vec3 vReflect;\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.envmap_pars_vertex="#ifdef USE_ENVMAP\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n		varying vec3 vWorldPosition;\r\n\r\n	#else\r\n\r\n		varying vec3 vReflect;\r\n		uniform float refractionRatio;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.envmap_vertex="#ifdef USE_ENVMAP\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n\r\n		vWorldPosition = worldPosition.xyz;\r\n\r\n	#else\r\n\r\n		vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\r\n\r\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\r\n\r\n		#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n			vReflect = reflect( cameraToVertex, worldNormal );\r\n\r\n		#else\r\n\r\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\r\n\r\n		#endif\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\r\n\r\n	#else\r\n\r\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\r\n\r\n	#endif\r\n\r\n	#ifdef FOG_EXP2\r\n\r\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\r\n\r\n	#else\r\n\r\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\r\n\r\n	#endif\r\n\r\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\r\n\r\n#endif\r\n",THREE.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\r\n\r\n	uniform vec3 fogColor;\r\n\r\n	#ifdef FOG_EXP2\r\n\r\n		uniform float fogDensity;\r\n\r\n	#else\r\n\r\n		uniform float fogNear;\r\n		uniform float fogFar;\r\n	#endif\r\n\r\n#endif",THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\r\n\r\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\r\n\r\n#endif\r\n",THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\r\n\r\n	uniform sampler2D lightMap;\r\n	uniform float lightMapIntensity;\r\n\r\n#endif",THREE.ShaderChunk.lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\r\n\r\nGeometricContext geometry;\r\ngeometry.position = mvPosition.xyz;\r\ngeometry.normal = normalize( transformedNormal );\r\ngeometry.viewDir = normalize( -mvPosition.xyz );\r\n\r\nGeometricContext backGeometry;\r\nbackGeometry.position = geometry.position;\r\nbackGeometry.normal = -geometry.normal;\r\nbackGeometry.viewDir = geometry.viewDir;\r\n\r\nvLightFront = vec3( 0.0 );\r\n\r\n#ifdef DOUBLE_SIDED\r\n	vLightBack = vec3( 0.0 );\r\n#endif\r\n\r\nIncidentLight directLight;\r\nfloat dotNL;\r\nvec3 directLightColor_Diffuse;\r\n\r\n#if NUM_POINT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\r\n\r\n		dotNL = dot( geometry.normal, directLight.direction );\r\n		directLightColor_Diffuse = PI * directLight.color;\r\n\r\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if NUM_SPOT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\r\n\r\n		dotNL = dot( geometry.normal, directLight.direction );\r\n		directLightColor_Diffuse = PI * directLight.color;\r\n\r\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\r\n\r\n		#endif\r\n	}\r\n\r\n#endif\r\n\r\n#if NUM_DIR_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\r\n\r\n		dotNL = dot( geometry.normal, directLight.direction );\r\n		directLightColor_Diffuse = PI * directLight.color;\r\n\r\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if NUM_HEMI_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\r\n\r\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.lights_pars="uniform vec3 ambientLightColor;\r\n\r\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\r\n\r\n	vec3 irradiance = ambientLightColor;\r\n\r\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n		irradiance *= PI;\r\n\r\n	#endif\r\n\r\n	return irradiance;\r\n\r\n}\r\n\r\n#if NUM_DIR_LIGHTS > 0\r\n\r\n	struct DirectionalLight {\r\n		vec3 direction;\r\n		vec3 color;\r\n\r\n		int shadow;\r\n		float shadowBias;\r\n		float shadowRadius;\r\n		vec2 shadowMapSize;\r\n	};\r\n\r\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\r\n\r\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\r\n\r\n		directLight.color = directionalLight.color;\r\n		directLight.direction = directionalLight.direction;\r\n		directLight.visible = true;\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_POINT_LIGHTS > 0\r\n\r\n	struct PointLight {\r\n		vec3 position;\r\n		vec3 color;\r\n		float distance;\r\n		float decay;\r\n\r\n		int shadow;\r\n		float shadowBias;\r\n		float shadowRadius;\r\n		vec2 shadowMapSize;\r\n	};\r\n\r\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\r\n\r\n	// directLight is an out parameter as having it as a return value caused compiler errors on some devices\r\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\r\n\r\n		vec3 lVector = pointLight.position - geometry.position;\r\n		directLight.direction = normalize( lVector );\r\n\r\n		float lightDistance = length( lVector );\r\n\r\n		if ( testLightInRange( lightDistance, pointLight.distance ) ) {\r\n\r\n			directLight.color = pointLight.color;\r\n			directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\r\n\r\n			directLight.visible = true;\r\n\r\n		} else {\r\n\r\n			directLight.color = vec3( 0.0 );\r\n			directLight.visible = false;\r\n\r\n		}\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_SPOT_LIGHTS > 0\r\n\r\n	struct SpotLight {\r\n		vec3 position;\r\n		vec3 direction;\r\n		vec3 color;\r\n		float distance;\r\n		float decay;\r\n		float coneCos;\r\n		float penumbraCos;\r\n\r\n		int shadow;\r\n		float shadowBias;\r\n		float shadowRadius;\r\n		vec2 shadowMapSize;\r\n	};\r\n\r\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\r\n\r\n	// directLight is an out parameter as having it as a return value caused compiler errors on some devices\r\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\r\n\r\n		vec3 lVector = spotLight.position - geometry.position;\r\n		directLight.direction = normalize( lVector );\r\n\r\n		float lightDistance = length( lVector );\r\n		float angleCos = dot( directLight.direction, spotLight.direction );\r\n\r\n		if ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\r\n\r\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\r\n\r\n			directLight.color = spotLight.color;\r\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\r\n\r\n			directLight.visible = true;\r\n\r\n		} else {\r\n\r\n			directLight.color = vec3( 0.0 );\r\n			directLight.visible = false;\r\n\r\n		}\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_HEMI_LIGHTS > 0\r\n\r\n	struct HemisphereLight {\r\n		vec3 direction;\r\n		vec3 skyColor;\r\n		vec3 groundColor;\r\n	};\r\n\r\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\r\n\r\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\r\n\r\n		float dotNL = dot( geometry.normal, hemiLight.direction );\r\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\r\n\r\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\r\n\r\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n			irradiance *= PI;\r\n\r\n		#endif\r\n\r\n		return irradiance;\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\r\n\r\n	vec3 getLightProbeIndirectIrradiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in int maxMIPLevel ) {\r\n\r\n		#include <normal_flip>\r\n\r\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\r\n\r\n		#ifdef ENVMAP_TYPE_CUBE\r\n\r\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\r\n\r\n			// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\r\n			// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\r\n\r\n			#else\r\n\r\n				// force the bias high to get the last LOD level as it is the most blurred.\r\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\r\n			vec4 envMapColor = textureCubeUV( queryVec, 1.0 );\r\n\r\n		#else\r\n\r\n			vec4 envMapColor = vec4( 0.0 );\r\n\r\n		#endif\r\n\r\n		return PI * envMapColor.rgb * envMapIntensity;\r\n\r\n	}\r\n\r\n	// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\r\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\r\n\r\n		//float envMapWidth = pow( 2.0, maxMIPLevelScalar );\r\n		//float desiredMIPLevel = log2( envMapWidth * sqrt( 3.0 ) ) - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\r\n\r\n		float maxMIPLevelScalar = float( maxMIPLevel );\r\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\r\n\r\n		// clamp to allowable LOD ranges.\r\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\r\n\r\n	}\r\n\r\n	vec3 getLightProbeIndirectRadiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\r\n\r\n		#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\r\n\r\n		#else\r\n\r\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\r\n\r\n		#endif\r\n\r\n		#include <normal_flip>\r\n\r\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\r\n\r\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\r\n\r\n		#ifdef ENVMAP_TYPE_CUBE\r\n\r\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\r\n\r\n			#else\r\n\r\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\r\n			vec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\r\n\r\n		#elif defined( ENVMAP_TYPE_EQUIREC )\r\n\r\n			vec2 sampleUV;\r\n			sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\r\n			sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\r\n\r\n			#else\r\n\r\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#elif defined( ENVMAP_TYPE_SPHERE )\r\n\r\n			vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\r\n\r\n			#else\r\n\r\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#endif\r\n\r\n		return envMapColor.rgb * envMapIntensity;\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.lights_phong_fragment="BlinnPhongMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb;\r\nmaterial.specularColor = specular;\r\nmaterial.specularShininess = shininess;\r\nmaterial.specularStrength = specularStrength;\r\n",THREE.ShaderChunk.lights_phong_pars_fragment="varying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n\r\nstruct BlinnPhongMaterial {\r\n\r\n	vec3	diffuseColor;\r\n	vec3	specularColor;\r\n	float	specularShininess;\r\n	float	specularStrength;\r\n\r\n};\r\n\r\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\r\n\r\n	vec3 irradiance = dotNL * directLight.color;\r\n\r\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n		irradiance *= PI; // punctual light\r\n\r\n	#endif\r\n\r\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\r\n\r\n}\r\n\r\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\n#define RE_Direct				RE_Direct_BlinnPhong\r\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\r\n\r\n#define Material_LightProbeLOD( material )	(0)\r\n",THREE.ShaderChunk.lights_physical_fragment="PhysicalMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\r\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\r\n#ifdef STANDARD\r\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\r\n#else\r\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\r\n	material.clearCoat = saturate( clearCoat ); // Burley clearcoat model\r\n	material.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\r\n#endif\r\n",
THREE.ShaderChunk.lights_physical_pars_fragment="struct PhysicalMaterial {\r\n\r\n	vec3	diffuseColor;\r\n	float	specularRoughness;\r\n	vec3	specularColor;\r\n\r\n	#ifndef STANDARD\r\n		float clearCoat;\r\n		float clearCoatRoughness;\r\n	#endif\r\n\r\n};\r\n\r\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\r\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\r\n\r\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\r\n\r\n	vec3 irradiance = dotNL * directLight.color;\r\n\r\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n		irradiance *= PI; // punctual light\r\n\r\n	#endif\r\n\r\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\r\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n	#ifndef STANDARD\r\n\r\n		reflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\r\n\r\n	#endif\r\n\r\n}\r\n\r\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	reflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\r\n\r\n	#ifndef STANDARD\r\n\r\n		reflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\r\n\r\n	#endif\r\n\r\n}\r\n\r\n#define RE_Direct				RE_Direct_Physical\r\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\r\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\r\n\r\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\r\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\r\n\r\n// ref: http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr_v2.pdf\r\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\r\n\r\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\r\n\r\n}\r\n",THREE.ShaderChunk.lights_template="//\r\n// This is a template that can be used to light a material, it uses pluggable RenderEquations (RE)\r\n//   for specific lighting scenarios.\r\n//\r\n// Instructions for use:\r\n//  - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\r\n//  - If you have defined an RE_IndirectSpecular, you need to also provide a Material_LightProbeLOD. <---- ???\r\n//  - Create a material parameter that is to be passed as the third parameter to your lighting functions.\r\n//\r\n// TODO:\r\n//  - Add area light support.\r\n//  - Add sphere light support.\r\n//  - Add diffuse light probe (irradiance cubemap) support.\r\n//\r\n\r\nGeometricContext geometry;\r\n\r\ngeometry.position = - vViewPosition;\r\ngeometry.normal = normal;\r\ngeometry.viewDir = normalize( vViewPosition );\r\n\r\nIncidentLight directLight;\r\n\r\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n	PointLight pointLight;\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		pointLight = pointLights[ i ];\r\n\r\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\r\n\r\n		#ifdef USE_SHADOWMAP\r\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\r\n		#endif\r\n\r\n		RE_Direct( directLight, geometry, material, reflectedLight );\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n	SpotLight spotLight;\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		spotLight = spotLights[ i ];\r\n\r\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\r\n\r\n		#ifdef USE_SHADOWMAP\r\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\r\n		#endif\r\n\r\n		RE_Direct( directLight, geometry, material, reflectedLight );\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n	DirectionalLight directionalLight;\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		directionalLight = directionalLights[ i ];\r\n\r\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\r\n\r\n		#ifdef USE_SHADOWMAP\r\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n		#endif\r\n\r\n		RE_Direct( directLight, geometry, material, reflectedLight );\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if defined( RE_IndirectDiffuse )\r\n\r\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\r\n\r\n	#ifdef USE_LIGHTMAP\r\n\r\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\r\n\r\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n			lightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\r\n\r\n		#endif\r\n\r\n		irradiance += lightMapIrradiance;\r\n\r\n	#endif\r\n\r\n	#if ( NUM_HEMI_LIGHTS > 0 )\r\n\r\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\r\n\r\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\r\n\r\n		}\r\n\r\n	#endif\r\n\r\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n		// TODO, replace 8 with the real maxMIPLevel\r\n	 	irradiance += getLightProbeIndirectIrradiance( /*lightProbe,*/ geometry, 8 );\r\n\r\n	#endif\r\n\r\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\r\n\r\n#endif\r\n\r\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\r\n\r\n	// TODO, replace 8 with the real maxMIPLevel\r\n	vec3 radiance = getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry, Material_BlinnShininessExponent( material ), 8 );\r\n\r\n	#ifndef STANDARD\r\n		vec3 clearCoatRadiance = getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\r\n	#else\r\n		vec3 clearCoatRadiance = vec3( 0.0 );\r\n	#endif\r\n		\r\n	RE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\r\n\r\n#endif\r\n",THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\r\n\r\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\r\n\r\n#endif",THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\r\n\r\n	uniform float logDepthBufFC;\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		varying float vFragDepth;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		varying float vFragDepth;\r\n\r\n	#endif\r\n\r\n	uniform float logDepthBufFC;\r\n\r\n#endif",THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\r\n\r\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		vFragDepth = 1.0 + gl_Position.w;\r\n\r\n	#else\r\n\r\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\r\n\r\n	vec4 texelColor = texture2D( map, vUv );\r\n\r\n	texelColor = mapTexelToLinear( texelColor );\r\n	diffuseColor *= texelColor;\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_pars_fragment="#ifdef USE_MAP\r\n\r\n	uniform sampler2D map;\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\r\n\r\n	vec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\r\n	diffuseColor *= mapTexelToLinear( mapTexel );\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\r\n\r\n	uniform vec4 offsetRepeat;\r\n	uniform sampler2D map;\r\n\r\n#endif\r\n",THREE.ShaderChunk.metalnessmap_fragment="float metalnessFactor = metalness;\r\n\r\n#ifdef USE_METALNESSMAP\r\n\r\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\r\n	metalnessFactor *= texelMetalness.r;\r\n\r\n#endif\r\n",THREE.ShaderChunk.metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\r\n\r\n	uniform sampler2D metalnessMap;\r\n\r\n#endif",THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\r\n\r\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\r\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\r\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\r\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\r\n\r\n#endif\r\n",THREE.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\r\n\r\n	#ifndef USE_MORPHNORMALS\r\n\r\n	uniform float morphTargetInfluences[ 8 ];\r\n\r\n	#else\r\n\r\n	uniform float morphTargetInfluences[ 4 ];\r\n\r\n	#endif\r\n\r\n#endif",THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\r\n\r\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\r\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\r\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\r\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\r\n\r\n	#ifndef USE_MORPHNORMALS\r\n\r\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\r\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\r\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\r\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.normal_flip="#ifdef DOUBLE_SIDED\r\n	float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n#else\r\n	float flipNormal = 1.0;\r\n#endif\r\n",THREE.ShaderChunk.normal_fragment="#ifdef FLAT_SHADED\r\n\r\n	// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\r\n\r\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\r\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\r\n	vec3 normal = normalize( cross( fdx, fdy ) );\r\n\r\n#else\r\n\r\n	vec3 normal = normalize( vNormal ) * flipNormal;\r\n\r\n#endif\r\n\r\n#ifdef USE_NORMALMAP\r\n\r\n	normal = perturbNormal2Arb( -vViewPosition, normal );\r\n\r\n#elif defined( USE_BUMPMAP )\r\n\r\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n#endif\r\n",THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\r\n\r\n	uniform sampler2D normalMap;\r\n	uniform vec2 normalScale;\r\n\r\n	// Per-Pixel Tangent Space Normal Mapping\r\n	// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\r\n\r\n		vec3 q0 = dFdx( eye_pos.xyz );\r\n		vec3 q1 = dFdy( eye_pos.xyz );\r\n		vec2 st0 = dFdx( vUv.st );\r\n		vec2 st1 = dFdy( vUv.st );\r\n\r\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\r\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\r\n		vec3 N = normalize( surf_norm );\r\n\r\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\r\n		mapN.xy = normalScale * mapN.xy;\r\n		mat3 tsn = mat3( S, T, N );\r\n		return normalize( tsn * mapN );\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.packing="vec3 packNormalToRGB( const in vec3 normal ) {\r\n  return normalize( normal ) * 0.5 + 0.5;\r\n}\r\n\r\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\r\n  return 1.0 - 2.0 * rgb.xyz;\r\n}\r\n\r\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\r\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\r\n\r\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\r\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\r\n\r\nconst float ShiftRight8 = 1. / 256.;\r\n\r\nvec4 packDepthToRGBA( const in float v ) {\r\n\r\n	vec4 r = vec4( fract( v * PackFactors ), v );\r\n	r.yzw -= r.xyz * ShiftRight8; // tidy overflow\r\n	return r * PackUpscale;\r\n\r\n}\r\n\r\nfloat unpackRGBAToDepth( const in vec4 v ) {\r\n\r\n	return dot( v, UnpackFactors );\r\n\r\n}\r\n\r\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\r\n\r\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\r\n  return ( viewZ + near ) / ( near - far );\r\n}\r\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\r\n  return linearClipZ * ( near - far ) - near;\r\n}\r\n\r\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\r\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\r\n}\r\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\r\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\r\n}\r\n",THREE.ShaderChunk.premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\r\n\r\n	// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\r\n	gl_FragColor.rgb *= gl_FragColor.a;\r\n\r\n#endif\r\n",THREE.ShaderChunk.project_vertex="#ifdef USE_SKINNING\r\n\r\n	vec4 mvPosition = modelViewMatrix * skinned;\r\n\r\n#else\r\n\r\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\r\n\r\n#endif\r\n\r\ngl_Position = projectionMatrix * mvPosition;\r\n",THREE.ShaderChunk.roughnessmap_fragment="float roughnessFactor = roughness;\r\n\r\n#ifdef USE_ROUGHNESSMAP\r\n\r\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\r\n	roughnessFactor *= texelRoughness.r;\r\n\r\n#endif\r\n",THREE.ShaderChunk.roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\r\n\r\n	uniform sampler2D roughnessMap;\r\n\r\n#endif",THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\r\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\r\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\r\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\r\n\r\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\r\n\r\n	}\r\n\r\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\r\n\r\n		const vec2 offset = vec2( 0.0, 1.0 );\r\n\r\n		vec2 texelSize = vec2( 1.0 ) / size;\r\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\r\n\r\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\r\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\r\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\r\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\r\n\r\n		vec2 f = fract( uv * size + 0.5 );\r\n\r\n		float a = mix( lb, lt, f.y );\r\n		float b = mix( rb, rt, f.y );\r\n		float c = mix( a, b, f.x );\r\n\r\n		return c;\r\n\r\n	}\r\n\r\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\r\n\r\n		shadowCoord.xyz /= shadowCoord.w;\r\n		shadowCoord.z += shadowBias;\r\n\r\n		// if ( something && something ) breaks ATI OpenGL shader compiler\r\n		// if ( all( something, something ) ) using this instead\r\n\r\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\r\n		bool inFrustum = all( inFrustumVec );\r\n\r\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\r\n\r\n		bool frustumTest = all( frustumTestVec );\r\n\r\n		if ( frustumTest ) {\r\n\r\n		#if defined( SHADOWMAP_TYPE_PCF )\r\n\r\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\r\n\r\n			float dx0 = - texelSize.x * shadowRadius;\r\n			float dy0 = - texelSize.y * shadowRadius;\r\n			float dx1 = + texelSize.x * shadowRadius;\r\n			float dy1 = + texelSize.y * shadowRadius;\r\n\r\n			return (\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\r\n			) * ( 1.0 / 9.0 );\r\n\r\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\r\n\r\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\r\n\r\n			float dx0 = - texelSize.x * shadowRadius;\r\n			float dy0 = - texelSize.y * shadowRadius;\r\n			float dx1 = + texelSize.x * shadowRadius;\r\n			float dy1 = + texelSize.y * shadowRadius;\r\n\r\n			return (\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\r\n			) * ( 1.0 / 9.0 );\r\n\r\n		#else // no percentage-closer filtering:\r\n\r\n			return texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\r\n\r\n		#endif\r\n\r\n		}\r\n\r\n		return 1.0;\r\n\r\n	}\r\n\r\n	// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\r\n	// vector suitable for 2D texture mapping. This code uses the following layout for the\r\n	// 2D texture:\r\n	//\r\n	// xzXZ\r\n	//  y Y\r\n	//\r\n	// Y - Positive y direction\r\n	// y - Negative y direction\r\n	// X - Positive x direction\r\n	// x - Negative x direction\r\n	// Z - Positive z direction\r\n	// z - Negative z direction\r\n	//\r\n	// Source and test bed:\r\n	// https://gist.github.com/tschw/da10c43c467ce8afd0c4\r\n\r\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\r\n\r\n		// Number of texels to avoid at the edge of each square\r\n\r\n		vec3 absV = abs( v );\r\n\r\n		// Intersect unit cube\r\n\r\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\r\n		absV *= scaleToCube;\r\n\r\n		// Apply scale to avoid seams\r\n\r\n		// two texels less per square (one texel will do for NEAREST)\r\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\r\n\r\n		// Unwrap\r\n\r\n		// space: -1 ... 1 range for each square\r\n		//\r\n		// #X##		dim    := ( 4 , 2 )\r\n		//  # #		center := ( 1 , 1 )\r\n\r\n		vec2 planar = v.xy;\r\n\r\n		float almostATexel = 1.5 * texelSizeY;\r\n		float almostOne = 1.0 - almostATexel;\r\n\r\n		if ( absV.z >= almostOne ) {\r\n\r\n			if ( v.z > 0.0 )\r\n				planar.x = 4.0 - v.x;\r\n\r\n		} else if ( absV.x >= almostOne ) {\r\n\r\n			float signX = sign( v.x );\r\n			planar.x = v.z * signX + 2.0 * signX;\r\n\r\n		} else if ( absV.y >= almostOne ) {\r\n\r\n			float signY = sign( v.y );\r\n			planar.x = v.x + 2.0 * signY + 2.0;\r\n			planar.y = v.z * signY - 2.0;\r\n\r\n		}\r\n\r\n		// Transform to UV space\r\n\r\n		// scale := 0.5 / dim\r\n		// translate := ( center + 0.5 ) / dim\r\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\r\n\r\n	}\r\n\r\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\r\n\r\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\r\n\r\n		// for point lights, the uniform @vShadowCoord is re-purposed to hold\r\n		// the distance from the light to the world-space position of the fragment.\r\n		vec3 lightToPosition = shadowCoord.xyz;\r\n\r\n		// bd3D = base direction 3D\r\n		vec3 bd3D = normalize( lightToPosition );\r\n		// dp = distance from light to fragment position\r\n		float dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\r\n\r\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\r\n\r\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\r\n\r\n			return (\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\r\n			) * ( 1.0 / 9.0 );\r\n\r\n		#else // no percentage-closer filtering\r\n\r\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\r\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\r\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\r\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.shadowmask_pars_fragment="float getShadowMask() {\r\n\r\n	float shadow = 1.0;\r\n\r\n	#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n	DirectionalLight directionalLight;\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		directionalLight = directionalLights[ i ];\r\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n	SpotLight spotLight;\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		spotLight = spotLights[ i ];\r\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n	PointLight pointLight;\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		pointLight = pointLights[ i ];\r\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#endif\r\n\r\n	return shadow;\r\n\r\n}\r\n",THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\r\n\r\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\r\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\r\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\r\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\r\n\r\n#endif",THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\r\n\r\n	uniform mat4 bindMatrix;\r\n	uniform mat4 bindMatrixInverse;\r\n\r\n	#ifdef BONE_TEXTURE\r\n\r\n		uniform sampler2D boneTexture;\r\n		uniform int boneTextureWidth;\r\n		uniform int boneTextureHeight;\r\n\r\n		mat4 getBoneMatrix( const in float i ) {\r\n\r\n			float j = i * 4.0;\r\n			float x = mod( j, float( boneTextureWidth ) );\r\n			float y = floor( j / float( boneTextureWidth ) );\r\n\r\n			float dx = 1.0 / float( boneTextureWidth );\r\n			float dy = 1.0 / float( boneTextureHeight );\r\n\r\n			y = dy * ( y + 0.5 );\r\n\r\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\r\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\r\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\r\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\r\n\r\n			mat4 bone = mat4( v1, v2, v3, v4 );\r\n\r\n			return bone;\r\n\r\n		}\r\n\r\n	#else\r\n\r\n		uniform mat4 boneMatrices[ MAX_BONES ];\r\n\r\n		mat4 getBoneMatrix( const in float i ) {\r\n\r\n			mat4 bone = boneMatrices[ int(i) ];\r\n			return bone;\r\n\r\n		}\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\r\n\r\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\r\n\r\n	vec4 skinned = vec4( 0.0 );\r\n	skinned += boneMatX * skinVertex * skinWeight.x;\r\n	skinned += boneMatY * skinVertex * skinWeight.y;\r\n	skinned += boneMatZ * skinVertex * skinWeight.z;\r\n	skinned += boneMatW * skinVertex * skinWeight.w;\r\n	skinned  = bindMatrixInverse * skinned;\r\n\r\n#endif\r\n",THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\r\n\r\n	mat4 skinMatrix = mat4( 0.0 );\r\n	skinMatrix += skinWeight.x * boneMatX;\r\n	skinMatrix += skinWeight.y * boneMatY;\r\n	skinMatrix += skinWeight.z * boneMatZ;\r\n	skinMatrix += skinWeight.w * boneMatW;\r\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\r\n\r\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\r\n\r\n#endif\r\n",THREE.ShaderChunk.specularmap_fragment="float specularStrength;\r\n\r\n#ifdef USE_SPECULARMAP\r\n\r\n	vec4 texelSpecular = texture2D( specularMap, vUv );\r\n	specularStrength = texelSpecular.r;\r\n\r\n#else\r\n\r\n	specularStrength = 1.0;\r\n\r\n#endif",THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\r\n\r\n	uniform sampler2D specularMap;\r\n\r\n#endif",THREE.ShaderChunk.tonemapping_fragment="#if defined( TONE_MAPPING )\r\n\r\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\r\n\r\n#endif\r\n",THREE.ShaderChunk.tonemapping_pars_fragment="#define saturate(a) clamp( a, 0.0, 1.0 )\r\n\r\nuniform float toneMappingExposure;\r\nuniform float toneMappingWhitePoint;\r\n\r\n// exposure only\r\nvec3 LinearToneMapping( vec3 color ) {\r\n\r\n  return toneMappingExposure * color;\r\n\r\n}\r\n\r\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\r\nvec3 ReinhardToneMapping( vec3 color ) {\r\n\r\n  color *= toneMappingExposure;\r\n  return saturate( color / ( vec3( 1.0 ) + color ) );\r\n\r\n}\r\n\r\n// source: http://filmicgames.com/archives/75\r\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\r\nvec3 Uncharted2ToneMapping( vec3 color ) {\r\n\r\n  // John Hable's filmic operator from Uncharted 2 video game\r\n  color *= toneMappingExposure;\r\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\r\n\r\n}\r\n\r\n// source: http://filmicgames.com/archives/75\r\nvec3 OptimizedCineonToneMapping( vec3 color ) {\r\n\r\n  // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n  color *= toneMappingExposure;\r\n  color = max( vec3( 0.0 ), color - 0.004 );\r\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\r\n\r\n}\r\n",THREE.ShaderChunk.uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\r\n\r\n	varying vec2 vUv2;\r\n\r\n#endif",THREE.ShaderChunk.uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\r\n\r\n	attribute vec2 uv2;\r\n	varying vec2 vUv2;\r\n\r\n#endif",THREE.ShaderChunk.uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\r\n\r\n	vUv2 = uv2;\r\n\r\n#endif",THREE.ShaderChunk.uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\r\n\r\n	varying vec2 vUv;\r\n\r\n#endif",THREE.ShaderChunk.uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\r\n\r\n	varying vec2 vUv;\r\n	uniform vec4 offsetRepeat;\r\n\r\n#endif\r\n",THREE.ShaderChunk.uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\r\n\r\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n#endif",THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\r\n\r\n	#ifdef USE_SKINNING\r\n\r\n		vec4 worldPosition = modelMatrix * skinned;\r\n\r\n	#else\r\n\r\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.cube_frag="uniform samplerCube tCube;\r\nuniform float tFlip;\r\n\r\nvarying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n}\r\n",
THREE.ShaderChunk.cube_vert="varying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	vWorldPosition = transformDirection( position, modelMatrix );\r\n\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.depth_frag="#if DEPTH_PACKING == 3200\r\n\r\n	uniform float opacity;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( 1.0 );\r\n\r\n	#if DEPTH_PACKING == 3200\r\n\r\n		diffuseColor.a = opacity;\r\n\r\n	#endif\r\n\r\n	#include <map_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n	#if DEPTH_PACKING == 3200\r\n\r\n		gl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\r\n\r\n	#elif DEPTH_PACKING == 3201\r\n\r\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\r\n\r\n	#endif\r\n\r\n}\r\n",THREE.ShaderChunk.depth_vert="#include <common>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n\r\n	#include <skinbase_vertex>\r\n\r\n	#include <begin_vertex>\r\n	#include <displacementmap_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.distanceRGBA_frag="uniform vec3 lightPos;\r\nvarying vec4 vWorldPosition;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main () {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	gl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\r\n\r\n}\r\n",THREE.ShaderChunk.distanceRGBA_vert="varying vec4 vWorldPosition;\r\n\r\n#include <common>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <skinbase_vertex>\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <worldpos_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	vWorldPosition = worldPosition;\r\n\r\n}\r\n",THREE.ShaderChunk.equirect_frag="uniform sampler2D tEquirect;\r\nuniform float tFlip;\r\n\r\nvarying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	// 	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\r\n	vec3 direction = normalize( vWorldPosition );\r\n	vec2 sampleUV;\r\n	sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\r\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\r\n	gl_FragColor = texture2D( tEquirect, sampleUV );\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.equirect_vert="varying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	vWorldPosition = transformDirection( position, modelMatrix );\r\n\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.linedashed_frag="uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float dashSize;\r\nuniform float totalSize;\r\n\r\nvarying float vLineDistance;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\r\n\r\n		discard;\r\n\r\n	}\r\n\r\n	vec3 outgoingLight = vec3( 0.0 );\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <color_fragment>\r\n\r\n	outgoingLight = diffuseColor.rgb; // simple shader\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.linedashed_vert="uniform float scale;\r\nattribute float lineDistance;\r\n\r\nvarying float vLineDistance;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <color_vertex>\r\n\r\n	vLineDistance = scale * lineDistance;\r\n\r\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n	gl_Position = projectionMatrix * mvPosition;\r\n\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshbasic_frag="uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n\r\n	ReflectedLight reflectedLight;\r\n	reflectedLight.directDiffuse = vec3( 0.0 );\r\n	reflectedLight.directSpecular = vec3( 0.0 );\r\n	reflectedLight.indirectDiffuse = diffuseColor.rgb;\r\n	reflectedLight.indirectSpecular = vec3( 0.0 );\r\n\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\r\n\r\n	#include <normal_flip>\r\n	#include <envmap_fragment>\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshbasic_vert="#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n	#include <skinbase_vertex>\r\n\r\n	#ifdef USE_ENVMAP\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n	#endif\r\n\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n\r\n	#include <worldpos_vertex>\r\n	#include <clipping_planes_vertex>\r\n	#include <envmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshlambert_frag="uniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform float opacity;\r\n\r\nvarying vec3 vLightFront;\r\n\r\n#ifdef DOUBLE_SIDED\r\n\r\n	varying vec3 vLightBack;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <fog_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <shadowmask_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n	vec3 totalEmissiveRadiance = emissive;\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n	#include <emissivemap_fragment>\r\n\r\n	// accumulation\r\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\r\n\r\n	#include <lightmap_fragment>\r\n\r\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\r\n\r\n	#ifdef DOUBLE_SIDED\r\n\r\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\r\n\r\n	#else\r\n\r\n		reflectedLight.directDiffuse = vLightFront;\r\n\r\n	#endif\r\n\r\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\r\n\r\n	// modulation\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\r\n\r\n	#include <normal_flip>\r\n	#include <envmap_fragment>\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshlambert_vert="#define LAMBERT\r\n\r\nvarying vec3 vLightFront;\r\n\r\n#ifdef DOUBLE_SIDED\r\n\r\n	varying vec3 vLightBack;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinbase_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	#include <worldpos_vertex>\r\n	#include <envmap_vertex>\r\n	#include <lights_lambert_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphong_frag="#define PHONG\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <lights_phong_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n	vec3 totalEmissiveRadiance = emissive;\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n	#include <normal_flip>\r\n	#include <normal_fragment>\r\n	#include <emissivemap_fragment>\r\n\r\n	// accumulation\r\n	#include <lights_phong_fragment>\r\n	#include <lights_template>\r\n\r\n	// modulation\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n	#include <envmap_fragment>\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphong_vert="#define PHONG\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinbase_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n	vNormal = normalize( transformedNormal );\r\n\r\n#endif\r\n\r\n	#include <begin_vertex>\r\n	#include <displacementmap_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	vViewPosition = - mvPosition.xyz;\r\n\r\n	#include <worldpos_vertex>\r\n	#include <envmap_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphysical_frag="#define PHYSICAL\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform float roughness;\r\nuniform float metalness;\r\nuniform float opacity;\r\n\r\n#ifndef STANDARD\r\n	uniform float clearCoat;\r\n	uniform float clearCoatRoughness;\r\n#endif\r\n\r\nuniform float envMapIntensity; // temporary\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <cube_uv_reflection_fragment>\r\n#include <lights_pars>\r\n#include <lights_physical_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <roughnessmap_pars_fragment>\r\n#include <metalnessmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n	vec3 totalEmissiveRadiance = emissive;\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n	#include <roughnessmap_fragment>\r\n	#include <metalnessmap_fragment>\r\n	#include <normal_flip>\r\n	#include <normal_fragment>\r\n	#include <emissivemap_fragment>\r\n\r\n	// accumulation\r\n	#include <lights_physical_fragment>\r\n	#include <lights_template>\r\n\r\n	// modulation\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphysical_vert="#define PHYSICAL\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinbase_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n	vNormal = normalize( transformedNormal );\r\n\r\n#endif\r\n\r\n	#include <begin_vertex>\r\n	#include <displacementmap_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	vViewPosition = - mvPosition.xyz;\r\n\r\n	#include <worldpos_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.normal_frag="uniform float opacity;\r\nvarying vec3 vNormal;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n	gl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.normal_vert="varying vec3 vNormal;\r\n\r\n#include <common>\r\n#include <morphtarget_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	vNormal = normalize( normalMatrix * normal );\r\n\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.points_frag="uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <map_particle_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec3 outgoingLight = vec3( 0.0 );\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_particle_fragment>\r\n	#include <color_fragment>\r\n	#include <alphatest_fragment>\r\n\r\n	outgoingLight = diffuseColor.rgb;\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.points_vert="uniform float size;\r\nuniform float scale;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <color_vertex>\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n\r\n	#ifdef USE_SIZEATTENUATION\r\n		gl_PointSize = size * ( scale / - mvPosition.z );\r\n	#else\r\n		gl_PointSize = size;\r\n	#endif\r\n\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n	#include <worldpos_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.shadow_frag="uniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <shadowmap_pars_fragment>\r\n#include <shadowmask_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	gl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\r\n\r\n}\r\n",THREE.ShaderChunk.shadow_vert="#include <shadowmap_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n	#include <worldpos_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.alphamap_fragment="#ifdef USE_ALPHAMAP\r\n\r\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\r\n\r\n#endif\r\n",THREE.ShaderChunk.alphamap_pars_fragment="#ifdef USE_ALPHAMAP\r\n\r\n	uniform sampler2D alphaMap;\r\n\r\n#endif\r\n",THREE.ShaderChunk.alphatest_fragment="#ifdef ALPHATEST\r\n\r\n	if ( diffuseColor.a < ALPHATEST ) discard;\r\n\r\n#endif\r\n",THREE.ShaderChunk.aomap_fragment="#ifdef USE_AOMAP\r\n\r\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\r\n\r\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\r\n\r\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL )\r\n\r\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n\r\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.aomap_pars_fragment="#ifdef USE_AOMAP\r\n\r\n	uniform sampler2D aoMap;\r\n	uniform float aoMapIntensity;\r\n\r\n#endif",THREE.ShaderChunk.begin_vertex="\r\nvec3 transformed = vec3( position );\r\n",THREE.ShaderChunk.beginnormal_vertex="\r\nvec3 objectNormal = vec3( normal );\r\n",THREE.ShaderChunk.bsdfs='bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\r\n\r\n	return any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\r\n\r\n}\r\n\r\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\r\n\r\n		if( decayExponent > 0.0 ) {\r\n\r\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\r\n\r\n			// based upon Frostbite 3 Moving to Physically-based Rendering\r\n			// page 32, equation 26: E[window1]\r\n			// http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr_v2.pdf\r\n			// this is intended to be used on spot and point lights who are represented as luminous intensity\r\n			// but who must be converted to luminous irradiance for surface lighting calculation\r\n			float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\r\n			float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\r\n			return distanceFalloff * maxDistanceCutoffFactor;\r\n\r\n#else\r\n\r\n			return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\r\n\r\n#endif\r\n\r\n		}\r\n\r\n		return 1.0;\r\n}\r\n\r\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\r\n\r\n	return RECIPROCAL_PI * diffuseColor;\r\n\r\n} // validated\r\n\r\n\r\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\r\n\r\n	// Original approximation by Christophe Schlick \'94\r\n	//;float fresnel = pow( 1.0 - dotLH, 5.0 );\r\n\r\n	// Optimized variant (presented by Epic at SIGGRAPH \'13)\r\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\r\n\r\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\r\n\r\n} // validated\r\n\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (34)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is "roughness squared" in Disney’s reparameterization\r\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\r\n\r\n	// geometry term = G(l)⋅G(v) / 4(n⋅l)(n⋅v)\r\n\r\n	float a2 = pow2( alpha );\r\n\r\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\r\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\r\n\r\n	return 1.0 / ( gl * gv );\r\n\r\n} // validated\r\n\r\n// from page 12, listing 2 of http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr_v2.pdf\r\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\r\n\r\n	float a2 = pow2( alpha );\r\n\r\n	// dotNL and dotNV are explicitly swapped. This is not a mistake.\r\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\r\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\r\n\r\n	return 0.5 / max( gv + gl, EPSILON );\r\n}\r\n\r\n\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is "roughness squared" in Disney’s reparameterization\r\nfloat D_GGX( const in float alpha, const in float dotNH ) {\r\n\r\n	float a2 = pow2( alpha );\r\n\r\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\r\n\r\n	return RECIPROCAL_PI * a2 / pow2( denom );\r\n\r\n}\r\n\r\n\r\n// GGX Distribution, Schlick Fresnel, GGX-Smith Visibility\r\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\r\n\r\n	float alpha = pow2( roughness ); // UE4\'s roughness\r\n\r\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\r\n\r\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\r\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\r\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\r\n\r\n	vec3 F = F_Schlick( specularColor, dotLH );\r\n\r\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\r\n\r\n	float D = D_GGX( alpha, dotNH );\r\n\r\n	return F * ( G * D );\r\n\r\n} // validated\r\n\r\n\r\n// ref: https://www.unrealengine.com/blog/physically-based-shading-on-mobile - environmentBRDF for GGX on mobile\r\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\r\n\r\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n\r\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\r\n\r\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\r\n\r\n	vec4 r = roughness * c0 + c1;\r\n\r\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\r\n\r\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\r\n\r\n	return specularColor * AB.x + AB.y;\r\n\r\n} // validated\r\n\r\n\r\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\r\n\r\n	// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\r\n	return 0.25;\r\n\r\n}\r\n\r\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\r\n\r\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\r\n\r\n}\r\n\r\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\r\n\r\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\r\n\r\n	//float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\r\n	//float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\r\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\r\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\r\n\r\n	vec3 F = F_Schlick( specularColor, dotLH );\r\n\r\n	float G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\r\n\r\n	float D = D_BlinnPhong( shininess, dotNH );\r\n\r\n	return F * ( G * D );\r\n\r\n} // validated\r\n\r\n// source: http://simonstechblog.blogspot.ca/2011/12/microfacet-brdf.html\r\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\r\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\r\n}\r\n\r\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\r\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\r\n}\r\n',THREE.ShaderChunk.bumpmap_pars_fragment="#ifdef USE_BUMPMAP\r\n\r\n	uniform sampler2D bumpMap;\r\n	uniform float bumpScale;\r\n\r\n	// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\r\n	// http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\r\n\r\n	// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\n	vec2 dHdxy_fwd() {\r\n\r\n		vec2 dSTdx = dFdx( vUv );\r\n		vec2 dSTdy = dFdy( vUv );\r\n\r\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\r\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\r\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\r\n\r\n		return vec2( dBx, dBy );\r\n\r\n	}\r\n\r\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\r\n\r\n		vec3 vSigmaX = dFdx( surf_pos );\r\n		vec3 vSigmaY = dFdy( surf_pos );\r\n		vec3 vN = surf_norm;		// normalized\r\n\r\n		vec3 R1 = cross( vSigmaY, vN );\r\n		vec3 R2 = cross( vN, vSigmaX );\r\n\r\n		float fDet = dot( vSigmaX, R1 );\r\n\r\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\r\n		return normalize( abs( fDet ) * surf_norm - vGrad );\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\r\n\r\n	for ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\r\n\r\n		vec4 plane = clippingPlanes[ i ];\r\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\r\n\r\n	#if ! defined( PHYSICAL ) && ! defined( PHONG )\r\n		varying vec3 vViewPosition;\r\n	#endif\r\n\r\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\r\n\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\r\n	varying vec3 vViewPosition;\r\n#endif\r\n",THREE.ShaderChunk.clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\r\n	vViewPosition = - mvPosition.xyz;\r\n#endif\r\n\r\n",THREE.ShaderChunk.color_fragment="#ifdef USE_COLOR\r\n\r\n	diffuseColor.rgb *= vColor;\r\n\r\n#endif",THREE.ShaderChunk.color_pars_fragment="#ifdef USE_COLOR\r\n\r\n	varying vec3 vColor;\r\n\r\n#endif\r\n",THREE.ShaderChunk.color_pars_vertex="#ifdef USE_COLOR\r\n\r\n	varying vec3 vColor;\r\n\r\n#endif",THREE.ShaderChunk.color_vertex="#ifdef USE_COLOR\r\n\r\n	vColor.xyz = color.xyz;\r\n\r\n#endif",THREE.ShaderChunk.common="#define PI 3.14159265359\r\n#define PI2 6.28318530718\r\n#define RECIPROCAL_PI 0.31830988618\r\n#define RECIPROCAL_PI2 0.15915494\r\n#define LOG2 1.442695\r\n#define EPSILON 1e-6\r\n\r\n#define saturate(a) clamp( a, 0.0, 1.0 )\r\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\r\n\r\nfloat pow2( const in float x ) { return x*x; }\r\nfloat pow3( const in float x ) { return x*x*x; }\r\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\r\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\r\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\r\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\r\nhighp float rand( const in vec2 uv ) {\r\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\r\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\r\n	return fract(sin(sn) * c);\r\n}\r\n\r\nstruct IncidentLight {\r\n	vec3 color;\r\n	vec3 direction;\r\n	bool visible;\r\n};\r\n\r\nstruct ReflectedLight {\r\n	vec3 directDiffuse;\r\n	vec3 directSpecular;\r\n	vec3 indirectDiffuse;\r\n	vec3 indirectSpecular;\r\n};\r\n\r\nstruct GeometricContext {\r\n	vec3 position;\r\n	vec3 normal;\r\n	vec3 viewDir;\r\n};\r\n\r\n\r\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\r\n\r\n}\r\n\r\n// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\r\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\r\n\r\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\r\n\r\n}\r\n\r\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\r\n	float distance = dot( planeNormal, point - pointOnPlane );\r\n\r\n	return - distance * planeNormal + point;\r\n\r\n}\r\n\r\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\r\n	return sign( dot( point - pointOnPlane, planeNormal ) );\r\n\r\n}\r\n\r\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\r\n\r\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\r\n\r\n}\r\n",
THREE.ShaderChunk.cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\r\n\r\n#define cubeUV_textureSize (1024.0)\r\n\r\nint getFaceFromDirection(vec3 direction) {\r\n	vec3 absDirection = abs(direction);\r\n	int face = -1;\r\n	if( absDirection.x > absDirection.z ) {\r\n		if(absDirection.x > absDirection.y )\r\n			face = direction.x > 0.0 ? 0 : 3;\r\n		else\r\n			face = direction.y > 0.0 ? 1 : 4;\r\n	}\r\n	else {\r\n		if(absDirection.z > absDirection.y )\r\n			face = direction.z > 0.0 ? 2 : 5;\r\n		else\r\n			face = direction.y > 0.0 ? 1 : 4;\r\n	}\r\n	return face;\r\n}\r\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\r\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\r\n\r\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\r\n	float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\r\n	float dxRoughness = dFdx(roughness);\r\n	float dyRoughness = dFdy(roughness);\r\n	vec3 dx = dFdx( vec * scale * dxRoughness );\r\n	vec3 dy = dFdy( vec * scale * dyRoughness );\r\n	float d = max( dot( dx, dx ), dot( dy, dy ) );\r\n	// Clamp the value to the max mip level counts. hard coded to 6 mips\r\n	d = clamp(d, 1.0, cubeUV_rangeClamp);\r\n	float mipLevel = 0.5 * log2(d);\r\n	return vec2(floor(mipLevel), fract(mipLevel));\r\n}\r\n\r\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\r\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\r\n\r\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\r\n	mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\r\n	float a = 16.0 * cubeUV_rcpTextureSize;\r\n\r\n	vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\r\n	vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\r\n	// float powScale = exp2(roughnessLevel + mipLevel);\r\n	float powScale = exp2_packed.x * exp2_packed.y;\r\n	// float scale =  1.0 / exp2(roughnessLevel + 2.0 + mipLevel);\r\n	float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\r\n	// float mipOffset = 0.75*(1.0 - 1.0/exp2(mipLevel))/exp2(roughnessLevel);\r\n	float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\r\n\r\n	bool bRes = mipLevel == 0.0;\r\n	scale =  bRes && (scale < a) ? a : scale;\r\n\r\n	vec3 r;\r\n	vec2 offset;\r\n	int face = getFaceFromDirection(direction);\r\n\r\n	float rcpPowScale = 1.0 / powScale;\r\n\r\n	if( face == 0) {\r\n		r = vec3(direction.x, -direction.z, direction.y);\r\n		offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\r\n	}\r\n	else if( face == 1) {\r\n		r = vec3(direction.y, direction.x, direction.z);\r\n		offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\r\n	}\r\n	else if( face == 2) {\r\n		r = vec3(direction.z, direction.x, direction.y);\r\n		offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\r\n	}\r\n	else if( face == 3) {\r\n		r = vec3(direction.x, direction.z, direction.y);\r\n		offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\r\n	}\r\n	else if( face == 4) {\r\n		r = vec3(direction.y, direction.x, -direction.z);\r\n		offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\r\n	}\r\n	else {\r\n		r = vec3(direction.z, -direction.x, direction.y);\r\n		offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\r\n		offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\r\n	}\r\n	r = normalize(r);\r\n	float texelOffset = 0.5 * cubeUV_rcpTextureSize;\r\n	vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\r\n	vec2 base = offset + vec2( texelOffset );\r\n	return base + s * ( scale - 2.0 * texelOffset );\r\n}\r\n\r\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\r\n\r\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\r\n	float roughnessVal = roughness* cubeUV_maxLods3;\r\n	float r1 = floor(roughnessVal);\r\n	float r2 = r1 + 1.0;\r\n	float t = fract(roughnessVal);\r\n	vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\r\n	float s = mipInfo.y;\r\n	float level0 = mipInfo.x;\r\n	float level1 = level0 + 1.0;\r\n	level1 = level1 > 5.0 ? 5.0 : level1;\r\n\r\n	// round to nearest mipmap if we are not interpolating.\r\n	level0 += min( floor( s + 0.5 ), 5.0 );\r\n\r\n	// Tri linear interpolation.\r\n	vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\r\n	vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\r\n\r\n	vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\r\n	vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\r\n\r\n	vec4 result = mix(color10, color20, t);\r\n\r\n	return vec4(result.rgb, 1.0);\r\n}\r\n\r\n#endif\r\n",THREE.ShaderChunk.defaultnormal_vertex="#ifdef FLIP_SIDED\r\n\r\n	objectNormal = -objectNormal;\r\n\r\n#endif\r\n\r\nvec3 transformedNormal = normalMatrix * objectNormal;\r\n",THREE.ShaderChunk.displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\r\n\r\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\r\n\r\n#endif\r\n",THREE.ShaderChunk.displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\r\n\r\n	uniform sampler2D displacementMap;\r\n	uniform float displacementScale;\r\n	uniform float displacementBias;\r\n\r\n#endif\r\n",THREE.ShaderChunk.emissivemap_fragment="#ifdef USE_EMISSIVEMAP\r\n\r\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\r\n\r\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\r\n\r\n	totalEmissiveRadiance *= emissiveColor.rgb;\r\n\r\n#endif\r\n",THREE.ShaderChunk.emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\r\n\r\n	uniform sampler2D emissiveMap;\r\n\r\n#endif\r\n",THREE.ShaderChunk.encodings_pars_fragment="// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\r\n\r\nvec4 LinearToLinear( in vec4 value ) {\r\n  return value;\r\n}\r\n\r\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\r\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\r\n}\r\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\r\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\r\n}\r\n\r\nvec4 sRGBToLinear( in vec4 value ) {\r\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\r\n}\r\nvec4 LinearTosRGB( in vec4 value ) {\r\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\r\n}\r\n\r\nvec4 RGBEToLinear( in vec4 value ) {\r\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\r\n}\r\nvec4 LinearToRGBE( in vec4 value ) {\r\n  float maxComponent = max( max( value.r, value.g ), value.b );\r\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\r\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\r\n//  return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\r\n}\r\n\r\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\r\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\r\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\r\n}\r\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\r\n  float maxRGB = max( value.x, max( value.g, value.b ) );\r\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\r\n  M            = ceil( M * 255.0 ) / 255.0;\r\n  return vec4( value.rgb / ( M * maxRange ), M );\r\n}\r\n\r\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\r\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\r\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\r\n}\r\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\r\n    float maxRGB = max( value.x, max( value.g, value.b ) );\r\n    float D      = max( maxRange / maxRGB, 1.0 );\r\n    D            = min( floor( D ) / 255.0, 1.0 );\r\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\r\n}\r\n\r\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\r\n\r\n// M matrix, for encoding\r\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\r\nvec4 LinearToLogLuv( in vec4 value )  {\r\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\r\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\r\n  vec4 vResult;\r\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\r\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\r\n  vResult.w = fract(Le);\r\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\r\n  return vResult;\r\n}\r\n\r\n// Inverse M matrix, for decoding\r\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\r\nvec4 LogLuvToLinear( in vec4 value ) {\r\n  float Le = value.z * 255.0 + value.w;\r\n  vec3 Xp_Y_XYZp;\r\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\r\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\r\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\r\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\r\n  return vec4( max(vRGB, 0.0), 1.0 );\r\n}\r\n",THREE.ShaderChunk.encodings_fragment="  gl_FragColor = linearToOutputTexel( gl_FragColor );\r\n",THREE.ShaderChunk.envmap_fragment="#ifdef USE_ENVMAP\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n\r\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\r\n\r\n		// Transforming Normal Vectors with the Inverse Transformation\r\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\r\n\r\n		#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\r\n\r\n		#else\r\n\r\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\r\n\r\n		#endif\r\n\r\n	#else\r\n\r\n		vec3 reflectVec = vReflect;\r\n\r\n	#endif\r\n\r\n	#ifdef ENVMAP_TYPE_CUBE\r\n\r\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\r\n\r\n	#elif defined( ENVMAP_TYPE_EQUIREC )\r\n\r\n		vec2 sampleUV;\r\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\r\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\r\n		vec4 envColor = texture2D( envMap, sampleUV );\r\n\r\n	#elif defined( ENVMAP_TYPE_SPHERE )\r\n\r\n		vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\r\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\r\n\r\n	#endif\r\n\r\n	envColor = envMapTexelToLinear( envColor );\r\n\r\n	#ifdef ENVMAP_BLENDING_MULTIPLY\r\n\r\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\r\n\r\n	#elif defined( ENVMAP_BLENDING_MIX )\r\n\r\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\r\n\r\n	#elif defined( ENVMAP_BLENDING_ADD )\r\n\r\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( PHYSICAL )\r\n	uniform float reflectivity;\r\n	uniform float envMapIntenstiy;\r\n#endif\r\n\r\n#ifdef USE_ENVMAP\r\n\r\n	#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\r\n		varying vec3 vWorldPosition;\r\n	#endif\r\n\r\n	#ifdef ENVMAP_TYPE_CUBE\r\n		uniform samplerCube envMap;\r\n	#else\r\n		uniform sampler2D envMap;\r\n	#endif\r\n	uniform float flipEnvMap;\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\r\n		uniform float refractionRatio;\r\n	#else\r\n		varying vec3 vReflect;\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.envmap_pars_vertex="#ifdef USE_ENVMAP\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n		varying vec3 vWorldPosition;\r\n\r\n	#else\r\n\r\n		varying vec3 vReflect;\r\n		uniform float refractionRatio;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.envmap_vertex="#ifdef USE_ENVMAP\r\n\r\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\r\n\r\n		vWorldPosition = worldPosition.xyz;\r\n\r\n	#else\r\n\r\n		vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\r\n\r\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\r\n\r\n		#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n			vReflect = reflect( cameraToVertex, worldNormal );\r\n\r\n		#else\r\n\r\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\r\n\r\n		#endif\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.fog_fragment="#ifdef USE_FOG\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\r\n\r\n	#else\r\n\r\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\r\n\r\n	#endif\r\n\r\n	#ifdef FOG_EXP2\r\n\r\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\r\n\r\n	#else\r\n\r\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\r\n\r\n	#endif\r\n\r\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\r\n\r\n#endif\r\n",THREE.ShaderChunk.fog_pars_fragment="#ifdef USE_FOG\r\n\r\n	uniform vec3 fogColor;\r\n\r\n	#ifdef FOG_EXP2\r\n\r\n		uniform float fogDensity;\r\n\r\n	#else\r\n\r\n		uniform float fogNear;\r\n		uniform float fogFar;\r\n	#endif\r\n\r\n#endif",THREE.ShaderChunk.lightmap_fragment="#ifdef USE_LIGHTMAP\r\n\r\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity; // factor of PI should not be present; included here to prevent breakage\r\n\r\n#endif\r\n",THREE.ShaderChunk.lightmap_pars_fragment="#ifdef USE_LIGHTMAP\r\n\r\n	uniform sampler2D lightMap;\r\n	uniform float lightMapIntensity;\r\n\r\n#endif",THREE.ShaderChunk.lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\r\n\r\nGeometricContext geometry;\r\ngeometry.position = mvPosition.xyz;\r\ngeometry.normal = normalize( transformedNormal );\r\ngeometry.viewDir = normalize( -mvPosition.xyz );\r\n\r\nGeometricContext backGeometry;\r\nbackGeometry.position = geometry.position;\r\nbackGeometry.normal = -geometry.normal;\r\nbackGeometry.viewDir = geometry.viewDir;\r\n\r\nvLightFront = vec3( 0.0 );\r\n\r\n#ifdef DOUBLE_SIDED\r\n	vLightBack = vec3( 0.0 );\r\n#endif\r\n\r\nIncidentLight directLight;\r\nfloat dotNL;\r\nvec3 directLightColor_Diffuse;\r\n\r\n#if NUM_POINT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\r\n\r\n		dotNL = dot( geometry.normal, directLight.direction );\r\n		directLightColor_Diffuse = PI * directLight.color;\r\n\r\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if NUM_SPOT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\r\n\r\n		dotNL = dot( geometry.normal, directLight.direction );\r\n		directLightColor_Diffuse = PI * directLight.color;\r\n\r\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\r\n\r\n		#endif\r\n	}\r\n\r\n#endif\r\n\r\n#if NUM_DIR_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\r\n\r\n		dotNL = dot( geometry.normal, directLight.direction );\r\n		directLightColor_Diffuse = PI * directLight.color;\r\n\r\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if NUM_HEMI_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\r\n\r\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\r\n\r\n		#ifdef DOUBLE_SIDED\r\n\r\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.lights_pars="uniform vec3 ambientLightColor;\r\n\r\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\r\n\r\n	vec3 irradiance = ambientLightColor;\r\n\r\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n		irradiance *= PI;\r\n\r\n	#endif\r\n\r\n	return irradiance;\r\n\r\n}\r\n\r\n#if NUM_DIR_LIGHTS > 0\r\n\r\n	struct DirectionalLight {\r\n		vec3 direction;\r\n		vec3 color;\r\n\r\n		int shadow;\r\n		float shadowBias;\r\n		float shadowRadius;\r\n		vec2 shadowMapSize;\r\n	};\r\n\r\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\r\n\r\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\r\n\r\n		directLight.color = directionalLight.color;\r\n		directLight.direction = directionalLight.direction;\r\n		directLight.visible = true;\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_POINT_LIGHTS > 0\r\n\r\n	struct PointLight {\r\n		vec3 position;\r\n		vec3 color;\r\n		float distance;\r\n		float decay;\r\n\r\n		int shadow;\r\n		float shadowBias;\r\n		float shadowRadius;\r\n		vec2 shadowMapSize;\r\n	};\r\n\r\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\r\n\r\n	// directLight is an out parameter as having it as a return value caused compiler errors on some devices\r\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\r\n\r\n		vec3 lVector = pointLight.position - geometry.position;\r\n		directLight.direction = normalize( lVector );\r\n\r\n		float lightDistance = length( lVector );\r\n\r\n		if ( testLightInRange( lightDistance, pointLight.distance ) ) {\r\n\r\n			directLight.color = pointLight.color;\r\n			directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\r\n\r\n			directLight.visible = true;\r\n\r\n		} else {\r\n\r\n			directLight.color = vec3( 0.0 );\r\n			directLight.visible = false;\r\n\r\n		}\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_SPOT_LIGHTS > 0\r\n\r\n	struct SpotLight {\r\n		vec3 position;\r\n		vec3 direction;\r\n		vec3 color;\r\n		float distance;\r\n		float decay;\r\n		float coneCos;\r\n		float penumbraCos;\r\n\r\n		int shadow;\r\n		float shadowBias;\r\n		float shadowRadius;\r\n		vec2 shadowMapSize;\r\n	};\r\n\r\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\r\n\r\n	// directLight is an out parameter as having it as a return value caused compiler errors on some devices\r\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\r\n\r\n		vec3 lVector = spotLight.position - geometry.position;\r\n		directLight.direction = normalize( lVector );\r\n\r\n		float lightDistance = length( lVector );\r\n		float angleCos = dot( directLight.direction, spotLight.direction );\r\n\r\n		if ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\r\n\r\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\r\n\r\n			directLight.color = spotLight.color;\r\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\r\n\r\n			directLight.visible = true;\r\n\r\n		} else {\r\n\r\n			directLight.color = vec3( 0.0 );\r\n			directLight.visible = false;\r\n\r\n		}\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if NUM_HEMI_LIGHTS > 0\r\n\r\n	struct HemisphereLight {\r\n		vec3 direction;\r\n		vec3 skyColor;\r\n		vec3 groundColor;\r\n	};\r\n\r\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\r\n\r\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\r\n\r\n		float dotNL = dot( geometry.normal, hemiLight.direction );\r\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\r\n\r\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\r\n\r\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n			irradiance *= PI;\r\n\r\n		#endif\r\n\r\n		return irradiance;\r\n\r\n	}\r\n\r\n#endif\r\n\r\n\r\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\r\n\r\n	vec3 getLightProbeIndirectIrradiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in int maxMIPLevel ) {\r\n\r\n		#include <normal_flip>\r\n\r\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\r\n\r\n		#ifdef ENVMAP_TYPE_CUBE\r\n\r\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\r\n\r\n			// TODO: replace with properly filtered cubemaps and access the irradiance LOD level, be it the last LOD level\r\n			// of a specular cubemap, or just the default level of a specially created irradiance cubemap.\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\r\n\r\n			#else\r\n\r\n				// force the bias high to get the last LOD level as it is the most blurred.\r\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n			vec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\r\n			vec4 envMapColor = textureCubeUV( queryVec, 1.0 );\r\n\r\n		#else\r\n\r\n			vec4 envMapColor = vec4( 0.0 );\r\n\r\n		#endif\r\n\r\n		return PI * envMapColor.rgb * envMapIntensity;\r\n\r\n	}\r\n\r\n	// taken from here: http://casual-effects.blogspot.ca/2011/08/plausible-environment-lighting-in-two.html\r\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\r\n\r\n		//float envMapWidth = pow( 2.0, maxMIPLevelScalar );\r\n		//float desiredMIPLevel = log2( envMapWidth * sqrt( 3.0 ) ) - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\r\n\r\n		float maxMIPLevelScalar = float( maxMIPLevel );\r\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\r\n\r\n		// clamp to allowable LOD ranges.\r\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\r\n\r\n	}\r\n\r\n	vec3 getLightProbeIndirectRadiance( /*const in SpecularLightProbe specularLightProbe,*/ const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\r\n\r\n		#ifdef ENVMAP_MODE_REFLECTION\r\n\r\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\r\n\r\n		#else\r\n\r\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\r\n\r\n		#endif\r\n\r\n		#include <normal_flip>\r\n\r\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\r\n\r\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\r\n\r\n		#ifdef ENVMAP_TYPE_CUBE\r\n\r\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\r\n\r\n			#else\r\n\r\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n			vec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\r\n			vec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\r\n\r\n		#elif defined( ENVMAP_TYPE_EQUIREC )\r\n\r\n			vec2 sampleUV;\r\n			sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\r\n			sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\r\n\r\n			#else\r\n\r\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#elif defined( ENVMAP_TYPE_SPHERE )\r\n\r\n			vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\r\n\r\n			#ifdef TEXTURE_LOD_EXT\r\n\r\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\r\n\r\n			#else\r\n\r\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\r\n\r\n			#endif\r\n\r\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\r\n\r\n		#endif\r\n\r\n		return envMapColor.rgb * envMapIntensity;\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.lights_phong_fragment="BlinnPhongMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb;\r\nmaterial.specularColor = specular;\r\nmaterial.specularShininess = shininess;\r\nmaterial.specularStrength = specularStrength;\r\n",THREE.ShaderChunk.lights_phong_pars_fragment="varying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n\r\nstruct BlinnPhongMaterial {\r\n\r\n	vec3	diffuseColor;\r\n	vec3	specularColor;\r\n	float	specularShininess;\r\n	float	specularStrength;\r\n\r\n};\r\n\r\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\r\n\r\n	vec3 irradiance = dotNL * directLight.color;\r\n\r\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n		irradiance *= PI; // punctual light\r\n\r\n	#endif\r\n\r\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\r\n\r\n}\r\n\r\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\n#define RE_Direct				RE_Direct_BlinnPhong\r\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\r\n\r\n#define Material_LightProbeLOD( material )	(0)\r\n",THREE.ShaderChunk.lights_physical_fragment="PhysicalMaterial material;\r\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\r\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\r\n#ifdef STANDARD\r\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\r\n#else\r\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\r\n	material.clearCoat = saturate( clearCoat ); // Burley clearcoat model\r\n	material.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\r\n#endif\r\n",THREE.ShaderChunk.lights_physical_pars_fragment="struct PhysicalMaterial {\r\n\r\n	vec3	diffuseColor;\r\n	float	specularRoughness;\r\n	vec3	specularColor;\r\n\r\n	#ifndef STANDARD\r\n		float clearCoat;\r\n		float clearCoatRoughness;\r\n	#endif\r\n\r\n};\r\n\r\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\r\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\r\n\r\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\r\n\r\n	vec3 irradiance = dotNL * directLight.color;\r\n\r\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n		irradiance *= PI; // punctual light\r\n\r\n	#endif\r\n\r\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\r\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n	#ifndef STANDARD\r\n\r\n		reflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\r\n\r\n	#endif\r\n\r\n}\r\n\r\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\r\n\r\n}\r\n\r\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\r\n\r\n	reflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\r\n\r\n	#ifndef STANDARD\r\n\r\n		reflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\r\n\r\n	#endif\r\n\r\n}\r\n\r\n#define RE_Direct				RE_Direct_Physical\r\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\r\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\r\n\r\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\r\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\r\n\r\n// ref: http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr_v2.pdf\r\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\r\n\r\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\r\n\r\n}\r\n",THREE.ShaderChunk.lights_template="//\r\n// This is a template that can be used to light a material, it uses pluggable RenderEquations (RE)\r\n//   for specific lighting scenarios.\r\n//\r\n// Instructions for use:\r\n//  - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\r\n//  - If you have defined an RE_IndirectSpecular, you need to also provide a Material_LightProbeLOD. <---- ???\r\n//  - Create a material parameter that is to be passed as the third parameter to your lighting functions.\r\n//\r\n// TODO:\r\n//  - Add area light support.\r\n//  - Add sphere light support.\r\n//  - Add diffuse light probe (irradiance cubemap) support.\r\n//\r\n\r\nGeometricContext geometry;\r\n\r\ngeometry.position = - vViewPosition;\r\ngeometry.normal = normal;\r\ngeometry.viewDir = normalize( vViewPosition );\r\n\r\nIncidentLight directLight;\r\n\r\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n	PointLight pointLight;\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		pointLight = pointLights[ i ];\r\n\r\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\r\n\r\n		#ifdef USE_SHADOWMAP\r\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\r\n		#endif\r\n\r\n		RE_Direct( directLight, geometry, material, reflectedLight );\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n	SpotLight spotLight;\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		spotLight = spotLights[ i ];\r\n\r\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\r\n\r\n		#ifdef USE_SHADOWMAP\r\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\r\n		#endif\r\n\r\n		RE_Direct( directLight, geometry, material, reflectedLight );\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\r\n\r\n	DirectionalLight directionalLight;\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		directionalLight = directionalLights[ i ];\r\n\r\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\r\n\r\n		#ifdef USE_SHADOWMAP\r\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n		#endif\r\n\r\n		RE_Direct( directLight, geometry, material, reflectedLight );\r\n\r\n	}\r\n\r\n#endif\r\n\r\n#if defined( RE_IndirectDiffuse )\r\n\r\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\r\n\r\n	#ifdef USE_LIGHTMAP\r\n\r\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\r\n\r\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\r\n\r\n			lightMapIrradiance *= PI; // factor of PI should not be present; included here to prevent breakage\r\n\r\n		#endif\r\n\r\n		irradiance += lightMapIrradiance;\r\n\r\n	#endif\r\n\r\n	#if ( NUM_HEMI_LIGHTS > 0 )\r\n\r\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\r\n\r\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\r\n\r\n		}\r\n\r\n	#endif\r\n\r\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\r\n\r\n		// TODO, replace 8 with the real maxMIPLevel\r\n	 	irradiance += getLightProbeIndirectIrradiance( /*lightProbe,*/ geometry, 8 );\r\n\r\n	#endif\r\n\r\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\r\n\r\n#endif\r\n\r\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\r\n\r\n	// TODO, replace 8 with the real maxMIPLevel\r\n	vec3 radiance = getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry, Material_BlinnShininessExponent( material ), 8 );\r\n\r\n	#ifndef STANDARD\r\n		vec3 clearCoatRadiance = getLightProbeIndirectRadiance( /*specularLightProbe,*/ geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\r\n	#else\r\n		vec3 clearCoatRadiance = vec3( 0.0 );\r\n	#endif\r\n		\r\n	RE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\r\n\r\n#endif\r\n",
THREE.ShaderChunk.logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\r\n\r\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\r\n\r\n#endif",THREE.ShaderChunk.logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\r\n\r\n	uniform float logDepthBufFC;\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		varying float vFragDepth;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		varying float vFragDepth;\r\n\r\n	#endif\r\n\r\n	uniform float logDepthBufFC;\r\n\r\n#endif",THREE.ShaderChunk.logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\r\n\r\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\r\n\r\n	#ifdef USE_LOGDEPTHBUF_EXT\r\n\r\n		vFragDepth = 1.0 + gl_Position.w;\r\n\r\n	#else\r\n\r\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_fragment="#ifdef USE_MAP\r\n\r\n	vec4 texelColor = texture2D( map, vUv );\r\n\r\n	texelColor = mapTexelToLinear( texelColor );\r\n	diffuseColor *= texelColor;\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_pars_fragment="#ifdef USE_MAP\r\n\r\n	uniform sampler2D map;\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_particle_fragment="#ifdef USE_MAP\r\n\r\n	vec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\r\n	diffuseColor *= mapTexelToLinear( mapTexel );\r\n\r\n#endif\r\n",THREE.ShaderChunk.map_particle_pars_fragment="#ifdef USE_MAP\r\n\r\n	uniform vec4 offsetRepeat;\r\n	uniform sampler2D map;\r\n\r\n#endif\r\n",THREE.ShaderChunk.metalnessmap_fragment="float metalnessFactor = metalness;\r\n\r\n#ifdef USE_METALNESSMAP\r\n\r\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\r\n	metalnessFactor *= texelMetalness.r;\r\n\r\n#endif\r\n",THREE.ShaderChunk.metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\r\n\r\n	uniform sampler2D metalnessMap;\r\n\r\n#endif",THREE.ShaderChunk.morphnormal_vertex="#ifdef USE_MORPHNORMALS\r\n\r\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\r\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\r\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\r\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\r\n\r\n#endif\r\n",THREE.ShaderChunk.morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\r\n\r\n	#ifndef USE_MORPHNORMALS\r\n\r\n	uniform float morphTargetInfluences[ 8 ];\r\n\r\n	#else\r\n\r\n	uniform float morphTargetInfluences[ 4 ];\r\n\r\n	#endif\r\n\r\n#endif",THREE.ShaderChunk.morphtarget_vertex="#ifdef USE_MORPHTARGETS\r\n\r\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\r\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\r\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\r\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\r\n\r\n	#ifndef USE_MORPHNORMALS\r\n\r\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\r\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\r\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\r\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.normal_flip="#ifdef DOUBLE_SIDED\r\n	float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\r\n#else\r\n	float flipNormal = 1.0;\r\n#endif\r\n",THREE.ShaderChunk.normal_fragment="#ifdef FLAT_SHADED\r\n\r\n	// Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\r\n\r\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\r\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\r\n	vec3 normal = normalize( cross( fdx, fdy ) );\r\n\r\n#else\r\n\r\n	vec3 normal = normalize( vNormal ) * flipNormal;\r\n\r\n#endif\r\n\r\n#ifdef USE_NORMALMAP\r\n\r\n	normal = perturbNormal2Arb( -vViewPosition, normal );\r\n\r\n#elif defined( USE_BUMPMAP )\r\n\r\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\r\n\r\n#endif\r\n",THREE.ShaderChunk.normalmap_pars_fragment="#ifdef USE_NORMALMAP\r\n\r\n	uniform sampler2D normalMap;\r\n	uniform vec2 normalScale;\r\n\r\n	// Per-Pixel Tangent Space Normal Mapping\r\n	// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\r\n\r\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\r\n\r\n		vec3 q0 = dFdx( eye_pos.xyz );\r\n		vec3 q1 = dFdy( eye_pos.xyz );\r\n		vec2 st0 = dFdx( vUv.st );\r\n		vec2 st1 = dFdy( vUv.st );\r\n\r\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\r\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\r\n		vec3 N = normalize( surf_norm );\r\n\r\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\r\n		mapN.xy = normalScale * mapN.xy;\r\n		mat3 tsn = mat3( S, T, N );\r\n		return normalize( tsn * mapN );\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.packing="vec3 packNormalToRGB( const in vec3 normal ) {\r\n  return normalize( normal ) * 0.5 + 0.5;\r\n}\r\n\r\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\r\n  return 1.0 - 2.0 * rgb.xyz;\r\n}\r\n\r\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\r\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\r\n\r\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\r\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\r\n\r\nconst float ShiftRight8 = 1. / 256.;\r\n\r\nvec4 packDepthToRGBA( const in float v ) {\r\n\r\n	vec4 r = vec4( fract( v * PackFactors ), v );\r\n	r.yzw -= r.xyz * ShiftRight8; // tidy overflow\r\n	return r * PackUpscale;\r\n\r\n}\r\n\r\nfloat unpackRGBAToDepth( const in vec4 v ) {\r\n\r\n	return dot( v, UnpackFactors );\r\n\r\n}\r\n\r\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\r\n\r\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\r\n  return ( viewZ + near ) / ( near - far );\r\n}\r\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\r\n  return linearClipZ * ( near - far ) - near;\r\n}\r\n\r\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\r\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\r\n}\r\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\r\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\r\n}\r\n",THREE.ShaderChunk.premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\r\n\r\n	// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\r\n	gl_FragColor.rgb *= gl_FragColor.a;\r\n\r\n#endif\r\n",THREE.ShaderChunk.project_vertex="#ifdef USE_SKINNING\r\n\r\n	vec4 mvPosition = modelViewMatrix * skinned;\r\n\r\n#else\r\n\r\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\r\n\r\n#endif\r\n\r\ngl_Position = projectionMatrix * mvPosition;\r\n",THREE.ShaderChunk.roughnessmap_fragment="float roughnessFactor = roughness;\r\n\r\n#ifdef USE_ROUGHNESSMAP\r\n\r\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\r\n	roughnessFactor *= texelRoughness.r;\r\n\r\n#endif\r\n",THREE.ShaderChunk.roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\r\n\r\n	uniform sampler2D roughnessMap;\r\n\r\n#endif",THREE.ShaderChunk.shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\r\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\r\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\r\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\r\n\r\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\r\n\r\n	}\r\n\r\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\r\n\r\n		const vec2 offset = vec2( 0.0, 1.0 );\r\n\r\n		vec2 texelSize = vec2( 1.0 ) / size;\r\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\r\n\r\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\r\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\r\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\r\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\r\n\r\n		vec2 f = fract( uv * size + 0.5 );\r\n\r\n		float a = mix( lb, lt, f.y );\r\n		float b = mix( rb, rt, f.y );\r\n		float c = mix( a, b, f.x );\r\n\r\n		return c;\r\n\r\n	}\r\n\r\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\r\n\r\n		shadowCoord.xyz /= shadowCoord.w;\r\n		shadowCoord.z += shadowBias;\r\n\r\n		// if ( something && something ) breaks ATI OpenGL shader compiler\r\n		// if ( all( something, something ) ) using this instead\r\n\r\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\r\n		bool inFrustum = all( inFrustumVec );\r\n\r\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\r\n\r\n		bool frustumTest = all( frustumTestVec );\r\n\r\n		if ( frustumTest ) {\r\n\r\n		#if defined( SHADOWMAP_TYPE_PCF )\r\n\r\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\r\n\r\n			float dx0 = - texelSize.x * shadowRadius;\r\n			float dy0 = - texelSize.y * shadowRadius;\r\n			float dx1 = + texelSize.x * shadowRadius;\r\n			float dy1 = + texelSize.y * shadowRadius;\r\n\r\n			return (\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\r\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\r\n			) * ( 1.0 / 9.0 );\r\n\r\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\r\n\r\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\r\n\r\n			float dx0 = - texelSize.x * shadowRadius;\r\n			float dy0 = - texelSize.y * shadowRadius;\r\n			float dx1 = + texelSize.x * shadowRadius;\r\n			float dy1 = + texelSize.y * shadowRadius;\r\n\r\n			return (\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\r\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\r\n			) * ( 1.0 / 9.0 );\r\n\r\n		#else // no percentage-closer filtering:\r\n\r\n			return texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\r\n\r\n		#endif\r\n\r\n		}\r\n\r\n		return 1.0;\r\n\r\n	}\r\n\r\n	// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\r\n	// vector suitable for 2D texture mapping. This code uses the following layout for the\r\n	// 2D texture:\r\n	//\r\n	// xzXZ\r\n	//  y Y\r\n	//\r\n	// Y - Positive y direction\r\n	// y - Negative y direction\r\n	// X - Positive x direction\r\n	// x - Negative x direction\r\n	// Z - Positive z direction\r\n	// z - Negative z direction\r\n	//\r\n	// Source and test bed:\r\n	// https://gist.github.com/tschw/da10c43c467ce8afd0c4\r\n\r\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\r\n\r\n		// Number of texels to avoid at the edge of each square\r\n\r\n		vec3 absV = abs( v );\r\n\r\n		// Intersect unit cube\r\n\r\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\r\n		absV *= scaleToCube;\r\n\r\n		// Apply scale to avoid seams\r\n\r\n		// two texels less per square (one texel will do for NEAREST)\r\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\r\n\r\n		// Unwrap\r\n\r\n		// space: -1 ... 1 range for each square\r\n		//\r\n		// #X##		dim    := ( 4 , 2 )\r\n		//  # #		center := ( 1 , 1 )\r\n\r\n		vec2 planar = v.xy;\r\n\r\n		float almostATexel = 1.5 * texelSizeY;\r\n		float almostOne = 1.0 - almostATexel;\r\n\r\n		if ( absV.z >= almostOne ) {\r\n\r\n			if ( v.z > 0.0 )\r\n				planar.x = 4.0 - v.x;\r\n\r\n		} else if ( absV.x >= almostOne ) {\r\n\r\n			float signX = sign( v.x );\r\n			planar.x = v.z * signX + 2.0 * signX;\r\n\r\n		} else if ( absV.y >= almostOne ) {\r\n\r\n			float signY = sign( v.y );\r\n			planar.x = v.x + 2.0 * signY + 2.0;\r\n			planar.y = v.z * signY - 2.0;\r\n\r\n		}\r\n\r\n		// Transform to UV space\r\n\r\n		// scale := 0.5 / dim\r\n		// translate := ( center + 0.5 ) / dim\r\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\r\n\r\n	}\r\n\r\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\r\n\r\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\r\n\r\n		// for point lights, the uniform @vShadowCoord is re-purposed to hold\r\n		// the distance from the light to the world-space position of the fragment.\r\n		vec3 lightToPosition = shadowCoord.xyz;\r\n\r\n		// bd3D = base direction 3D\r\n		vec3 bd3D = normalize( lightToPosition );\r\n		// dp = distance from light to fragment position\r\n		float dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\r\n\r\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\r\n\r\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\r\n\r\n			return (\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\r\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\r\n			) * ( 1.0 / 9.0 );\r\n\r\n		#else // no percentage-closer filtering\r\n\r\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\r\n\r\n		#endif\r\n\r\n	}\r\n\r\n#endif\r\n",THREE.ShaderChunk.shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\r\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\r\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\r\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.shadowmap_vertex="#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.shadowmask_pars_fragment="float getShadowMask() {\r\n\r\n	float shadow = 1.0;\r\n\r\n	#ifdef USE_SHADOWMAP\r\n\r\n	#if NUM_DIR_LIGHTS > 0\r\n\r\n	DirectionalLight directionalLight;\r\n\r\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\r\n\r\n		directionalLight = directionalLights[ i ];\r\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_SPOT_LIGHTS > 0\r\n\r\n	SpotLight spotLight;\r\n\r\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\r\n\r\n		spotLight = spotLights[ i ];\r\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#if NUM_POINT_LIGHTS > 0\r\n\r\n	PointLight pointLight;\r\n\r\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\r\n\r\n		pointLight = pointLights[ i ];\r\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\r\n\r\n	}\r\n\r\n	#endif\r\n\r\n	#endif\r\n\r\n	return shadow;\r\n\r\n}\r\n",THREE.ShaderChunk.skinbase_vertex="#ifdef USE_SKINNING\r\n\r\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\r\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\r\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\r\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\r\n\r\n#endif",THREE.ShaderChunk.skinning_pars_vertex="#ifdef USE_SKINNING\r\n\r\n	uniform mat4 bindMatrix;\r\n	uniform mat4 bindMatrixInverse;\r\n\r\n	#ifdef BONE_TEXTURE\r\n\r\n		uniform sampler2D boneTexture;\r\n		uniform int boneTextureWidth;\r\n		uniform int boneTextureHeight;\r\n\r\n		mat4 getBoneMatrix( const in float i ) {\r\n\r\n			float j = i * 4.0;\r\n			float x = mod( j, float( boneTextureWidth ) );\r\n			float y = floor( j / float( boneTextureWidth ) );\r\n\r\n			float dx = 1.0 / float( boneTextureWidth );\r\n			float dy = 1.0 / float( boneTextureHeight );\r\n\r\n			y = dy * ( y + 0.5 );\r\n\r\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\r\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\r\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\r\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\r\n\r\n			mat4 bone = mat4( v1, v2, v3, v4 );\r\n\r\n			return bone;\r\n\r\n		}\r\n\r\n	#else\r\n\r\n		uniform mat4 boneMatrices[ MAX_BONES ];\r\n\r\n		mat4 getBoneMatrix( const in float i ) {\r\n\r\n			mat4 bone = boneMatrices[ int(i) ];\r\n			return bone;\r\n\r\n		}\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.skinning_vertex="#ifdef USE_SKINNING\r\n\r\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\r\n\r\n	vec4 skinned = vec4( 0.0 );\r\n	skinned += boneMatX * skinVertex * skinWeight.x;\r\n	skinned += boneMatY * skinVertex * skinWeight.y;\r\n	skinned += boneMatZ * skinVertex * skinWeight.z;\r\n	skinned += boneMatW * skinVertex * skinWeight.w;\r\n	skinned  = bindMatrixInverse * skinned;\r\n\r\n#endif\r\n",THREE.ShaderChunk.skinnormal_vertex="#ifdef USE_SKINNING\r\n\r\n	mat4 skinMatrix = mat4( 0.0 );\r\n	skinMatrix += skinWeight.x * boneMatX;\r\n	skinMatrix += skinWeight.y * boneMatY;\r\n	skinMatrix += skinWeight.z * boneMatZ;\r\n	skinMatrix += skinWeight.w * boneMatW;\r\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\r\n\r\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\r\n\r\n#endif\r\n",THREE.ShaderChunk.specularmap_fragment="float specularStrength;\r\n\r\n#ifdef USE_SPECULARMAP\r\n\r\n	vec4 texelSpecular = texture2D( specularMap, vUv );\r\n	specularStrength = texelSpecular.r;\r\n\r\n#else\r\n\r\n	specularStrength = 1.0;\r\n\r\n#endif",THREE.ShaderChunk.specularmap_pars_fragment="#ifdef USE_SPECULARMAP\r\n\r\n	uniform sampler2D specularMap;\r\n\r\n#endif",THREE.ShaderChunk.tonemapping_fragment="#if defined( TONE_MAPPING )\r\n\r\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\r\n\r\n#endif\r\n",THREE.ShaderChunk.tonemapping_pars_fragment="#define saturate(a) clamp( a, 0.0, 1.0 )\r\n\r\nuniform float toneMappingExposure;\r\nuniform float toneMappingWhitePoint;\r\n\r\n// exposure only\r\nvec3 LinearToneMapping( vec3 color ) {\r\n\r\n  return toneMappingExposure * color;\r\n\r\n}\r\n\r\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\r\nvec3 ReinhardToneMapping( vec3 color ) {\r\n\r\n  color *= toneMappingExposure;\r\n  return saturate( color / ( vec3( 1.0 ) + color ) );\r\n\r\n}\r\n\r\n// source: http://filmicgames.com/archives/75\r\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\r\nvec3 Uncharted2ToneMapping( vec3 color ) {\r\n\r\n  // John Hable's filmic operator from Uncharted 2 video game\r\n  color *= toneMappingExposure;\r\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\r\n\r\n}\r\n\r\n// source: http://filmicgames.com/archives/75\r\nvec3 OptimizedCineonToneMapping( vec3 color ) {\r\n\r\n  // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n  color *= toneMappingExposure;\r\n  color = max( vec3( 0.0 ), color - 0.004 );\r\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\r\n\r\n}\r\n",THREE.ShaderChunk.uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\r\n\r\n	varying vec2 vUv2;\r\n\r\n#endif",THREE.ShaderChunk.uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\r\n\r\n	attribute vec2 uv2;\r\n	varying vec2 vUv2;\r\n\r\n#endif",THREE.ShaderChunk.uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\r\n\r\n	vUv2 = uv2;\r\n\r\n#endif",THREE.ShaderChunk.uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\r\n\r\n	varying vec2 vUv;\r\n\r\n#endif",THREE.ShaderChunk.uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\r\n\r\n	varying vec2 vUv;\r\n	uniform vec4 offsetRepeat;\r\n\r\n#endif\r\n",THREE.ShaderChunk.uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\r\n\r\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\r\n\r\n#endif",THREE.ShaderChunk.worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\r\n\r\n	#ifdef USE_SKINNING\r\n\r\n		vec4 worldPosition = modelMatrix * skinned;\r\n\r\n	#else\r\n\r\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\r\n\r\n	#endif\r\n\r\n#endif\r\n",THREE.ShaderChunk.cube_frag="uniform samplerCube tCube;\r\nuniform float tFlip;\r\n\r\nvarying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.cube_vert="varying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	vWorldPosition = transformDirection( position, modelMatrix );\r\n\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.depth_frag="#if DEPTH_PACKING == 3200\r\n\r\n	uniform float opacity;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <uv_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( 1.0 );\r\n\r\n	#if DEPTH_PACKING == 3200\r\n\r\n		diffuseColor.a = opacity;\r\n\r\n	#endif\r\n\r\n	#include <map_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n	#if DEPTH_PACKING == 3200\r\n\r\n		gl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\r\n\r\n	#elif DEPTH_PACKING == 3201\r\n\r\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\r\n\r\n	#endif\r\n\r\n}\r\n",THREE.ShaderChunk.depth_vert="#include <common>\r\n#include <uv_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n\r\n	#include <skinbase_vertex>\r\n\r\n	#include <begin_vertex>\r\n	#include <displacementmap_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.distanceRGBA_frag="uniform vec3 lightPos;\r\nvarying vec4 vWorldPosition;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main () {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	gl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\r\n\r\n}\r\n",THREE.ShaderChunk.distanceRGBA_vert="varying vec4 vWorldPosition;\r\n\r\n#include <common>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <skinbase_vertex>\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <worldpos_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	vWorldPosition = worldPosition;\r\n\r\n}\r\n",THREE.ShaderChunk.equirect_frag="uniform sampler2D tEquirect;\r\nuniform float tFlip;\r\n\r\nvarying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	// 	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\r\n	vec3 direction = normalize( vWorldPosition );\r\n	vec2 sampleUV;\r\n	sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\r\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\r\n	gl_FragColor = texture2D( tEquirect, sampleUV );\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.equirect_vert="varying vec3 vWorldPosition;\r\n\r\n#include <common>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	vWorldPosition = transformDirection( position, modelMatrix );\r\n\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.linedashed_frag="uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\nuniform float dashSize;\r\nuniform float totalSize;\r\n\r\nvarying float vLineDistance;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\r\n\r\n		discard;\r\n\r\n	}\r\n\r\n	vec3 outgoingLight = vec3( 0.0 );\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <color_fragment>\r\n\r\n	outgoingLight = diffuseColor.rgb; // simple shader\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.linedashed_vert="uniform float scale;\r\nattribute float lineDistance;\r\n\r\nvarying float vLineDistance;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <color_vertex>\r\n\r\n	vLineDistance = scale * lineDistance;\r\n\r\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n	gl_Position = projectionMatrix * mvPosition;\r\n\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshbasic_frag="uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n\r\n	ReflectedLight reflectedLight;\r\n	reflectedLight.directDiffuse = vec3( 0.0 );\r\n	reflectedLight.directSpecular = vec3( 0.0 );\r\n	reflectedLight.indirectDiffuse = diffuseColor.rgb;\r\n	reflectedLight.indirectSpecular = vec3( 0.0 );\r\n\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\r\n\r\n	#include <normal_flip>\r\n	#include <envmap_fragment>\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshbasic_vert="#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n	#include <skinbase_vertex>\r\n\r\n	#ifdef USE_ENVMAP\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n	#endif\r\n\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n\r\n	#include <worldpos_vertex>\r\n	#include <clipping_planes_vertex>\r\n	#include <envmap_vertex>\r\n\r\n}\r\n",
THREE.ShaderChunk.meshlambert_frag="uniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform float opacity;\r\n\r\nvarying vec3 vLightFront;\r\n\r\n#ifdef DOUBLE_SIDED\r\n\r\n	varying vec3 vLightBack;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <fog_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <shadowmask_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n	vec3 totalEmissiveRadiance = emissive;\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n	#include <emissivemap_fragment>\r\n\r\n	// accumulation\r\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\r\n\r\n	#include <lightmap_fragment>\r\n\r\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\r\n\r\n	#ifdef DOUBLE_SIDED\r\n\r\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\r\n\r\n	#else\r\n\r\n		reflectedLight.directDiffuse = vLightFront;\r\n\r\n	#endif\r\n\r\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\r\n\r\n	// modulation\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\r\n\r\n	#include <normal_flip>\r\n	#include <envmap_fragment>\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshlambert_vert="#define LAMBERT\r\n\r\nvarying vec3 vLightFront;\r\n\r\n#ifdef DOUBLE_SIDED\r\n\r\n	varying vec3 vLightBack;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinbase_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	#include <worldpos_vertex>\r\n	#include <envmap_vertex>\r\n	#include <lights_lambert_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphong_frag="#define PHONG\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform vec3 specular;\r\nuniform float shininess;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <lights_phong_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n	vec3 totalEmissiveRadiance = emissive;\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n	#include <normal_flip>\r\n	#include <normal_fragment>\r\n	#include <emissivemap_fragment>\r\n\r\n	// accumulation\r\n	#include <lights_phong_fragment>\r\n	#include <lights_template>\r\n\r\n	// modulation\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n	#include <envmap_fragment>\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphong_vert="#define PHONG\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <envmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinbase_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n	vNormal = normalize( transformedNormal );\r\n\r\n#endif\r\n\r\n	#include <begin_vertex>\r\n	#include <displacementmap_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	vViewPosition = - mvPosition.xyz;\r\n\r\n	#include <worldpos_vertex>\r\n	#include <envmap_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphysical_frag="#define PHYSICAL\r\n\r\nuniform vec3 diffuse;\r\nuniform vec3 emissive;\r\nuniform float roughness;\r\nuniform float metalness;\r\nuniform float opacity;\r\n\r\n#ifndef STANDARD\r\n	uniform float clearCoat;\r\n	uniform float clearCoatRoughness;\r\n#endif\r\n\r\nuniform float envMapIntensity; // temporary\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <color_pars_fragment>\r\n#include <uv_pars_fragment>\r\n#include <uv2_pars_fragment>\r\n#include <map_pars_fragment>\r\n#include <alphamap_pars_fragment>\r\n#include <aomap_pars_fragment>\r\n#include <lightmap_pars_fragment>\r\n#include <emissivemap_pars_fragment>\r\n#include <envmap_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <bsdfs>\r\n#include <cube_uv_reflection_fragment>\r\n#include <lights_pars>\r\n#include <lights_physical_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <bumpmap_pars_fragment>\r\n#include <normalmap_pars_fragment>\r\n#include <roughnessmap_pars_fragment>\r\n#include <metalnessmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n	vec3 totalEmissiveRadiance = emissive;\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_fragment>\r\n	#include <color_fragment>\r\n	#include <alphamap_fragment>\r\n	#include <alphatest_fragment>\r\n	#include <specularmap_fragment>\r\n	#include <roughnessmap_fragment>\r\n	#include <metalnessmap_fragment>\r\n	#include <normal_flip>\r\n	#include <normal_fragment>\r\n	#include <emissivemap_fragment>\r\n\r\n	// accumulation\r\n	#include <lights_physical_fragment>\r\n	#include <lights_template>\r\n\r\n	// modulation\r\n	#include <aomap_fragment>\r\n\r\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.meshphysical_vert="#define PHYSICAL\r\n\r\nvarying vec3 vViewPosition;\r\n\r\n#ifndef FLAT_SHADED\r\n\r\n	varying vec3 vNormal;\r\n\r\n#endif\r\n\r\n#include <common>\r\n#include <uv_pars_vertex>\r\n#include <uv2_pars_vertex>\r\n#include <displacementmap_pars_vertex>\r\n#include <color_pars_vertex>\r\n#include <morphtarget_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <specularmap_pars_fragment>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <uv_vertex>\r\n	#include <uv2_vertex>\r\n	#include <color_vertex>\r\n\r\n	#include <beginnormal_vertex>\r\n	#include <morphnormal_vertex>\r\n	#include <skinbase_vertex>\r\n	#include <skinnormal_vertex>\r\n	#include <defaultnormal_vertex>\r\n\r\n#ifndef FLAT_SHADED // Normal computed with derivatives when FLAT_SHADED\r\n\r\n	vNormal = normalize( transformedNormal );\r\n\r\n#endif\r\n\r\n	#include <begin_vertex>\r\n	#include <displacementmap_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <skinning_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n	vViewPosition = - mvPosition.xyz;\r\n\r\n	#include <worldpos_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.normal_frag="uniform float opacity;\r\nvarying vec3 vNormal;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n	gl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.normal_vert="varying vec3 vNormal;\r\n\r\n#include <common>\r\n#include <morphtarget_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	vNormal = normalize( normalMatrix * normal );\r\n\r\n	#include <begin_vertex>\r\n	#include <morphtarget_vertex>\r\n	#include <project_vertex>\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.points_frag="uniform vec3 diffuse;\r\nuniform float opacity;\r\n\r\n#include <common>\r\n#include <color_pars_fragment>\r\n#include <map_particle_pars_fragment>\r\n#include <fog_pars_fragment>\r\n#include <shadowmap_pars_fragment>\r\n#include <logdepthbuf_pars_fragment>\r\n#include <clipping_planes_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	#include <clipping_planes_fragment>\r\n\r\n	vec3 outgoingLight = vec3( 0.0 );\r\n	vec4 diffuseColor = vec4( diffuse, opacity );\r\n\r\n	#include <logdepthbuf_fragment>\r\n	#include <map_particle_fragment>\r\n	#include <color_fragment>\r\n	#include <alphatest_fragment>\r\n\r\n	outgoingLight = diffuseColor.rgb;\r\n\r\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n\r\n	#include <premultiplied_alpha_fragment>\r\n	#include <tonemapping_fragment>\r\n	#include <encodings_fragment>\r\n	#include <fog_fragment>\r\n\r\n}\r\n",THREE.ShaderChunk.points_vert="uniform float size;\r\nuniform float scale;\r\n\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <shadowmap_pars_vertex>\r\n#include <logdepthbuf_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <color_vertex>\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n\r\n	#ifdef USE_SIZEATTENUATION\r\n		gl_PointSize = size * ( scale / - mvPosition.z );\r\n	#else\r\n		gl_PointSize = size;\r\n	#endif\r\n\r\n	#include <logdepthbuf_vertex>\r\n	#include <clipping_planes_vertex>\r\n	#include <worldpos_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.ShaderChunk.shadow_frag="uniform float opacity;\r\n\r\n#include <common>\r\n#include <packing>\r\n#include <bsdfs>\r\n#include <lights_pars>\r\n#include <shadowmap_pars_fragment>\r\n#include <shadowmask_pars_fragment>\r\n\r\nvoid main() {\r\n\r\n	gl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\r\n\r\n}\r\n",THREE.ShaderChunk.shadow_vert="#include <shadowmap_pars_vertex>\r\n\r\nvoid main() {\r\n\r\n	#include <begin_vertex>\r\n	#include <project_vertex>\r\n	#include <worldpos_vertex>\r\n	#include <shadowmap_vertex>\r\n\r\n}\r\n",THREE.UniformsUtils={merge:function(e){for(var r={},t=0;t<e.length;t++){var n=this.clone(e[t]);for(var i in n)r[i]=n[i]}return r},clone:function(e){var r={};for(var t in e){r[t]={};for(var n in e[t]){var i=e[t][n];i instanceof THREE.Color||i instanceof THREE.Vector2||i instanceof THREE.Vector3||i instanceof THREE.Vector4||i instanceof THREE.Matrix3||i instanceof THREE.Matrix4||i instanceof THREE.Texture?r[t][n]=i.clone():Array.isArray(i)?r[t][n]=i.slice():r[t][n]=i}}return r}},THREE.UniformsLib={common:{diffuse:{value:new THREE.Color(15658734)},opacity:{value:1},map:{value:null},offsetRepeat:{value:new THREE.Vector4(0,0,1,1)},specularMap:{value:null},alphaMap:{value:null},envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new THREE.Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new THREE.Color(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}}},points:{diffuse:{value:new THREE.Color(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},offsetRepeat:{value:new THREE.Vector4(0,0,1,1)}}},THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.meshbasic_vert,fragmentShader:THREE.ShaderChunk.meshbasic_frag},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{value:new THREE.Color(0)}}]),vertexShader:THREE.ShaderChunk.meshlambert_vert,fragmentShader:THREE.ShaderChunk.meshlambert_frag},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{value:new THREE.Color(0)},specular:{value:new THREE.Color(1118481)},shininess:{value:30}}]),vertexShader:THREE.ShaderChunk.meshphong_vert,fragmentShader:THREE.ShaderChunk.meshphong_frag},standard:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.aomap,THREE.UniformsLib.lightmap,THREE.UniformsLib.emissivemap,THREE.UniformsLib.bumpmap,THREE.UniformsLib.normalmap,THREE.UniformsLib.displacementmap,THREE.UniformsLib.roughnessmap,THREE.UniformsLib.metalnessmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,{emissive:{value:new THREE.Color(0)},roughness:{value:.5},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,fragmentShader:THREE.ShaderChunk.meshphysical_frag},points:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.points,THREE.UniformsLib.fog]),vertexShader:THREE.ShaderChunk.points_vert,fragmentShader:THREE.ShaderChunk.points_frag},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:THREE.ShaderChunk.linedashed_vert,fragmentShader:THREE.ShaderChunk.linedashed_frag},depth:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.displacementmap]),vertexShader:THREE.ShaderChunk.depth_vert,fragmentShader:THREE.ShaderChunk.depth_frag},normal:{uniforms:{opacity:{value:1}},vertexShader:THREE.ShaderChunk.normal_vert,fragmentShader:THREE.ShaderChunk.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1}},vertexShader:THREE.ShaderChunk.cube_vert,fragmentShader:THREE.ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null},tFlip:{value:-1}},vertexShader:THREE.ShaderChunk.equirect_vert,fragmentShader:THREE.ShaderChunk.equirect_frag},distanceRGBA:{uniforms:{lightPos:{value:new THREE.Vector3}},vertexShader:THREE.ShaderChunk.distanceRGBA_vert,fragmentShader:THREE.ShaderChunk.distanceRGBA_frag}},THREE.ShaderLib.physical={uniforms:THREE.UniformsUtils.merge([THREE.ShaderLib.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:THREE.ShaderChunk.meshphysical_vert,fragmentShader:THREE.ShaderChunk.meshphysical_frag},THREE.WebGLRenderer=function(e){function r(){return null===ee?pe:1}function t(e,r,t,n){z===!0&&(e*=n,r*=n,t*=n),Pe.clearColor(e,r,t,n)}function n(){Pe.init(),Pe.scissor(ae.copy(fe).multiplyScalar(pe)),Pe.viewport(se.copy(Ee).multiplyScalar(pe)),t(le.r,le.g,le.b,he)}function i(){$=null,ie=null,ne="",te=-1,Pe.reset()}function a(e){e.preventDefault(),i(),n(),Ae.clear()}function o(e){var r=e.target;r.removeEventListener("dispose",o),s(r)}function s(e){c(e),Ae["delete"](e)}function c(e){var r=Ae.get(e).program;e.program=void 0,void 0!==r&&Ue.releaseProgram(r)}function l(e,r,t,n){var i;if(t instanceof THREE.InstancedBufferGeometry&&(i=Le.get("ANGLE_instanced_arrays"),null===i))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");void 0===n&&(n=0),Pe.initAttributes();var a=t.attributes,o=r.getAttributes(),s=e.defaultAttributeValues;for(var c in o){var l=o[c];if(l>=0){var h=a[c];if(void 0!==h){var d=Me.FLOAT,u=h.array,p=h.normalized;u instanceof Float32Array?d=Me.FLOAT:u instanceof Float64Array?console.warn("Unsupported data buffer format: Float64Array"):u instanceof Uint16Array?d=Me.UNSIGNED_SHORT:u instanceof Int16Array?d=Me.SHORT:u instanceof Uint32Array?d=Me.UNSIGNED_INT:u instanceof Int32Array?d=Me.INT:u instanceof Int8Array?d=Me.BYTE:u instanceof Uint8Array&&(d=Me.UNSIGNED_BYTE);var f=h.itemSize,m=Ie.getAttributeBuffer(h);if(h instanceof THREE.InterleavedBufferAttribute){var E=h.data,g=E.stride,v=h.offset;E instanceof THREE.InstancedInterleavedBuffer?(Pe.enableAttributeAndDivisor(l,E.meshPerAttribute,i),void 0===t.maxInstancedCount&&(t.maxInstancedCount=E.meshPerAttribute*E.count)):Pe.enableAttribute(l),Me.bindBuffer(Me.ARRAY_BUFFER,m),Me.vertexAttribPointer(l,f,d,p,g*E.array.BYTES_PER_ELEMENT,(n*g+v)*E.array.BYTES_PER_ELEMENT)}else h instanceof THREE.InstancedBufferAttribute?(Pe.enableAttributeAndDivisor(l,h.meshPerAttribute,i),void 0===t.maxInstancedCount&&(t.maxInstancedCount=h.meshPerAttribute*h.count)):Pe.enableAttribute(l),Me.bindBuffer(Me.ARRAY_BUFFER,m),Me.vertexAttribPointer(l,f,d,p,0,n*f*h.array.BYTES_PER_ELEMENT)}else if(void 0!==s){var T=s[c];if(void 0!==T)switch(T.length){case 2:Me.vertexAttrib2fv(l,T);break;case 3:Me.vertexAttrib3fv(l,T);break;case 4:Me.vertexAttrib4fv(l,T);break;default:Me.vertexAttrib1fv(l,T)}}}}Pe.disableUnusedAttributes()}function h(e,r){return Math.abs(r[0])-Math.abs(e[0])}function d(e,r){return e.object.renderOrder!==r.object.renderOrder?e.object.renderOrder-r.object.renderOrder:e.material.id!==r.material.id?e.material.id-r.material.id:e.z!==r.z?e.z-r.z:e.id-r.id}function u(e,r){return e.object.renderOrder!==r.object.renderOrder?e.object.renderOrder-r.object.renderOrder:e.z!==r.z?r.z-e.z:e.id-r.id}function p(e,r,t,n,i){var a,o;t.transparent?(a=Y,o=++q):(a=W,o=++X);var s=a[o];void 0!==s?(s.id=e.id,s.object=e,s.geometry=r,s.material=t,s.z=Re.z,s.group=i):(s={id:e.id,object:e,geometry:r,material:t,z:Re.z,group:i},a.push(s))}function f(e){var r=e.geometry;return null===r.boundingSphere&&r.computeBoundingSphere(),ye.copy(r.boundingSphere).applyMatrix4(e.matrixWorld),E(ye)}function m(e){return ye.center.set(0,0,0),ye.radius=.7071067811865476,ye.applyMatrix4(e.matrixWorld),E(ye)}function E(e){if(!ge.intersectsSphere(e))return!1;var r=ve.numPlanes;if(0===r)return!0;var t=J.clippingPlanes,n=e.center,i=-e.radius,a=0;do if(t[a].distanceToPoint(n)<i)return!1;while(++a!==r);return!0}function g(e,r){if(e.visible!==!1){if(e.layers.test(r.layers))if(e instanceof THREE.Light)j.push(e);else if(e instanceof THREE.Sprite)e.frustumCulled!==!1&&m(e)!==!0||K.push(e);else if(e instanceof THREE.LensFlare)Q.push(e);else if(e instanceof THREE.ImmediateRenderObject)J.sortObjects===!0&&(Re.setFromMatrixPosition(e.matrixWorld),Re.applyProjection(xe)),p(e,null,e.material,Re.z,null);else if((e instanceof THREE.Mesh||e instanceof THREE.Line||e instanceof THREE.Points)&&(e instanceof THREE.SkinnedMesh&&e.skeleton.update(),e.frustumCulled===!1||f(e)===!0)){var t=e.material;if(t.visible===!0){J.sortObjects===!0&&(Re.setFromMatrixPosition(e.matrixWorld),Re.applyProjection(xe));var n=Ie.update(e);if(t instanceof THREE.MultiMaterial)for(var i=n.groups,a=t.materials,o=0,s=i.length;s>o;o++){var c=i[o],l=a[c.materialIndex];l.visible===!0&&p(e,n,l,Re.z,c)}else p(e,n,t,Re.z,null)}}for(var h=e.children,o=0,s=h.length;s>o;o++)g(h[o],r)}}function v(e,r,t,n){for(var i=0,a=e.length;a>i;i++){var o=e[i],s=o.object,c=o.geometry,l=void 0===n?o.material:n,h=o.group;if(s.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,s.matrixWorld),s.normalMatrix.getNormalMatrix(s.modelViewMatrix),s instanceof THREE.ImmediateRenderObject){_(l);var d=y(r,t,l,s);ne="",s.render(function(e){J.renderBufferImmediate(e,d,l)})}else J.renderBufferDirect(r,t,c,l,s,h)}}function T(e,r,t){var n=Ae.get(e),i=Ue.getParameters(e,be,r,ve.numPlanes,t),a=Ue.getProgramCode(e,i),s=n.program,l=!0;if(void 0===s)e.addEventListener("dispose",o);else if(s.code!==a)c(e);else{if(void 0!==i.shaderID)return;l=!1}if(l){if(i.shaderID){var h=THREE.ShaderLib[i.shaderID];n.__webglShader={name:e.type,uniforms:THREE.UniformsUtils.clone(h.uniforms),vertexShader:h.vertexShader,fragmentShader:h.fragmentShader}}else n.__webglShader={name:e.type,uniforms:e.uniforms,vertexShader:e.vertexShader,fragmentShader:e.fragmentShader};e.__webglShader=n.__webglShader,s=Ue.acquireProgram(e,i,a),n.program=s,e.program=s}var d=s.getAttributes();if(e.morphTargets){e.numSupportedMorphTargets=0;for(var u=0;u<J.maxMorphTargets;u++)d["morphTarget"+u]>=0&&e.numSupportedMorphTargets++}if(e.morphNormals){e.numSupportedMorphNormals=0;for(var u=0;u<J.maxMorphNormals;u++)d["morphNormal"+u]>=0&&e.numSupportedMorphNormals++}var p=n.__webglShader.uniforms;(e instanceof THREE.ShaderMaterial||e instanceof THREE.RawShaderMaterial)&&e.clipping!==!0||(n.numClippingPlanes=ve.numPlanes,p.clippingPlanes=ve.uniform),e.lights&&(n.lightsHash=be.hash,p.ambientLightColor.value=be.ambient,p.directionalLights.value=be.directional,p.spotLights.value=be.spot,p.pointLights.value=be.point,p.hemisphereLights.value=be.hemi,p.directionalShadowMap.value=be.directionalShadowMap,p.directionalShadowMatrix.value=be.directionalShadowMatrix,p.spotShadowMap.value=be.spotShadowMap,p.spotShadowMatrix.value=be.spotShadowMatrix,p.pointShadowMap.value=be.pointShadowMap,p.pointShadowMatrix.value=be.pointShadowMatrix);var f=n.program.getUniforms(),m=THREE.WebGLUniforms.seqWithValue(f.seq,p);n.uniformsList=m,n.dynamicUniforms=THREE.WebGLUniforms.splitDynamic(m,p)}function _(e){e.side!==THREE.DoubleSide?Pe.enable(Me.CULL_FACE):Pe.disable(Me.CULL_FACE),Pe.setFlipSided(e.side===THREE.BackSide),e.transparent===!0?Pe.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha):Pe.setBlending(THREE.NoBlending),Pe.setDepthFunc(e.depthFunc),Pe.setDepthTest(e.depthTest),Pe.setDepthWrite(e.depthWrite),Pe.setColorWrite(e.colorWrite),Pe.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits)}function y(e,r,t,n){ce=0;var i=Ae.get(t);if(Te){if(_e||e!==ie){var a=e===ie&&t.id===te;ve.setState(t.clippingPlanes,t.clipShadows,e,i,a)}void 0!==i.numClippingPlanes&&i.numClippingPlanes!==ve.numPlanes&&(t.needsUpdate=!0)}void 0===i.program&&(t.needsUpdate=!0),void 0!==i.lightsHash&&i.lightsHash!==be.hash&&(t.needsUpdate=!0),t.needsUpdate&&(T(t,r,n),t.needsUpdate=!1);var o=!1,s=!1,c=!1,l=i.program,h=l.getUniforms(),d=i.__webglShader.uniforms;if(l.id!==$&&(Me.useProgram(l.program),$=l.id,o=!0,s=!0,c=!0),t.id!==te&&(te=t.id,s=!0),o||e!==ie){if(h.set(Me,e,"projectionMatrix"),Ce.logarithmicDepthBuffer&&h.setValue(Me,"logDepthBufFC",2/(Math.log(e.far+1)/Math.LN2)),e!==ie&&(ie=e,s=!0,c=!0),t instanceof THREE.ShaderMaterial||t instanceof THREE.MeshPhongMaterial||t instanceof THREE.MeshStandardMaterial||t.envMap){var u=h.map.cameraPosition;void 0!==u&&u.setValue(Me,Re.setFromMatrixPosition(e.matrixWorld))}(t instanceof THREE.MeshPhongMaterial||t instanceof THREE.MeshLambertMaterial||t instanceof THREE.MeshBasicMaterial||t instanceof THREE.MeshStandardMaterial||t instanceof THREE.ShaderMaterial||t.skinning)&&h.setValue(Me,"viewMatrix",e.matrixWorldInverse),h.set(Me,J,"toneMappingExposure"),h.set(Me,J,"toneMappingWhitePoint")}if(t.skinning){h.setOptional(Me,n,"bindMatrix"),h.setOptional(Me,n,"bindMatrixInverse");var p=n.skeleton;p&&(Ce.floatVertexTextures&&p.useVertexTexture?(h.set(Me,p,"boneTexture"),h.set(Me,p,"boneTextureWidth"),h.set(Me,p,"boneTextureHeight")):h.setOptional(Me,p,"boneMatrices"))}s&&(t.lights&&P(d,c),r&&t.fog&&M(d,r),(t instanceof THREE.MeshBasicMaterial||t instanceof THREE.MeshLambertMaterial||t instanceof THREE.MeshPhongMaterial||t instanceof THREE.MeshStandardMaterial||t instanceof THREE.MeshDepthMaterial)&&x(d,t),t instanceof THREE.LineBasicMaterial?R(d,t):t instanceof THREE.LineDashedMaterial?(R(d,t),b(d,t)):t instanceof THREE.PointsMaterial?H(d,t):t instanceof THREE.MeshLambertMaterial?S(d,t):t instanceof THREE.MeshPhongMaterial?w(d,t):t instanceof THREE.MeshPhysicalMaterial?C(d,t):t instanceof THREE.MeshStandardMaterial?L(d,t):t instanceof THREE.MeshDepthMaterial?t.displacementMap&&(d.displacementMap.value=t.displacementMap,d.displacementScale.value=t.displacementScale,d.displacementBias.value=t.displacementBias):t instanceof THREE.MeshNormalMaterial&&(d.opacity.value=t.opacity),THREE.WebGLUniforms.upload(Me,i.uniformsList,d,J)),h.set(Me,n,"modelViewMatrix"),h.set(Me,n,"normalMatrix"),h.setValue(Me,"modelMatrix",n.matrixWorld);var f=i.dynamicUniforms;return null!==f&&(THREE.WebGLUniforms.evalDynamic(f,d,n,e),THREE.WebGLUniforms.upload(Me,f,d,J)),l}function x(e,r){e.opacity.value=r.opacity,e.diffuse.value=r.color,r.emissive&&e.emissive.value.copy(r.emissive).multiplyScalar(r.emissiveIntensity),e.map.value=r.map,e.specularMap.value=r.specularMap,e.alphaMap.value=r.alphaMap,r.aoMap&&(e.aoMap.value=r.aoMap,e.aoMapIntensity.value=r.aoMapIntensity);var t;if(r.map?t=r.map:r.specularMap?t=r.specularMap:r.displacementMap?t=r.displacementMap:r.normalMap?t=r.normalMap:r.bumpMap?t=r.bumpMap:r.roughnessMap?t=r.roughnessMap:r.metalnessMap?t=r.metalnessMap:r.alphaMap?t=r.alphaMap:r.emissiveMap&&(t=r.emissiveMap),void 0!==t){t instanceof THREE.WebGLRenderTarget&&(t=t.texture);var n=t.offset,i=t.repeat;e.offsetRepeat.value.set(n.x,n.y,i.x,i.y)}e.envMap.value=r.envMap,e.flipEnvMap.value=r.envMap instanceof THREE.CubeTexture?-1:1,e.reflectivity.value=r.reflectivity,e.refractionRatio.value=r.refractionRatio}function R(e,r){e.diffuse.value=r.color,e.opacity.value=r.opacity}function b(e,r){e.dashSize.value=r.dashSize,e.totalSize.value=r.dashSize+r.gapSize,e.scale.value=r.scale}function H(e,r){if(e.diffuse.value=r.color,e.opacity.value=r.opacity,e.size.value=r.size*pe,e.scale.value=.5*N.clientHeight,e.map.value=r.map,null!==r.map){var t=r.map.offset,n=r.map.repeat;e.offsetRepeat.value.set(t.x,t.y,n.x,n.y)}}function M(e,r){e.fogColor.value=r.color,r instanceof THREE.Fog?(e.fogNear.value=r.near,e.fogFar.value=r.far):r instanceof THREE.FogExp2&&(e.fogDensity.value=r.density)}function S(e,r){r.lightMap&&(e.lightMap.value=r.lightMap,e.lightMapIntensity.value=r.lightMapIntensity),r.emissiveMap&&(e.emissiveMap.value=r.emissiveMap)}function w(e,r){e.specular.value=r.specular,e.shininess.value=Math.max(r.shininess,1e-4),r.lightMap&&(e.lightMap.value=r.lightMap,e.lightMapIntensity.value=r.lightMapIntensity),r.emissiveMap&&(e.emissiveMap.value=r.emissiveMap),r.bumpMap&&(e.bumpMap.value=r.bumpMap,e.bumpScale.value=r.bumpScale),r.normalMap&&(e.normalMap.value=r.normalMap,e.normalScale.value.copy(r.normalScale)),r.displacementMap&&(e.displacementMap.value=r.displacementMap,e.displacementScale.value=r.displacementScale,e.displacementBias.value=r.displacementBias)}function L(e,r){e.roughness.value=r.roughness,e.metalness.value=r.metalness,r.roughnessMap&&(e.roughnessMap.value=r.roughnessMap),r.metalnessMap&&(e.metalnessMap.value=r.metalnessMap),r.lightMap&&(e.lightMap.value=r.lightMap,e.lightMapIntensity.value=r.lightMapIntensity),r.emissiveMap&&(e.emissiveMap.value=r.emissiveMap),r.bumpMap&&(e.bumpMap.value=r.bumpMap,e.bumpScale.value=r.bumpScale),r.normalMap&&(e.normalMap.value=r.normalMap,e.normalScale.value.copy(r.normalScale)),r.displacementMap&&(e.displacementMap.value=r.displacementMap,e.displacementScale.value=r.displacementScale,e.displacementBias.value=r.displacementBias),r.envMap&&(e.envMapIntensity.value=r.envMapIntensity)}function C(e,r){e.clearCoat.value=r.clearCoat,e.clearCoatRoughness.value=r.clearCoatRoughness,L(e,r)}function P(e,r){e.ambientLightColor.needsUpdate=r,e.directionalLights.needsUpdate=r,e.pointLights.needsUpdate=r,e.spotLights.needsUpdate=r,e.hemisphereLights.needsUpdate=r}function A(e){for(var r=0,t=0,n=e.length;n>t;t++){var i=e[t];i.castShadow&&(be.shadows[r++]=i)}be.shadows.length=r}function D(e,r){var t,n,i,a,o,s,c,l=0,h=0,d=0,u=r.matrixWorldInverse,p=0,f=0,m=0,E=0;for(t=0,n=e.length;n>t;t++)if(i=e[t],a=i.color,o=i.intensity,s=i.distance,c=i.shadow&&i.shadow.map?i.shadow.map.texture:null,
i instanceof THREE.AmbientLight)l+=a.r*o,h+=a.g*o,d+=a.b*o;else if(i instanceof THREE.DirectionalLight){var g=Ne.get(i);g.color.copy(i.color).multiplyScalar(i.intensity),g.direction.setFromMatrixPosition(i.matrixWorld),Re.setFromMatrixPosition(i.target.matrixWorld),g.direction.sub(Re),g.direction.transformDirection(u),g.shadow=i.castShadow,i.castShadow&&(g.shadowBias=i.shadow.bias,g.shadowRadius=i.shadow.radius,g.shadowMapSize=i.shadow.mapSize),be.directionalShadowMap[p]=c,be.directionalShadowMatrix[p]=i.shadow.matrix,be.directional[p++]=g}else if(i instanceof THREE.SpotLight){var g=Ne.get(i);g.position.setFromMatrixPosition(i.matrixWorld),g.position.applyMatrix4(u),g.color.copy(a).multiplyScalar(o),g.distance=s,g.direction.setFromMatrixPosition(i.matrixWorld),Re.setFromMatrixPosition(i.target.matrixWorld),g.direction.sub(Re),g.direction.transformDirection(u),g.coneCos=Math.cos(i.angle),g.penumbraCos=Math.cos(i.angle*(1-i.penumbra)),g.decay=0===i.distance?0:i.decay,g.shadow=i.castShadow,i.castShadow&&(g.shadowBias=i.shadow.bias,g.shadowRadius=i.shadow.radius,g.shadowMapSize=i.shadow.mapSize),be.spotShadowMap[m]=c,be.spotShadowMatrix[m]=i.shadow.matrix,be.spot[m++]=g}else if(i instanceof THREE.PointLight){var g=Ne.get(i);g.position.setFromMatrixPosition(i.matrixWorld),g.position.applyMatrix4(u),g.color.copy(i.color).multiplyScalar(i.intensity),g.distance=i.distance,g.decay=0===i.distance?0:i.decay,g.shadow=i.castShadow,i.castShadow&&(g.shadowBias=i.shadow.bias,g.shadowRadius=i.shadow.radius,g.shadowMapSize=i.shadow.mapSize),be.pointShadowMap[f]=c,void 0===be.pointShadowMatrix[f]&&(be.pointShadowMatrix[f]=new THREE.Matrix4),Re.setFromMatrixPosition(i.matrixWorld).negate(),be.pointShadowMatrix[f].identity().setPosition(Re),be.point[f++]=g}else if(i instanceof THREE.HemisphereLight){var g=Ne.get(i);g.direction.setFromMatrixPosition(i.matrixWorld),g.direction.transformDirection(u),g.direction.normalize(),g.skyColor.copy(i.color).multiplyScalar(o),g.groundColor.copy(i.groundColor).multiplyScalar(o),be.hemi[E++]=g}be.ambient[0]=l,be.ambient[1]=h,be.ambient[2]=d,be.directional.length=p,be.spot.length=m,be.point.length=f,be.hemi.length=E,be.hash=p+","+f+","+m+","+E+","+be.shadows.length}function I(){var e=ce;return e>=Ce.maxTextures&&console.warn("WebGLRenderer: trying to use "+e+" texture units while this GPU supports only "+Ce.maxTextures),ce+=1,e}function U(e){var r;if(e===THREE.RepeatWrapping)return Me.REPEAT;if(e===THREE.ClampToEdgeWrapping)return Me.CLAMP_TO_EDGE;if(e===THREE.MirroredRepeatWrapping)return Me.MIRRORED_REPEAT;if(e===THREE.NearestFilter)return Me.NEAREST;if(e===THREE.NearestMipMapNearestFilter)return Me.NEAREST_MIPMAP_NEAREST;if(e===THREE.NearestMipMapLinearFilter)return Me.NEAREST_MIPMAP_LINEAR;if(e===THREE.LinearFilter)return Me.LINEAR;if(e===THREE.LinearMipMapNearestFilter)return Me.LINEAR_MIPMAP_NEAREST;if(e===THREE.LinearMipMapLinearFilter)return Me.LINEAR_MIPMAP_LINEAR;if(e===THREE.UnsignedByteType)return Me.UNSIGNED_BYTE;if(e===THREE.UnsignedShort4444Type)return Me.UNSIGNED_SHORT_4_4_4_4;if(e===THREE.UnsignedShort5551Type)return Me.UNSIGNED_SHORT_5_5_5_1;if(e===THREE.UnsignedShort565Type)return Me.UNSIGNED_SHORT_5_6_5;if(e===THREE.ByteType)return Me.BYTE;if(e===THREE.ShortType)return Me.SHORT;if(e===THREE.UnsignedShortType)return Me.UNSIGNED_SHORT;if(e===THREE.IntType)return Me.INT;if(e===THREE.UnsignedIntType)return Me.UNSIGNED_INT;if(e===THREE.FloatType)return Me.FLOAT;if(r=Le.get("OES_texture_half_float"),null!==r&&e===THREE.HalfFloatType)return r.HALF_FLOAT_OES;if(e===THREE.AlphaFormat)return Me.ALPHA;if(e===THREE.RGBFormat)return Me.RGB;if(e===THREE.RGBAFormat)return Me.RGBA;if(e===THREE.LuminanceFormat)return Me.LUMINANCE;if(e===THREE.LuminanceAlphaFormat)return Me.LUMINANCE_ALPHA;if(e===THREE.DepthFormat)return Me.DEPTH_COMPONENT;if(e===THREE.AddEquation)return Me.FUNC_ADD;if(e===THREE.SubtractEquation)return Me.FUNC_SUBTRACT;if(e===THREE.ReverseSubtractEquation)return Me.FUNC_REVERSE_SUBTRACT;if(e===THREE.ZeroFactor)return Me.ZERO;if(e===THREE.OneFactor)return Me.ONE;if(e===THREE.SrcColorFactor)return Me.SRC_COLOR;if(e===THREE.OneMinusSrcColorFactor)return Me.ONE_MINUS_SRC_COLOR;if(e===THREE.SrcAlphaFactor)return Me.SRC_ALPHA;if(e===THREE.OneMinusSrcAlphaFactor)return Me.ONE_MINUS_SRC_ALPHA;if(e===THREE.DstAlphaFactor)return Me.DST_ALPHA;if(e===THREE.OneMinusDstAlphaFactor)return Me.ONE_MINUS_DST_ALPHA;if(e===THREE.DstColorFactor)return Me.DST_COLOR;if(e===THREE.OneMinusDstColorFactor)return Me.ONE_MINUS_DST_COLOR;if(e===THREE.SrcAlphaSaturateFactor)return Me.SRC_ALPHA_SATURATE;if(r=Le.get("WEBGL_compressed_texture_s3tc"),null!==r){if(e===THREE.RGB_S3TC_DXT1_Format)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===THREE.RGBA_S3TC_DXT1_Format)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===THREE.RGBA_S3TC_DXT3_Format)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===THREE.RGBA_S3TC_DXT5_Format)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(r=Le.get("WEBGL_compressed_texture_pvrtc"),null!==r){if(e===THREE.RGB_PVRTC_4BPPV1_Format)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===THREE.RGB_PVRTC_2BPPV1_Format)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===THREE.RGBA_PVRTC_4BPPV1_Format)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===THREE.RGBA_PVRTC_2BPPV1_Format)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(r=Le.get("WEBGL_compressed_texture_etc1"),null!==r&&e===THREE.RGB_ETC1_Format)return r.COMPRESSED_RGB_ETC1_WEBGL;if(r=Le.get("EXT_blend_minmax"),null!==r){if(e===THREE.MinEquation)return r.MIN_EXT;if(e===THREE.MaxEquation)return r.MAX_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION),e=e||{};var N=void 0!==e.canvas?e.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),O=void 0!==e.context?e.context:null,B=void 0!==e.alpha?e.alpha:!1,F=void 0!==e.depth?e.depth:!0,G=void 0!==e.stencil?e.stencil:!0,V=void 0!==e.antialias?e.antialias:!1,z=void 0!==e.premultipliedAlpha?e.premultipliedAlpha:!0,k=void 0!==e.preserveDrawingBuffer?e.preserveDrawingBuffer:!1,j=[],W=[],X=-1,Y=[],q=-1,Z=new Float32Array(8),K=[],Q=[];this.domElement=N,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=THREE.LinearToneMapping,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var J=this,$=null,ee=null,re=null,te=-1,ne="",ie=null,ae=new THREE.Vector4,oe=null,se=new THREE.Vector4,ce=0,le=new THREE.Color(0),he=0,de=N.width,ue=N.height,pe=1,fe=new THREE.Vector4(0,0,de,ue),me=!1,Ee=new THREE.Vector4(0,0,de,ue),ge=new THREE.Frustum,ve=new THREE.WebGLClipping,Te=!1,_e=!1,ye=new THREE.Sphere,xe=new THREE.Matrix4,Re=new THREE.Vector3,be={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],shadows:[]},He={calls:0,vertices:0,faces:0,points:0};this.info={render:He,memory:{geometries:0,textures:0},programs:null};var Me;try{var Se={alpha:B,depth:F,stencil:G,antialias:V,premultipliedAlpha:z,preserveDrawingBuffer:k};if(Me=O||N.getContext("webgl",Se)||N.getContext("experimental-webgl",Se),null===Me)throw null!==N.getContext("webgl")?"Error creating WebGL context with your selected attributes.":"Error creating WebGL context.";void 0===Me.getShaderPrecisionFormat&&(Me.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}),N.addEventListener("webglcontextlost",a,!1)}catch(we){console.error("THREE.WebGLRenderer: "+we)}var Le=new THREE.WebGLExtensions(Me);Le.get("WEBGL_depth_texture"),Le.get("OES_texture_float"),Le.get("OES_texture_float_linear"),Le.get("OES_texture_half_float"),Le.get("OES_texture_half_float_linear"),Le.get("OES_standard_derivatives"),Le.get("ANGLE_instanced_arrays"),Le.get("OES_element_index_uint")&&(THREE.BufferGeometry.MaxIndex=4294967296);var Ce=new THREE.WebGLCapabilities(Me,Le,e),Pe=new THREE.WebGLState(Me,Le,U),Ae=new THREE.WebGLProperties,De=new THREE.WebGLTextures(Me,Le,Pe,Ae,Ce,U,this.info),Ie=new THREE.WebGLObjects(Me,Ae,this.info),Ue=new THREE.WebGLPrograms(this,Ce),Ne=new THREE.WebGLLights;this.info.programs=Ue.programs;var Oe=new THREE.WebGLBufferRenderer(Me,Le,He),Be=new THREE.WebGLIndexedBufferRenderer(Me,Le,He),Fe=new THREE.OrthographicCamera(-1,1,1,-1,0,1),Ge=new THREE.PerspectiveCamera,Ve=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),new THREE.MeshBasicMaterial({depthTest:!1,depthWrite:!1})),ze=THREE.ShaderLib.cube,ke=new THREE.Mesh(new THREE.BoxBufferGeometry(5,5,5),new THREE.ShaderMaterial({uniforms:ze.uniforms,vertexShader:ze.vertexShader,fragmentShader:ze.fragmentShader,depthTest:!1,depthWrite:!1,side:THREE.BackSide}));Ie.update(Ve),Ie.update(ke),n(),this.context=Me,this.capabilities=Ce,this.extensions=Le,this.properties=Ae,this.state=Pe;var je=new THREE.WebGLShadowMap(this,be,Ie);this.shadowMap=je;var We=new THREE.SpritePlugin(this,K),Xe=new THREE.LensFlarePlugin(this,Q);this.getContext=function(){return Me},this.getContextAttributes=function(){return Me.getContextAttributes()},this.forceContextLoss=function(){Le.get("WEBGL_lose_context").loseContext()},this.getMaxAnisotropy=function(){return Ce.getMaxAnisotropy()},this.getPrecision=function(){return Ce.precision},this.getPixelRatio=function(){return pe},this.setPixelRatio=function(e){void 0!==e&&(pe=e,this.setSize(Ee.z,Ee.w,!1))},this.getSize=function(){return{width:de,height:ue}},this.setSize=function(e,r,t){de=e,ue=r,N.width=e*pe,N.height=r*pe,t!==!1&&(N.style.width=e+"px",N.style.height=r+"px"),this.setViewport(0,0,e,r)},this.setViewport=function(e,r,t,n){Pe.viewport(Ee.set(e,r,t,n))},this.setScissor=function(e,r,t,n){Pe.scissor(fe.set(e,r,t,n))},this.setScissorTest=function(e){Pe.setScissorTest(me=e)},this.getClearColor=function(){return le},this.setClearColor=function(e,r){le.set(e),he=void 0!==r?r:1,t(le.r,le.g,le.b,he)},this.getClearAlpha=function(){return he},this.setClearAlpha=function(e){he=e,t(le.r,le.g,le.b,he)},this.clear=function(e,r,t){var n=0;(void 0===e||e)&&(n|=Me.COLOR_BUFFER_BIT),(void 0===r||r)&&(n|=Me.DEPTH_BUFFER_BIT),(void 0===t||t)&&(n|=Me.STENCIL_BUFFER_BIT),Me.clear(n)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(e,r,t,n){this.setRenderTarget(e),this.clear(r,t,n)},this.resetGLState=i,this.dispose=function(){Y=[],q=-1,W=[],X=-1,N.removeEventListener("webglcontextlost",a,!1)},this.renderBufferImmediate=function(e,r,t){Pe.initAttributes();var n=Ae.get(e);e.hasPositions&&!n.position&&(n.position=Me.createBuffer()),e.hasNormals&&!n.normal&&(n.normal=Me.createBuffer()),e.hasUvs&&!n.uv&&(n.uv=Me.createBuffer()),e.hasColors&&!n.color&&(n.color=Me.createBuffer());var i=r.getAttributes();if(e.hasPositions&&(Me.bindBuffer(Me.ARRAY_BUFFER,n.position),Me.bufferData(Me.ARRAY_BUFFER,e.positionArray,Me.DYNAMIC_DRAW),Pe.enableAttribute(i.position),Me.vertexAttribPointer(i.position,3,Me.FLOAT,!1,0,0)),e.hasNormals){if(Me.bindBuffer(Me.ARRAY_BUFFER,n.normal),"MeshPhongMaterial"!==t.type&&"MeshStandardMaterial"!==t.type&&"MeshPhysicalMaterial"!==t.type&&t.shading===THREE.FlatShading)for(var a=0,o=3*e.count;o>a;a+=9){var s=e.normalArray,c=(s[a+0]+s[a+3]+s[a+6])/3,l=(s[a+1]+s[a+4]+s[a+7])/3,h=(s[a+2]+s[a+5]+s[a+8])/3;s[a+0]=c,s[a+1]=l,s[a+2]=h,s[a+3]=c,s[a+4]=l,s[a+5]=h,s[a+6]=c,s[a+7]=l,s[a+8]=h}Me.bufferData(Me.ARRAY_BUFFER,e.normalArray,Me.DYNAMIC_DRAW),Pe.enableAttribute(i.normal),Me.vertexAttribPointer(i.normal,3,Me.FLOAT,!1,0,0)}e.hasUvs&&t.map&&(Me.bindBuffer(Me.ARRAY_BUFFER,n.uv),Me.bufferData(Me.ARRAY_BUFFER,e.uvArray,Me.DYNAMIC_DRAW),Pe.enableAttribute(i.uv),Me.vertexAttribPointer(i.uv,2,Me.FLOAT,!1,0,0)),e.hasColors&&t.vertexColors!==THREE.NoColors&&(Me.bindBuffer(Me.ARRAY_BUFFER,n.color),Me.bufferData(Me.ARRAY_BUFFER,e.colorArray,Me.DYNAMIC_DRAW),Pe.enableAttribute(i.color),Me.vertexAttribPointer(i.color,3,Me.FLOAT,!1,0,0)),Pe.disableUnusedAttributes(),Me.drawArrays(Me.TRIANGLES,0,e.count),e.count=0},this.renderBufferDirect=function(e,t,n,i,a,o){_(i);var s=y(e,t,i,a),c=!1,d=n.id+"_"+s.id+"_"+i.wireframe;d!==ne&&(ne=d,c=!0);var u=a.morphTargetInfluences;if(void 0!==u){for(var p=[],f=0,m=u.length;m>f;f++){var E=u[f];p.push([E,f])}p.sort(h),p.length>8&&(p.length=8);for(var g=n.morphAttributes,f=0,m=p.length;m>f;f++){var E=p[f];if(Z[f]=E[0],0!==E[0]){var v=E[1];i.morphTargets===!0&&g.position&&n.addAttribute("morphTarget"+f,g.position[v]),i.morphNormals===!0&&g.normal&&n.addAttribute("morphNormal"+f,g.normal[v])}else i.morphTargets===!0&&n.removeAttribute("morphTarget"+f),i.morphNormals===!0&&n.removeAttribute("morphNormal"+f)}s.getUniforms().setValue(Me,"morphTargetInfluences",Z),c=!0}var v=n.index,T=n.attributes.position;i.wireframe===!0&&(v=Ie.getWireframeAttribute(n));var x;null!==v?(x=Be,x.setIndex(v)):x=Oe,c&&(l(i,s,n),null!==v&&Me.bindBuffer(Me.ELEMENT_ARRAY_BUFFER,Ie.getAttributeBuffer(v)));var R=0,b=1/0;null!==v?b=v.count:void 0!==T&&(b=T.count);var H=n.drawRange.start,M=n.drawRange.count,S=null!==o?o.start:0,w=null!==o?o.count:1/0,L=Math.max(R,H,S),C=Math.min(R+b,H+M,S+w)-1,P=Math.max(0,C-L+1);if(a instanceof THREE.Mesh)if(i.wireframe===!0)Pe.setLineWidth(i.wireframeLinewidth*r()),x.setMode(Me.LINES);else switch(a.drawMode){case THREE.TrianglesDrawMode:x.setMode(Me.TRIANGLES);break;case THREE.TriangleStripDrawMode:x.setMode(Me.TRIANGLE_STRIP);break;case THREE.TriangleFanDrawMode:x.setMode(Me.TRIANGLE_FAN)}else if(a instanceof THREE.Line){var A=i.linewidth;void 0===A&&(A=1),Pe.setLineWidth(A*r()),a instanceof THREE.LineSegments?x.setMode(Me.LINES):x.setMode(Me.LINE_STRIP)}else a instanceof THREE.Points&&x.setMode(Me.POINTS);n instanceof THREE.InstancedBufferGeometry?n.maxInstancedCount>0&&x.renderInstances(n,L,P):x.render(L,P)},this.render=function(e,r,n,i){if(r instanceof THREE.Camera==!1)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");var a=e.fog;ne="",te=-1,ie=null,e.autoUpdate===!0&&e.updateMatrixWorld(),null===r.parent&&r.updateMatrixWorld(),r.matrixWorldInverse.getInverse(r.matrixWorld),xe.multiplyMatrices(r.projectionMatrix,r.matrixWorldInverse),ge.setFromMatrix(xe),j.length=0,X=-1,q=-1,K.length=0,Q.length=0,_e=this.localClippingEnabled,Te=ve.init(this.clippingPlanes,_e,r),g(e,r),W.length=X+1,Y.length=q+1,J.sortObjects===!0&&(W.sort(d),Y.sort(u)),Te&&ve.beginShadows(),A(j),je.render(e,r),D(j,r),Te&&ve.endShadows(),He.calls=0,He.vertices=0,He.faces=0,He.points=0,void 0===n&&(n=null),this.setRenderTarget(n);var o=e.background;if(null===o?t(le.r,le.g,le.b,he):o instanceof THREE.Color&&t(o.r,o.g,o.b,1),(this.autoClear||i)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil),o instanceof THREE.CubeTexture?(Ge.projectionMatrix.copy(r.projectionMatrix),Ge.matrixWorld.extractRotation(r.matrixWorld),Ge.matrixWorldInverse.getInverse(Ge.matrixWorld),ke.material.uniforms.tCube.value=o,ke.modelViewMatrix.multiplyMatrices(Ge.matrixWorldInverse,ke.matrixWorld),J.renderBufferDirect(Ge,null,ke.geometry,ke.material,ke,null)):o instanceof THREE.Texture&&(Ve.material.map=o,J.renderBufferDirect(Fe,null,Ve.geometry,Ve.material,Ve,null)),e.overrideMaterial){var s=e.overrideMaterial;v(W,r,a,s),v(Y,r,a,s)}else Pe.setBlending(THREE.NoBlending),v(W,r,a),v(Y,r,a);We.render(e,r),Xe.render(e,r,se),n&&De.updateRenderTargetMipmap(n),Pe.setDepthTest(!0),Pe.setDepthWrite(!0),Pe.setColorWrite(!0)},this.setFaceCulling=function(e,r){Pe.setCullFace(e),Pe.setFlipSided(r===THREE.FrontFaceDirectionCW)},this.allocTextureUnit=I,this.setTexture2D=function(){var e=!1;return function(r,t){r instanceof THREE.WebGLRenderTarget&&(e||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),e=!0),r=r.texture),De.setTexture2D(r,t)}}(),this.setTexture=function(){var e=!1;return function(r,t){e||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),e=!0),De.setTexture2D(r,t)}}(),this.setTextureCube=function(){var e=!1;return function(r,t){r instanceof THREE.WebGLRenderTargetCube&&(e||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),e=!0),r=r.texture),r instanceof THREE.CubeTexture||Array.isArray(r.image)&&6===r.image.length?De.setTextureCube(r,t):De.setTextureCubeDynamic(r,t)}}(),this.getCurrentRenderTarget=function(){return ee},this.setRenderTarget=function(e){ee=e,e&&void 0===Ae.get(e).__webglFramebuffer&&De.setupRenderTarget(e);var r,t=e instanceof THREE.WebGLRenderTargetCube;if(e){var n=Ae.get(e);r=t?n.__webglFramebuffer[e.activeCubeFace]:n.__webglFramebuffer,ae.copy(e.scissor),oe=e.scissorTest,se.copy(e.viewport)}else r=null,ae.copy(fe).multiplyScalar(pe),oe=me,se.copy(Ee).multiplyScalar(pe);if(re!==r&&(Me.bindFramebuffer(Me.FRAMEBUFFER,r),re=r),Pe.scissor(ae),Pe.setScissorTest(oe),Pe.viewport(se),t){var i=Ae.get(e.texture);Me.framebufferTexture2D(Me.FRAMEBUFFER,Me.COLOR_ATTACHMENT0,Me.TEXTURE_CUBE_MAP_POSITIVE_X+e.activeCubeFace,i.__webglTexture,e.activeMipMapLevel)}},this.readRenderTargetPixels=function(e,r,t,n,i,a){if(e instanceof THREE.WebGLRenderTarget==!1)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");var o=Ae.get(e).__webglFramebuffer;if(o){var s=!1;o!==re&&(Me.bindFramebuffer(Me.FRAMEBUFFER,o),s=!0);try{var c=e.texture;if(c.format!==THREE.RGBAFormat&&U(c.format)!==Me.getParameter(Me.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(c.type===THREE.UnsignedByteType||U(c.type)===Me.getParameter(Me.IMPLEMENTATION_COLOR_READ_TYPE)||c.type===THREE.FloatType&&Le.get("WEBGL_color_buffer_float")||c.type===THREE.HalfFloatType&&Le.get("EXT_color_buffer_half_float")))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");Me.checkFramebufferStatus(Me.FRAMEBUFFER)===Me.FRAMEBUFFER_COMPLETE?r>=0&&r<=e.width-n&&t>=0&&t<=e.height-i&&Me.readPixels(r,t,n,i,U(c.format),U(c.type),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{s&&Me.bindFramebuffer(Me.FRAMEBUFFER,re)}}}},THREE.WebGLRenderTarget=function(e,r,t){this.uuid=THREE.Math.generateUUID(),this.width=e,this.height=r,this.scissor=new THREE.Vector4(0,0,e,r),this.scissorTest=!1,this.viewport=new THREE.Vector4(0,0,e,r),t=t||{},void 0===t.minFilter&&(t.minFilter=THREE.LinearFilter),this.texture=new THREE.Texture(void 0,void 0,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.depthBuffer=void 0!==t.depthBuffer?t.depthBuffer:!0,this.stencilBuffer=void 0!==t.stencilBuffer?t.stencilBuffer:!0,this.depthTexture=null},Object.assign(THREE.WebGLRenderTarget.prototype,THREE.EventDispatcher.prototype,{setSize:function(e,r){this.width===e&&this.height===r||(this.width=e,this.height=r,this.dispose()),this.viewport.set(0,0,e,r),this.scissor.set(0,0,e,r)},clone:function(){return(new this.constructor).copy(this)},copy:function(e){return this.width=e.width,this.height=e.height,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,this.depthTexture=e.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),THREE.WebGLRenderTargetCube=function(e,r,t){THREE.WebGLRenderTarget.call(this,e,r,t),this.activeCubeFace=0,this.activeMipMapLevel=0},THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype),THREE.WebGLRenderTargetCube.prototype.constructor=THREE.WebGLRenderTargetCube,THREE.WebGLBufferRenderer=function(e,r,t){function n(e){o=e}function i(r,n){e.drawArrays(o,r,n),t.calls++,t.vertices+=n,o===e.TRIANGLES&&(t.faces+=n/3)}function a(n){var i=r.get("ANGLE_instanced_arrays");if(null===i)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");var a=n.attributes.position,s=0;a instanceof THREE.InterleavedBufferAttribute?(s=a.data.count,i.drawArraysInstancedANGLE(o,0,s,n.maxInstancedCount)):(s=a.count,i.drawArraysInstancedANGLE(o,0,s,n.maxInstancedCount)),t.calls++,t.vertices+=s*n.maxInstancedCount,o===e.TRIANGLES&&(t.faces+=n.maxInstancedCount*s/3)}var o;this.setMode=n,this.render=i,this.renderInstances=a},THREE.WebGLClipping=function(){function e(){l.value!==n&&(l.value=n,l.needsUpdate=i>0),t.numPlanes=i}function r(e,r,n,i){var a=null!==e?e.length:0,o=null;if(0!==a){if(o=l.value,i!==!0||null===o){var h=n+4*a,d=r.matrixWorldInverse;c.getNormalMatrix(d),(null===o||o.length<h)&&(o=new Float32Array(h));for(var u=0,p=n;u!==a;++u,p+=4)s.copy(e[u]).applyMatrix4(d,c),s.normal.toArray(o,p),o[p+3]=s.constant}l.value=o,l.needsUpdate=!0}return t.numPlanes=a,o}var t=this,n=null,i=0,a=!1,o=!1,s=new THREE.Plane,c=new THREE.Matrix3,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.init=function(e,t,o){var s=0!==e.length||t||0!==i||a;return a=t,n=r(e,o,0),i=e.length,s},this.beginShadows=function(){o=!0,r(null)},this.endShadows=function(){o=!1,e()},this.setState=function(t,s,c,h,d){if(!a||null===t||0===t.length||o&&!s)o?r(null):e();else{var u=o?0:i,p=4*u,f=h.clippingState||null;l.value=f,f=r(t,c,p,d);for(var m=0;m!==p;++m)f[m]=n[m];h.clippingState=f,this.numPlanes+=u}}},THREE.WebGLIndexedBufferRenderer=function(e,r,t){function n(e){s=e}function i(t){t.array instanceof Uint32Array&&r.get("OES_element_index_uint")?(c=e.UNSIGNED_INT,l=4):(c=e.UNSIGNED_SHORT,l=2)}function a(r,n){e.drawElements(s,n,c,r*l),t.calls++,t.vertices+=n,s===e.TRIANGLES&&(t.faces+=n/3)}function o(n,i,a){var o=r.get("ANGLE_instanced_arrays");return null===o?void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."):(o.drawElementsInstancedANGLE(s,a,c,i*l,n.maxInstancedCount),t.calls++,t.vertices+=a*n.maxInstancedCount,void(s===e.TRIANGLES&&(t.faces+=n.maxInstancedCount*a/3)))}var s,c,l;this.setMode=n,this.setIndex=i,this.render=a,this.renderInstances=o},THREE.WebGLExtensions=function(e){var r={};this.get=function(t){if(void 0!==r[t])return r[t];var n;switch(t){case"WEBGL_depth_texture":n=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":n=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":n=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":n=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case"WEBGL_compressed_texture_etc1":n=e.getExtension("WEBGL_compressed_texture_etc1");break;default:n=e.getExtension(t)}return null===n&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),r[t]=n,n}},THREE.WebGLCapabilities=function(e,r,t){function n(){if(void 0!==a)return a;var t=r.get("EXT_texture_filter_anisotropic");return a=null!==t?e.getParameter(t.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}function i(r){if("highp"===r){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";r="mediump"}return"mediump"===r&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}var a;this.getMaxAnisotropy=n,this.getMaxPrecision=i,this.precision=void 0!==t.precision?t.precision:"highp",this.logarithmicDepthBuffer=void 0!==t.logarithmicDepthBuffer?t.logarithmicDepthBuffer:!1,this.maxTextures=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),this.maxVertexTextures=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),this.maxTextureSize=e.getParameter(e.MAX_TEXTURE_SIZE),this.maxCubemapSize=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),this.maxAttributes=e.getParameter(e.MAX_VERTEX_ATTRIBS),this.maxVertexUniforms=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),this.maxVaryings=e.getParameter(e.MAX_VARYING_VECTORS),this.maxFragmentUniforms=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),this.vertexTextures=this.maxVertexTextures>0,this.floatFragmentTextures=!!r.get("OES_texture_float"),this.floatVertexTextures=this.vertexTextures&&this.floatFragmentTextures;var o=i(this.precision);o!==this.precision&&(console.warn("THREE.WebGLRenderer:",this.precision,"not supported, using",o,"instead."),this.precision=o),this.logarithmicDepthBuffer&&(this.logarithmicDepthBuffer=!!r.get("EXT_frag_depth"))},THREE.WebGLGeometries=function(e,r,t){function n(e){var r=e.geometry;if(void 0!==l[r.id])return l[r.id];r.addEventListener("dispose",i);var n;return r instanceof THREE.BufferGeometry?n=r:r instanceof THREE.Geometry&&(void 0===r._bufferGeometry&&(r._bufferGeometry=(new THREE.BufferGeometry).setFromObject(e)),n=r._bufferGeometry),l[r.id]=n,t.memory.geometries++,n}function i(e){var n=e.target,a=l[n.id];null!==a.index&&o(a.index),s(a.attributes),n.removeEventListener("dispose",i),delete l[n.id];var c=r.get(n);c.wireframe&&o(c.wireframe),r["delete"](n);var h=r.get(a);h.wireframe&&o(h.wireframe),r["delete"](a),t.memory.geometries--}function a(e){return e instanceof THREE.InterleavedBufferAttribute?r.get(e.data).__webglBuffer:r.get(e).__webglBuffer}function o(r){var t=a(r);void 0!==t&&(e.deleteBuffer(t),c(r))}function s(e){for(var r in e)o(e[r])}function c(e){e instanceof THREE.InterleavedBufferAttribute?r["delete"](e.data):r["delete"](e)}var l={};this.get=n},THREE.WebGLLights=function(){var e={};this.get=function(r){if(void 0!==e[r.id])return e[r.id];var t;switch(r.type){case"DirectionalLight":t={direction:new THREE.Vector3,color:new THREE.Color,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case"SpotLight":t={position:new THREE.Vector3,direction:new THREE.Vector3,color:new THREE.Color,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case"PointLight":t={position:new THREE.Vector3,color:new THREE.Color,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new THREE.Vector2};break;case"HemisphereLight":t={direction:new THREE.Vector3,skyColor:new THREE.Color,groundColor:new THREE.Color}}return e[r.id]=t,t}},THREE.WebGLObjects=function(e,r,t){function n(r){var t=h.get(r);r.geometry instanceof THREE.Geometry&&t.updateFromObject(r);var n=t.index,a=t.attributes;null!==n&&i(n,e.ELEMENT_ARRAY_BUFFER);for(var o in a)i(a[o],e.ARRAY_BUFFER);var s=t.morphAttributes;for(var o in s)for(var c=s[o],l=0,d=c.length;d>l;l++)i(c[l],e.ARRAY_BUFFER);return t}function i(e,t){var n=e instanceof THREE.InterleavedBufferAttribute?e.data:e,i=r.get(n);void 0===i.__webglBuffer?a(i,n,t):i.version!==n.version&&o(i,n,t)}function a(r,t,n){r.__webglBuffer=e.createBuffer(),e.bindBuffer(n,r.__webglBuffer);var i=t.dynamic?e.DYNAMIC_DRAW:e.STATIC_DRAW;e.bufferData(n,t.array,i),r.version=t.version}function o(r,t,n){e.bindBuffer(n,r.__webglBuffer),t.dynamic===!1||-1===t.updateRange.count?e.bufferSubData(n,0,t.array):0===t.updateRange.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(e.bufferSubData(n,t.updateRange.offset*t.array.BYTES_PER_ELEMENT,t.array.subarray(t.updateRange.offset,t.updateRange.offset+t.updateRange.count)),t.updateRange.count=0),r.version=t.version}function s(e){return e instanceof THREE.InterleavedBufferAttribute?r.get(e.data).__webglBuffer:r.get(e).__webglBuffer}function c(t){var n=r.get(t);if(void 0!==n.wireframe)return n.wireframe;var a=[],o=t.index,s=t.attributes,c=s.position;if(null!==o)for(var h={},d=o.array,u=0,p=d.length;p>u;u+=3){var f=d[u+0],m=d[u+1],E=d[u+2];l(h,f,m)&&a.push(f,m),l(h,m,E)&&a.push(m,E),l(h,E,f)&&a.push(E,f)}else for(var d=s.position.array,u=0,p=d.length/3-1;p>u;u+=3){var f=u+0,m=u+1,E=u+2;a.push(f,m,m,E,E,f)}var g=c.count>65535?Uint32Array:Uint16Array,v=new THREE.BufferAttribute(new g(a),1);return i(v,e.ELEMENT_ARRAY_BUFFER),n.wireframe=v,v}function l(e,r,t){if(r>t){var n=r;r=t,t=n}var i=e[r];return void 0===i?(e[r]=[t],!0):-1===i.indexOf(t)?(i.push(t),!0):!1}var h=new THREE.WebGLGeometries(e,r,t);this.getAttributeBuffer=s,this.getWireframeAttribute=c,this.update=n},THREE.WebGLProgram=function(){function e(e){switch(e){case THREE.LinearEncoding:return["Linear","( value )"];case THREE.sRGBEncoding:return["sRGB","( value )"];case THREE.RGBEEncoding:return["RGBE","( value )"];case THREE.RGBM7Encoding:return["RGBM","( value, 7.0 )"];case THREE.RGBM16Encoding:return["RGBM","( value, 16.0 )"];case THREE.RGBDEncoding:return["RGBD","( value, 256.0 )"];case THREE.GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+e)}}function r(r,t){var n=e(t);return"vec4 "+r+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function t(r,t){var n=e(t);return"vec4 "+r+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function n(e,r){var t;switch(r){case THREE.LinearToneMapping:t="Linear";break;case THREE.ReinhardToneMapping:t="Reinhard";break;case THREE.Uncharted2ToneMapping:t="Uncharted2";break;case THREE.CineonToneMapping:t="OptimizedCineon";break;default:throw new Error("unsupported toneMapping: "+r)}return"vec3 "+e+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function i(e,r,t){e=e||{};var n=[e.derivatives||r.envMapCubeUV||r.bumpMap||r.normalMap||r.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(e.fragDepth||r.logarithmicDepthBuffer)&&t.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",e.drawBuffers&&t.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(e.shaderTextureLOD||r.envMap)&&t.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""];return n.filter(s).join("\n")}function a(e){var r=[];for(var t in e){var n=e[t];n!==!1&&r.push("#define "+t+" "+n)}return r.join("\n")}function o(e,r,t){for(var n={},i=e.getProgramParameter(r,e.ACTIVE_ATTRIBUTES),a=0;i>a;a++){var o=e.getActiveAttrib(r,a),s=o.name;n[s]=e.getAttribLocation(r,s)}return n}function s(e){return""!==e}function c(e,r){return e.replace(/NUM_DIR_LIGHTS/g,r.numDirLights).replace(/NUM_SPOT_LIGHTS/g,r.numSpotLights).replace(/NUM_POINT_LIGHTS/g,r.numPointLights).replace(/NUM_HEMI_LIGHTS/g,r.numHemiLights)}function l(e){function r(e,r){var t=THREE.ShaderChunk[r];if(void 0===t)throw new Error("Can not resolve #include <"+r+">");return l(t)}var t=/#include +<([\w\d.]+)>/g;return e.replace(t,r)}function h(e){function r(e,r,t,n){for(var i="",a=parseInt(r);a<parseInt(t);a++)i+=n.replace(/\[ i \]/g,"[ "+a+" ]");return i}var t=/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;return e.replace(t,r)}var d=0;return function(e,u,p,f){var m=e.context,E=p.extensions,g=p.defines,v=p.__webglShader.vertexShader,T=p.__webglShader.fragmentShader,_="SHADOWMAP_TYPE_BASIC";f.shadowMapType===THREE.PCFShadowMap?_="SHADOWMAP_TYPE_PCF":f.shadowMapType===THREE.PCFSoftShadowMap&&(_="SHADOWMAP_TYPE_PCF_SOFT");var y="ENVMAP_TYPE_CUBE",x="ENVMAP_MODE_REFLECTION",R="ENVMAP_BLENDING_MULTIPLY";if(f.envMap){switch(p.envMap.mapping){case THREE.CubeReflectionMapping:case THREE.CubeRefractionMapping:y="ENVMAP_TYPE_CUBE";break;case THREE.CubeUVReflectionMapping:
case THREE.CubeUVRefractionMapping:y="ENVMAP_TYPE_CUBE_UV";break;case THREE.EquirectangularReflectionMapping:case THREE.EquirectangularRefractionMapping:y="ENVMAP_TYPE_EQUIREC";break;case THREE.SphericalReflectionMapping:y="ENVMAP_TYPE_SPHERE"}switch(p.envMap.mapping){case THREE.CubeRefractionMapping:case THREE.EquirectangularRefractionMapping:x="ENVMAP_MODE_REFRACTION"}switch(p.combine){case THREE.MultiplyOperation:R="ENVMAP_BLENDING_MULTIPLY";break;case THREE.MixOperation:R="ENVMAP_BLENDING_MIX";break;case THREE.AddOperation:R="ENVMAP_BLENDING_ADD"}}var b,H,M=e.gammaFactor>0?e.gammaFactor:1,S=i(E,f,e.extensions),w=a(g),L=m.createProgram();p instanceof THREE.RawShaderMaterial?(b=[w].filter(s).join("\n"),H=[w].filter(s).join("\n")):(b=["precision "+f.precision+" float;","precision "+f.precision+" int;","#define SHADER_NAME "+p.__webglShader.name,w,f.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+M,"#define MAX_BONES "+f.maxBones,f.map?"#define USE_MAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+x:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":"",f.normalMap?"#define USE_NORMALMAP":"",f.displacementMap&&f.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":"",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":"",f.vertexColors?"#define USE_COLOR":"",f.flatShading?"#define FLAT_SHADED":"",f.skinning?"#define USE_SKINNING":"",f.useVertexTexture?"#define BONE_TEXTURE":"",f.morphTargets?"#define USE_MORPHTARGETS":"",f.morphNormals&&f.flatShading===!1?"#define USE_MORPHNORMALS":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+f.numClippingPlanes,f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+_:"",f.sizeAttenuation?"#define USE_SIZEATTENUATION":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&e.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","	attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(s).join("\n"),H=[S,"precision "+f.precision+" float;","precision "+f.precision+" int;","#define SHADER_NAME "+p.__webglShader.name,w,f.alphaTest?"#define ALPHATEST "+f.alphaTest:"","#define GAMMA_FACTOR "+M,f.useFog&&f.fog?"#define USE_FOG":"",f.useFog&&f.fogExp?"#define FOG_EXP2":"",f.map?"#define USE_MAP":"",f.envMap?"#define USE_ENVMAP":"",f.envMap?"#define "+y:"",f.envMap?"#define "+x:"",f.envMap?"#define "+R:"",f.lightMap?"#define USE_LIGHTMAP":"",f.aoMap?"#define USE_AOMAP":"",f.emissiveMap?"#define USE_EMISSIVEMAP":"",f.bumpMap?"#define USE_BUMPMAP":"",f.normalMap?"#define USE_NORMALMAP":"",f.specularMap?"#define USE_SPECULARMAP":"",f.roughnessMap?"#define USE_ROUGHNESSMAP":"",f.metalnessMap?"#define USE_METALNESSMAP":"",f.alphaMap?"#define USE_ALPHAMAP":"",f.vertexColors?"#define USE_COLOR":"",f.flatShading?"#define FLAT_SHADED":"",f.doubleSided?"#define DOUBLE_SIDED":"",f.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+f.numClippingPlanes,f.shadowMapEnabled?"#define USE_SHADOWMAP":"",f.shadowMapEnabled?"#define "+_:"",f.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",f.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",f.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",f.logarithmicDepthBuffer&&e.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",f.envMap&&e.extensions.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",f.toneMapping!==THREE.NoToneMapping?"#define TONE_MAPPING":"",f.toneMapping!==THREE.NoToneMapping?THREE.ShaderChunk.tonemapping_pars_fragment:"",f.toneMapping!==THREE.NoToneMapping?n("toneMapping",f.toneMapping):"",f.outputEncoding||f.mapEncoding||f.envMapEncoding||f.emissiveMapEncoding?THREE.ShaderChunk.encodings_pars_fragment:"",f.mapEncoding?r("mapTexelToLinear",f.mapEncoding):"",f.envMapEncoding?r("envMapTexelToLinear",f.envMapEncoding):"",f.emissiveMapEncoding?r("emissiveMapTexelToLinear",f.emissiveMapEncoding):"",f.outputEncoding?t("linearToOutputTexel",f.outputEncoding):"",f.depthPacking?"#define DEPTH_PACKING "+p.depthPacking:"","\n"].filter(s).join("\n")),v=l(v,f),v=c(v,f),T=l(T,f),T=c(T,f),p instanceof THREE.ShaderMaterial==!1&&(v=h(v),T=h(T));var C=b+v,P=H+T,A=THREE.WebGLShader(m,m.VERTEX_SHADER,C),D=THREE.WebGLShader(m,m.FRAGMENT_SHADER,P);m.attachShader(L,A),m.attachShader(L,D),void 0!==p.index0AttributeName?m.bindAttribLocation(L,0,p.index0AttributeName):f.morphTargets===!0&&m.bindAttribLocation(L,0,"position"),m.linkProgram(L);var I=m.getProgramInfoLog(L),U=m.getShaderInfoLog(A),N=m.getShaderInfoLog(D),O=!0,B=!0;m.getProgramParameter(L,m.LINK_STATUS)===!1?(O=!1,console.error("THREE.WebGLProgram: shader error: ",m.getError(),"gl.VALIDATE_STATUS",m.getProgramParameter(L,m.VALIDATE_STATUS),"gl.getProgramInfoLog",I,U,N)):""!==I?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",I):""!==U&&""!==N||(B=!1),B&&(this.diagnostics={runnable:O,material:p,programLog:I,vertexShader:{log:U,prefix:b},fragmentShader:{log:N,prefix:H}}),m.deleteShader(A),m.deleteShader(D);var F;this.getUniforms=function(){return void 0===F&&(F=new THREE.WebGLUniforms(m,L,e)),F};var G;return this.getAttributes=function(){return void 0===G&&(G=o(m,L)),G},this.destroy=function(){m.deleteProgram(L),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.id=d++,this.code=u,this.usedTimes=1,this.program=L,this.vertexShader=A,this.fragmentShader=D,this}}(),THREE.WebGLPrograms=function(e,r){function t(e){if(r.floatVertexTextures&&e&&e.skeleton&&e.skeleton.useVertexTexture)return 1024;var t=r.maxVertexUniforms,n=Math.floor((t-20)/4),i=n;return void 0!==e&&e instanceof THREE.SkinnedMesh&&(i=Math.min(e.skeleton.bones.length,i),i<e.skeleton.bones.length&&console.warn("WebGLRenderer: too many bones - "+e.skeleton.bones.length+", this GPU supports just "+i+" (try OpenGL instead of ANGLE)")),i}function n(e,r){var t;return e?e instanceof THREE.Texture?t=e.encoding:e instanceof THREE.WebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),t=e.texture.encoding):t=THREE.LinearEncoding,t===THREE.LinearEncoding&&r&&(t=THREE.GammaEncoding),t}var i=[],a={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points"},o=["precision","supportsVertexTextures","map","mapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","displacementMap","specularMap","roughnessMap","metalnessMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","depthPacking"];this.getParameters=function(i,o,s,c,l){var h=a[i.type],d=t(l),u=e.getPrecision();null!==i.precision&&(u=r.getMaxPrecision(i.precision),u!==i.precision&&console.warn("THREE.WebGLProgram.getParameters:",i.precision,"not supported, using",u,"instead."));var p=e.getCurrentRenderTarget(),f={shaderID:h,precision:u,supportsVertexTextures:r.vertexTextures,outputEncoding:n(p?p.texture:null,e.gammaOutput),map:!!i.map,mapEncoding:n(i.map,e.gammaInput),envMap:!!i.envMap,envMapMode:i.envMap&&i.envMap.mapping,envMapEncoding:n(i.envMap,e.gammaInput),envMapCubeUV:!!i.envMap&&(i.envMap.mapping===THREE.CubeUVReflectionMapping||i.envMap.mapping===THREE.CubeUVRefractionMapping),lightMap:!!i.lightMap,aoMap:!!i.aoMap,emissiveMap:!!i.emissiveMap,emissiveMapEncoding:n(i.emissiveMap,e.gammaInput),bumpMap:!!i.bumpMap,normalMap:!!i.normalMap,displacementMap:!!i.displacementMap,roughnessMap:!!i.roughnessMap,metalnessMap:!!i.metalnessMap,specularMap:!!i.specularMap,alphaMap:!!i.alphaMap,combine:i.combine,vertexColors:i.vertexColors,fog:s,useFog:i.fog,fogExp:s instanceof THREE.FogExp2,flatShading:i.shading===THREE.FlatShading,sizeAttenuation:i.sizeAttenuation,logarithmicDepthBuffer:r.logarithmicDepthBuffer,skinning:i.skinning,maxBones:d,useVertexTexture:r.floatVertexTextures&&l&&l.skeleton&&l.skeleton.useVertexTexture,morphTargets:i.morphTargets,morphNormals:i.morphNormals,maxMorphTargets:e.maxMorphTargets,maxMorphNormals:e.maxMorphNormals,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numHemiLights:o.hemi.length,numClippingPlanes:c,shadowMapEnabled:e.shadowMap.enabled&&l.receiveShadow&&o.shadows.length>0,shadowMapType:e.shadowMap.type,toneMapping:e.toneMapping,physicallyCorrectLights:e.physicallyCorrectLights,premultipliedAlpha:i.premultipliedAlpha,alphaTest:i.alphaTest,doubleSided:i.side===THREE.DoubleSide,flipSided:i.side===THREE.BackSide,depthPacking:void 0!==i.depthPacking?i.depthPacking:!1};return f},this.getProgramCode=function(e,r){var t=[];if(r.shaderID?t.push(r.shaderID):(t.push(e.fragmentShader),t.push(e.vertexShader)),void 0!==e.defines)for(var n in e.defines)t.push(n),t.push(e.defines[n]);for(var i=0;i<o.length;i++)t.push(r[o[i]]);return t.join()},this.acquireProgram=function(r,t,n){for(var a,o=0,s=i.length;s>o;o++){var c=i[o];if(c.code===n){a=c,++a.usedTimes;break}}return void 0===a&&(a=new THREE.WebGLProgram(e,n,r,t),i.push(a)),a},this.releaseProgram=function(e){if(0===--e.usedTimes){var r=i.indexOf(e);i[r]=i[i.length-1],i.pop(),e.destroy()}},this.programs=i},THREE.WebGLProperties=function(){var e={};this.get=function(r){var t=r.uuid,n=e[t];return void 0===n&&(n={},e[t]=n),n},this["delete"]=function(r){delete e[r.uuid]},this.clear=function(){e={}}},THREE.WebGLShader=function(){function e(e){for(var r=e.split("\n"),t=0;t<r.length;t++)r[t]=t+1+": "+r[t];return r.join("\n")}return function(r,t,n){var i=r.createShader(t);return r.shaderSource(i,n),r.compileShader(i),r.getShaderParameter(i,r.COMPILE_STATUS)===!1&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==r.getShaderInfoLog(i)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",t===r.VERTEX_SHADER?"vertex":"fragment",r.getShaderInfoLog(i),e(n)),i}}(),THREE.WebGLShadowMap=function(e,r,t){function n(r,t,n,i){var a=r.geometry,o=null,s=g,c=r.customDepthMaterial;if(n&&(s=v,c=r.customDistanceMaterial),c)o=c;else{var l=void 0!==a.morphTargets&&a.morphTargets.length>0&&t.morphTargets,h=r instanceof THREE.SkinnedMesh&&t.skinning,d=0;l&&(d|=f),h&&(d|=m),o=s[d]}if(e.localClippingEnabled&&t.clipShadows===!0&&0!==t.clippingPlanes.length){var u=o.uuid,p=t.uuid,E=T[u];void 0===E&&(E={},T[u]=E);var _=E[p];void 0===_&&(_=o.clone(),E[p]=_),o=_}o.visible=t.visible,o.wireframe=t.wireframe;var y=t.side;return P.renderSingleSided&&y==THREE.DoubleSide&&(y=THREE.FrontSide),P.renderReverseSided&&(y===THREE.FrontSide?y=THREE.BackSide:y===THREE.BackSide&&(y=THREE.FrontSide)),o.side=y,o.clipShadows=t.clipShadows,o.clippingPlanes=t.clippingPlanes,o.wireframeLinewidth=t.wireframeLinewidth,o.linewidth=t.linewidth,n&&void 0!==o.uniforms.lightPos&&o.uniforms.lightPos.value.copy(i),o}function i(e,r,t){if(e.visible!==!1){if(e.layers.test(r.layers)&&(e instanceof THREE.Mesh||e instanceof THREE.Line||e instanceof THREE.Points)&&e.castShadow&&(e.frustumCulled===!1||s.intersectsObject(e)===!0)){var n=e.material;n.visible===!0&&(e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld),p.push(e))}for(var a=e.children,o=0,c=a.length;c>o;o++)i(a[o],r,t)}}var a=e.context,o=e.state,s=new THREE.Frustum,c=new THREE.Matrix4,l=r.shadows,h=new THREE.Vector2,d=new THREE.Vector3,u=new THREE.Vector3,p=[],f=1,m=2,E=(f|m)+1,g=new Array(E),v=new Array(E),T={},_=[new THREE.Vector3(1,0,0),new THREE.Vector3(-1,0,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1),new THREE.Vector3(0,1,0),new THREE.Vector3(0,-1,0)],y=[new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,1,0),new THREE.Vector3(0,0,1),new THREE.Vector3(0,0,-1)],x=[new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4,new THREE.Vector4],R=new THREE.MeshDepthMaterial;R.depthPacking=THREE.RGBADepthPacking,R.clipping=!0;for(var b=THREE.ShaderLib.distanceRGBA,H=THREE.UniformsUtils.clone(b.uniforms),M=0;M!==E;++M){var S=0!==(M&f),w=0!==(M&m),L=R.clone();L.morphTargets=S,L.skinning=w,g[M]=L;var C=new THREE.ShaderMaterial({defines:{USE_SHADOWMAP:""},uniforms:H,vertexShader:b.vertexShader,fragmentShader:b.fragmentShader,morphTargets:S,skinning:w,clipping:!0});v[M]=C}var P=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=THREE.PCFShadowMap,this.renderReverseSided=!0,this.renderSingleSided=!0,this.render=function(r,f){if(P.enabled!==!1&&(P.autoUpdate!==!1||P.needsUpdate!==!1)&&0!==l.length){o.clearColor(1,1,1,1),o.disable(a.BLEND),o.setDepthTest(!0),o.setScissorTest(!1);for(var m,E,g=0,v=l.length;v>g;g++){var T=l[g],R=T.shadow;if(void 0!==R){var b=R.camera;if(h.copy(R.mapSize),T instanceof THREE.PointLight){m=6,E=!0;var H=h.x,M=h.y;x[0].set(2*H,M,H,M),x[1].set(0,M,H,M),x[2].set(3*H,M,H,M),x[3].set(H,M,H,M),x[4].set(3*H,0,H,M),x[5].set(H,0,H,M),h.x*=4,h.y*=2}else m=1,E=!1;if(null===R.map){var S={minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat};R.map=new THREE.WebGLRenderTarget(h.x,h.y,S),b.updateProjectionMatrix()}R instanceof THREE.SpotLightShadow&&R.update(T);var w=R.map,L=R.matrix;u.setFromMatrixPosition(T.matrixWorld),b.position.copy(u),e.setRenderTarget(w),e.clear();for(var C=0;m>C;C++){if(E){d.copy(b.position),d.add(_[C]),b.up.copy(y[C]),b.lookAt(d);var A=x[C];o.viewport(A)}else d.setFromMatrixPosition(T.target.matrixWorld),b.lookAt(d);b.updateMatrixWorld(),b.matrixWorldInverse.getInverse(b.matrixWorld),L.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),L.multiply(b.projectionMatrix),L.multiply(b.matrixWorldInverse),c.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse),s.setFromMatrix(c),p.length=0,i(r,f,b);for(var D=0,I=p.length;I>D;D++){var U=p[D],N=t.update(U),O=U.material;if(O instanceof THREE.MultiMaterial)for(var B=N.groups,F=O.materials,G=0,V=B.length;V>G;G++){var z=B[G],k=F[z.materialIndex];if(k.visible===!0){var j=n(U,k,E,u);e.renderBufferDirect(b,null,N,j,U,z)}}else{var j=n(U,O,E,u);e.renderBufferDirect(b,null,N,j,U,null)}}}}else console.warn("THREE.WebGLShadowMap:",T,"has no shadow.")}var W=e.getClearColor(),X=e.getClearAlpha();e.setClearColor(W,X),P.needsUpdate=!1}}},THREE.WebGLState=function(e,r,t){function n(r,t,n){var i=new Uint8Array(4),a=e.createTexture();e.bindTexture(r,a),e.texParameteri(r,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(r,e.TEXTURE_MAG_FILTER,e.NEAREST);for(var o=0;n>o;o++)e.texImage2D(t+o,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,i);return a}var i=this;this.buffers={color:new THREE.WebGLColorBuffer(e,this),depth:new THREE.WebGLDepthBuffer(e,this),stencil:new THREE.WebGLStencilBuffer(e,this)};var a=e.getParameter(e.MAX_VERTEX_ATTRIBS),o=new Uint8Array(a),s=new Uint8Array(a),c=new Uint8Array(a),l={},h=null,d=null,u=null,p=null,f=null,m=null,E=null,g=null,v=!1,T=null,_=null,y=null,x=null,R=null,b=null,H=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),M=null,S={},w=new THREE.Vector4,L=new THREE.Vector4,C={};C[e.TEXTURE_2D]=n(e.TEXTURE_2D,e.TEXTURE_2D,1),C[e.TEXTURE_CUBE_MAP]=n(e.TEXTURE_CUBE_MAP,e.TEXTURE_CUBE_MAP_POSITIVE_X,6),this.init=function(){this.clearColor(0,0,0,1),this.clearDepth(1),this.clearStencil(0),this.enable(e.DEPTH_TEST),this.setDepthFunc(THREE.LessEqualDepth),this.setFlipSided(!1),this.setCullFace(THREE.CullFaceBack),this.enable(e.CULL_FACE),this.enable(e.BLEND),this.setBlending(THREE.NormalBlending)},this.initAttributes=function(){for(var e=0,r=o.length;r>e;e++)o[e]=0},this.enableAttribute=function(t){if(o[t]=1,0===s[t]&&(e.enableVertexAttribArray(t),s[t]=1),0!==c[t]){var n=r.get("ANGLE_instanced_arrays");n.vertexAttribDivisorANGLE(t,0),c[t]=0}},this.enableAttributeAndDivisor=function(r,t,n){o[r]=1,0===s[r]&&(e.enableVertexAttribArray(r),s[r]=1),c[r]!==t&&(n.vertexAttribDivisorANGLE(r,t),c[r]=t)},this.disableUnusedAttributes=function(){for(var r=0,t=s.length;r!==t;++r)s[r]!==o[r]&&(e.disableVertexAttribArray(r),s[r]=0)},this.enable=function(r){l[r]!==!0&&(e.enable(r),l[r]=!0)},this.disable=function(r){l[r]!==!1&&(e.disable(r),l[r]=!1)},this.getCompressedTextureFormats=function(){if(null===h&&(h=[],r.get("WEBGL_compressed_texture_pvrtc")||r.get("WEBGL_compressed_texture_s3tc")||r.get("WEBGL_compressed_texture_etc1")))for(var t=e.getParameter(e.COMPRESSED_TEXTURE_FORMATS),n=0;n<t.length;n++)h.push(t[n]);return h},this.setBlending=function(r,n,i,a,o,s,c,l){return r===THREE.NoBlending?(this.disable(e.BLEND),void(d=r)):(this.enable(e.BLEND),r===d&&l===v||(r===THREE.AdditiveBlending?l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE,e.ONE,e.ONE)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.SRC_ALPHA,e.ONE)):r===THREE.SubtractiveBlending?l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.ZERO,e.ONE_MINUS_SRC_COLOR,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.ONE_MINUS_SRC_COLOR)):r===THREE.MultiplyBlending?l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ZERO,e.SRC_COLOR,e.ZERO,e.SRC_ALPHA)):(e.blendEquation(e.FUNC_ADD),e.blendFunc(e.ZERO,e.SRC_COLOR)):l?(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.ONE,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)):(e.blendEquationSeparate(e.FUNC_ADD,e.FUNC_ADD),e.blendFuncSeparate(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA,e.ONE,e.ONE_MINUS_SRC_ALPHA)),d=r,v=l),void(r===THREE.CustomBlending?(o=o||n,s=s||i,c=c||a,n===u&&o===m||(e.blendEquationSeparate(t(n),t(o)),u=n,m=o),i===p&&a===f&&s===E&&c===g||(e.blendFuncSeparate(t(i),t(a),t(s),t(c)),p=i,f=a,E=s,g=c)):(u=null,p=null,f=null,m=null,E=null,g=null)))},this.setColorWrite=function(e){this.buffers.color.setMask(e)},this.setDepthTest=function(e){this.buffers.depth.setTest(e)},this.setDepthWrite=function(e){this.buffers.depth.setMask(e)},this.setDepthFunc=function(e){this.buffers.depth.setFunc(e)},this.setStencilTest=function(e){this.buffers.stencil.setTest(e)},this.setStencilWrite=function(e){this.buffers.stencil.setMask(e)},this.setStencilFunc=function(e,r,t){this.buffers.stencil.setFunc(e,r,t)},this.setStencilOp=function(e,r,t){this.buffers.stencil.setOp(e,r,t)},this.setFlipSided=function(r){T!==r&&(r?e.frontFace(e.CW):e.frontFace(e.CCW),T=r)},this.setCullFace=function(r){r!==THREE.CullFaceNone?(this.enable(e.CULL_FACE),r!==_&&(r===THREE.CullFaceBack?e.cullFace(e.BACK):r===THREE.CullFaceFront?e.cullFace(e.FRONT):e.cullFace(e.FRONT_AND_BACK))):this.disable(e.CULL_FACE),_=r},this.setLineWidth=function(r){r!==y&&(e.lineWidth(r),y=r)},this.setPolygonOffset=function(r,t,n){r?(this.enable(e.POLYGON_OFFSET_FILL),x===t&&R===n||(e.polygonOffset(t,n),x=t,R=n)):this.disable(e.POLYGON_OFFSET_FILL)},this.getScissorTest=function(){return b},this.setScissorTest=function(r){b=r,r?this.enable(e.SCISSOR_TEST):this.disable(e.SCISSOR_TEST)},this.activeTexture=function(r){void 0===r&&(r=e.TEXTURE0+H-1),M!==r&&(e.activeTexture(r),M=r)},this.bindTexture=function(r,t){null===M&&i.activeTexture();var n=S[M];void 0===n&&(n={type:void 0,texture:void 0},S[M]=n),n.type===r&&n.texture===t||(e.bindTexture(r,t||C[r]),n.type=r,n.texture=t)},this.compressedTexImage2D=function(){try{e.compressedTexImage2D.apply(e,arguments)}catch(r){console.error(r)}},this.texImage2D=function(){try{e.texImage2D.apply(e,arguments)}catch(r){console.error(r)}},this.clearColor=function(e,r,t,n){this.buffers.color.setClear(e,r,t,n)},this.clearDepth=function(e){this.buffers.depth.setClear(e)},this.clearStencil=function(e){this.buffers.stencil.setClear(e)},this.scissor=function(r){w.equals(r)===!1&&(e.scissor(r.x,r.y,r.z,r.w),w.copy(r))},this.viewport=function(r){L.equals(r)===!1&&(e.viewport(r.x,r.y,r.z,r.w),L.copy(r))},this.reset=function(){for(var r=0;r<s.length;r++)1===s[r]&&(e.disableVertexAttribArray(r),s[r]=0);l={},h=null,M=null,S={},d=null,T=null,_=null,this.buffers.color.reset(),this.buffers.depth.reset(),this.buffers.stencil.reset()}},THREE.WebGLColorBuffer=function(e,r){var t=!1,n=new THREE.Vector4,i=null,a=new THREE.Vector4;this.setMask=function(r){i===r||t||(e.colorMask(r,r,r,r),i=r)},this.setLocked=function(e){t=e},this.setClear=function(r,t,i,o){n.set(r,t,i,o),a.equals(n)===!1&&(e.clearColor(r,t,i,o),a.copy(n))},this.reset=function(){t=!1,i=null,a=new THREE.Vector4}},THREE.WebGLDepthBuffer=function(e,r){var t=!1,n=null,i=null,a=null;this.setTest=function(t){t?r.enable(e.DEPTH_TEST):r.disable(e.DEPTH_TEST)},this.setMask=function(r){n===r||t||(e.depthMask(r),n=r)},this.setFunc=function(r){if(i!==r){if(r)switch(r){case THREE.NeverDepth:e.depthFunc(e.NEVER);break;case THREE.AlwaysDepth:e.depthFunc(e.ALWAYS);break;case THREE.LessDepth:e.depthFunc(e.LESS);break;case THREE.LessEqualDepth:e.depthFunc(e.LEQUAL);break;case THREE.EqualDepth:e.depthFunc(e.EQUAL);break;case THREE.GreaterEqualDepth:e.depthFunc(e.GEQUAL);break;case THREE.GreaterDepth:e.depthFunc(e.GREATER);break;case THREE.NotEqualDepth:e.depthFunc(e.NOTEQUAL);break;default:e.depthFunc(e.LEQUAL)}else e.depthFunc(e.LEQUAL);i=r}},this.setLocked=function(e){t=e},this.setClear=function(r){a!==r&&(e.clearDepth(r),a=r)},this.reset=function(){t=!1,n=null,i=null,a=null}},THREE.WebGLStencilBuffer=function(e,r){var t=!1,n=null,i=null,a=null,o=null,s=null,c=null,l=null,h=null;this.setTest=function(t){t?r.enable(e.STENCIL_TEST):r.disable(e.STENCIL_TEST)},this.setMask=function(r){n===r||t||(e.stencilMask(r),n=r)},this.setFunc=function(r,t,n){i===r&&a===t&&o===n||(e.stencilFunc(r,t,n),i=r,a=t,o=n)},this.setOp=function(r,t,n){s===r&&c===t&&l===n||(e.stencilOp(r,t,n),s=r,c=t,l=n)},this.setLocked=function(e){t=e},this.setClear=function(r){h!==r&&(e.clearStencil(r),h=r)},this.reset=function(){t=!1,n=null,i=null,a=null,o=null,s=null,c=null,l=null,h=null}},THREE.WebGLTextures=function(e,r,t,n,i,a,o){function s(e,r){if(e.width>r||e.height>r){var t=r/Math.max(e.width,e.height),n=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");n.width=Math.floor(e.width*t),n.height=Math.floor(e.height*t);var i=n.getContext("2d");return i.drawImage(e,0,0,e.width,e.height,0,0,n.width,n.height),console.warn("THREE.WebGLRenderer: image is too big ("+e.width+"x"+e.height+"). Resized to "+n.width+"x"+n.height,e),n}return e}function c(e){return THREE.Math.isPowerOfTwo(e.width)&&THREE.Math.isPowerOfTwo(e.height)}function l(e){if(e instanceof HTMLImageElement||e instanceof HTMLCanvasElement){var r=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");r.width=THREE.Math.nearestPowerOfTwo(e.width),r.height=THREE.Math.nearestPowerOfTwo(e.height);var t=r.getContext("2d");return t.drawImage(e,0,0,r.width,r.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+e.width+"x"+e.height+"). Resized to "+r.width+"x"+r.height,e),r}return e}function h(e){return e.wrapS!==THREE.ClampToEdgeWrapping||e.wrapT!==THREE.ClampToEdgeWrapping?!0:e.minFilter!==THREE.NearestFilter&&e.minFilter!==THREE.LinearFilter}function d(r){return r===THREE.NearestFilter||r===THREE.NearestMipMapNearestFilter||r===THREE.NearestMipMapLinearFilter?e.NEAREST:e.LINEAR}function u(e){var r=e.target;r.removeEventListener("dispose",u),f(r),S.textures--}function p(e){var r=e.target;r.removeEventListener("dispose",p),m(r),S.textures--}function f(r){var t=n.get(r);if(r.image&&t.__image__webglTextureCube)e.deleteTexture(t.__image__webglTextureCube);else{if(void 0===t.__webglInit)return;e.deleteTexture(t.__webglTexture)}n["delete"](r)}function m(r){var t=n.get(r),i=n.get(r.texture);if(r){if(void 0!==i.__webglTexture&&e.deleteTexture(i.__webglTexture),r.depthTexture&&r.depthTexture.dispose(),r instanceof THREE.WebGLRenderTargetCube)for(var a=0;6>a;a++)e.deleteFramebuffer(t.__webglFramebuffer[a]),t.__webglDepthbuffer&&e.deleteRenderbuffer(t.__webglDepthbuffer[a]);else e.deleteFramebuffer(t.__webglFramebuffer),t.__webglDepthbuffer&&e.deleteRenderbuffer(t.__webglDepthbuffer);n["delete"](r.texture),n["delete"](r)}}function E(r,i){var a=n.get(r);if(r.version>0&&a.__version!==r.version){var o=r.image;if(void 0===o)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",r);else{if(o.complete!==!1)return void _(a,r,i);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",r)}}t.activeTexture(e.TEXTURE0+i),t.bindTexture(e.TEXTURE_2D,a.__webglTexture)}function g(r,o){var l=n.get(r);if(6===r.image.length)if(r.version>0&&l.__version!==r.version){l.__image__webglTextureCube||(r.addEventListener("dispose",u),l.__image__webglTextureCube=e.createTexture(),S.textures++),t.activeTexture(e.TEXTURE0+o),t.bindTexture(e.TEXTURE_CUBE_MAP,l.__image__webglTextureCube),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,r.flipY);for(var h=r instanceof THREE.CompressedTexture,d=r.image[0]instanceof THREE.DataTexture,p=[],f=0;6>f;f++)h||d?p[f]=d?r.image[f].image:r.image[f]:p[f]=s(r.image[f],i.maxCubemapSize);var m=p[0],E=c(m),g=a(r.format),v=a(r.type);T(e.TEXTURE_CUBE_MAP,r,E);for(var f=0;6>f;f++)if(h)for(var _,y=p[f].mipmaps,x=0,R=y.length;R>x;x++)_=y[x],r.format!==THREE.RGBAFormat&&r.format!==THREE.RGBFormat?t.getCompressedTextureFormats().indexOf(g)>-1?t.compressedTexImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+f,x,g,_.width,_.height,0,_.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):t.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+f,x,g,_.width,_.height,0,g,v,_.data);else d?t.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,g,p[f].width,p[f].height,0,g,v,p[f].data):t.texImage2D(e.TEXTURE_CUBE_MAP_POSITIVE_X+f,0,g,g,v,p[f]);r.generateMipmaps&&E&&e.generateMipmap(e.TEXTURE_CUBE_MAP),l.__version=r.version,r.onUpdate&&r.onUpdate(r)}else t.activeTexture(e.TEXTURE0+o),t.bindTexture(e.TEXTURE_CUBE_MAP,l.__image__webglTextureCube)}function v(r,i){t.activeTexture(e.TEXTURE0+i),t.bindTexture(e.TEXTURE_CUBE_MAP,n.get(r).__webglTexture)}function T(t,o,s){var c;if(s?(e.texParameteri(t,e.TEXTURE_WRAP_S,a(o.wrapS)),e.texParameteri(t,e.TEXTURE_WRAP_T,a(o.wrapT)),e.texParameteri(t,e.TEXTURE_MAG_FILTER,a(o.magFilter)),e.texParameteri(t,e.TEXTURE_MIN_FILTER,a(o.minFilter))):(e.texParameteri(t,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(t,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),o.wrapS===THREE.ClampToEdgeWrapping&&o.wrapT===THREE.ClampToEdgeWrapping||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",o),e.texParameteri(t,e.TEXTURE_MAG_FILTER,d(o.magFilter)),e.texParameteri(t,e.TEXTURE_MIN_FILTER,d(o.minFilter)),o.minFilter!==THREE.NearestFilter&&o.minFilter!==THREE.LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",o)),c=r.get("EXT_texture_filter_anisotropic")){if(o.type===THREE.FloatType&&null===r.get("OES_texture_float_linear"))return;if(o.type===THREE.HalfFloatType&&null===r.get("OES_texture_half_float_linear"))return;(o.anisotropy>1||n.get(o).__currentAnisotropy)&&(e.texParameterf(t,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(o.anisotropy,i.getMaxAnisotropy())),n.get(o).__currentAnisotropy=o.anisotropy)}}function _(r,n,o){void 0===r.__webglInit&&(r.__webglInit=!0,n.addEventListener("dispose",u),r.__webglTexture=e.createTexture(),S.textures++),t.activeTexture(e.TEXTURE0+o),t.bindTexture(e.TEXTURE_2D,r.__webglTexture),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,n.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,n.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,n.unpackAlignment);var d=s(n.image,i.maxTextureSize);h(n)&&c(d)===!1&&(d=l(d));var p=c(d),f=a(n.format),m=a(n.type);T(e.TEXTURE_2D,n,p);var E,g=n.mipmaps;if(n instanceof THREE.DepthTexture){var v=e.DEPTH_COMPONENT;if(n.type===THREE.FloatType){if(!w)throw new Error("Float Depth Texture only supported in WebGL2.0");v=e.DEPTH_COMPONENT32F}else w&&(v=e.DEPTH_COMPONENT16);t.texImage2D(e.TEXTURE_2D,0,v,d.width,d.height,0,f,m,null)}else if(n instanceof THREE.DataTexture)if(g.length>0&&p){for(var _=0,y=g.length;y>_;_++)E=g[_],t.texImage2D(e.TEXTURE_2D,_,f,E.width,E.height,0,f,m,E.data);n.generateMipmaps=!1}else t.texImage2D(e.TEXTURE_2D,0,f,d.width,d.height,0,f,m,d.data);else if(n instanceof THREE.CompressedTexture)for(var _=0,y=g.length;y>_;_++)E=g[_],n.format!==THREE.RGBAFormat&&n.format!==THREE.RGBFormat?t.getCompressedTextureFormats().indexOf(f)>-1?t.compressedTexImage2D(e.TEXTURE_2D,_,f,E.width,E.height,0,E.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):t.texImage2D(e.TEXTURE_2D,_,f,E.width,E.height,0,f,m,E.data);else if(g.length>0&&p){for(var _=0,y=g.length;y>_;_++)E=g[_],t.texImage2D(e.TEXTURE_2D,_,f,f,m,E);n.generateMipmaps=!1}else t.texImage2D(e.TEXTURE_2D,0,f,f,m,d);n.generateMipmaps&&p&&e.generateMipmap(e.TEXTURE_2D),r.__version=n.version,n.onUpdate&&n.onUpdate(n)}function y(r,i,o,s){var c=a(i.texture.format),l=a(i.texture.type);t.texImage2D(s,0,c,i.width,i.height,0,c,l,null),e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,o,s,n.get(i.texture).__webglTexture,0),e.bindFramebuffer(e.FRAMEBUFFER,null)}function x(r,t){e.bindRenderbuffer(e.RENDERBUFFER,r),t.depthBuffer&&!t.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,r)):t.depthBuffer&&t.stencilBuffer?(e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_STENCIL,t.width,t.height),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_STENCIL_ATTACHMENT,e.RENDERBUFFER,r)):e.renderbufferStorage(e.RENDERBUFFER,e.RGBA4,t.width,t.height),e.bindRenderbuffer(e.RENDERBUFFER,null)}function R(r,t){var i=t instanceof THREE.WebGLRenderTargetCube;if(i)throw new Error("Depth Texture with cube render targets is not supported!");if(e.bindFramebuffer(e.FRAMEBUFFER,r),!(t.depthTexture instanceof THREE.DepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");n.get(t.depthTexture).__webglTexture&&t.depthTexture.image.width===t.width&&t.depthTexture.image.height===t.height||(t.depthTexture.image.width=t.width,t.depthTexture.image.height=t.height,t.depthTexture.needsUpdate=!0),E(t.depthTexture,0);var a=n.get(t.depthTexture).__webglTexture;e.framebufferTexture2D(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.TEXTURE_2D,a,0)}function b(r){
var t=n.get(r),i=r instanceof THREE.WebGLRenderTargetCube;if(r.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");R(t.__webglFramebuffer,r)}else if(i){t.__webglDepthbuffer=[];for(var a=0;6>a;a++)e.bindFramebuffer(e.FRAMEBUFFER,t.__webglFramebuffer[a]),t.__webglDepthbuffer[a]=e.createRenderbuffer(),x(t.__webglDepthbuffer[a],r)}else e.bindFramebuffer(e.FRAMEBUFFER,t.__webglFramebuffer),t.__webglDepthbuffer=e.createRenderbuffer(),x(t.__webglDepthbuffer,r);e.bindFramebuffer(e.FRAMEBUFFER,null)}function H(r){var i=n.get(r),a=n.get(r.texture);r.addEventListener("dispose",p),a.__webglTexture=e.createTexture(),S.textures++;var o=r instanceof THREE.WebGLRenderTargetCube,s=c(r);if(o){i.__webglFramebuffer=[];for(var l=0;6>l;l++)i.__webglFramebuffer[l]=e.createFramebuffer()}else i.__webglFramebuffer=e.createFramebuffer();if(o){t.bindTexture(e.TEXTURE_CUBE_MAP,a.__webglTexture),T(e.TEXTURE_CUBE_MAP,r.texture,s);for(var l=0;6>l;l++)y(i.__webglFramebuffer[l],r,e.COLOR_ATTACHMENT0,e.TEXTURE_CUBE_MAP_POSITIVE_X+l);r.texture.generateMipmaps&&s&&e.generateMipmap(e.TEXTURE_CUBE_MAP),t.bindTexture(e.TEXTURE_CUBE_MAP,null)}else t.bindTexture(e.TEXTURE_2D,a.__webglTexture),T(e.TEXTURE_2D,r.texture,s),y(i.__webglFramebuffer,r,e.COLOR_ATTACHMENT0,e.TEXTURE_2D),r.texture.generateMipmaps&&s&&e.generateMipmap(e.TEXTURE_2D),t.bindTexture(e.TEXTURE_2D,null);r.depthBuffer&&b(r)}function M(r){var i=r.texture;if(i.generateMipmaps&&c(r)&&i.minFilter!==THREE.NearestFilter&&i.minFilter!==THREE.LinearFilter){var a=r instanceof THREE.WebGLRenderTargetCube?e.TEXTURE_CUBE_MAP:e.TEXTURE_2D,o=n.get(i).__webglTexture;t.bindTexture(a,o),e.generateMipmap(a),t.bindTexture(a,null)}}var S=o.memory,w="undefined"!=typeof WebGL2RenderingContext&&e instanceof WebGL2RenderingContext;this.setTexture2D=E,this.setTextureCube=g,this.setTextureCubeDynamic=v,this.setupRenderTarget=H,this.updateRenderTargetMipmap=M},THREE.WebGLUniforms=function(){var e=new THREE.Texture,r=new THREE.CubeTexture,t=function(){this.seq=[],this.map={}},n=[],i=[],a=function(e,r,t){var i=e[0];if(0>=i||i>0)return e;var a=r*t,o=n[a];if(void 0===o&&(o=new Float32Array(a),n[a]=o),0!==r){i.toArray(o,0);for(var s=1,c=0;s!==r;++s)c+=t,e[s].toArray(o,c)}return o},o=function(e,r){var t=i[r];void 0===t&&(t=new Int32Array(r),i[r]=t);for(var n=0;n!==r;++n)t[n]=e.allocTextureUnit();return t},s=function(e,r){e.uniform1f(this.addr,r)},c=function(e,r){e.uniform1i(this.addr,r)},l=function(e,r){void 0===r.x?e.uniform2fv(this.addr,r):e.uniform2f(this.addr,r.x,r.y)},h=function(e,r){void 0!==r.x?e.uniform3f(this.addr,r.x,r.y,r.z):void 0!==r.r?e.uniform3f(this.addr,r.r,r.g,r.b):e.uniform3fv(this.addr,r)},d=function(e,r){void 0===r.x?e.uniform4fv(this.addr,r):e.uniform4f(this.addr,r.x,r.y,r.z,r.w)},u=function(e,r){e.uniformMatrix2fv(this.addr,!1,r.elements||r)},p=function(e,r){e.uniformMatrix3fv(this.addr,!1,r.elements||r)},f=function(e,r){e.uniformMatrix4fv(this.addr,!1,r.elements||r)},m=function(r,t,n){var i=n.allocTextureUnit();r.uniform1i(this.addr,i),n.setTexture2D(t||e,i)},E=function(e,t,n){var i=n.allocTextureUnit();e.uniform1i(this.addr,i),n.setTextureCube(t||r,i)},g=function(e,r){e.uniform2iv(this.addr,r)},v=function(e,r){e.uniform3iv(this.addr,r)},T=function(e,r){e.uniform4iv(this.addr,r)},_=function(e){switch(e){case 5126:return s;case 35664:return l;case 35665:return h;case 35666:return d;case 35674:return u;case 35675:return p;case 35676:return f;case 35678:return m;case 35680:return E;case 5124:case 35670:return c;case 35667:case 35671:return g;case 35668:case 35672:return v;case 35669:case 35673:return T}},y=function(e,r){e.uniform1fv(this.addr,r)},x=function(e,r){e.uniform1iv(this.addr,r)},R=function(e,r){e.uniform2fv(this.addr,a(r,this.size,2))},b=function(e,r){e.uniform3fv(this.addr,a(r,this.size,3))},H=function(e,r){e.uniform4fv(this.addr,a(r,this.size,4))},M=function(e,r){e.uniformMatrix2fv(this.addr,!1,a(r,this.size,4))},S=function(e,r){e.uniformMatrix3fv(this.addr,!1,a(r,this.size,9))},w=function(e,r){e.uniformMatrix4fv(this.addr,!1,a(r,this.size,16))},L=function(r,t,n){var i=t.length,a=o(n,i);r.uniform1iv(this.addr,a);for(var s=0;s!==i;++s)n.setTexture2D(t[s]||e,a[s])},C=function(e,t,n){var i=t.length,a=o(n,i);e.uniform1iv(this.addr,a);for(var s=0;s!==i;++s)n.setTextureCube(t[s]||r,a[s])},P=function(e){switch(e){case 5126:return y;case 35664:return R;case 35665:return b;case 35666:return H;case 35674:return M;case 35675:return S;case 35676:return w;case 35678:return L;case 35680:return C;case 5124:case 35670:return x;case 35667:case 35671:return g;case 35668:case 35672:return v;case 35669:case 35673:return T}},A=function(e,r,t){this.id=e,this.addr=t,this.setValue=_(r.type)},D=function(e,r,t){this.id=e,this.addr=t,this.size=r.size,this.setValue=P(r.type)},I=function(e){this.id=e,t.call(this)};I.prototype.setValue=function(e,r){for(var t=this.seq,n=0,i=t.length;n!==i;++n){var a=t[n];a.setValue(e,r[a.id])}};var U=/([\w\d_]+)(\])?(\[|\.)?/g,N=function(e,r){e.seq.push(r),e.map[r.id]=r},O=function(e,r,t){var n=e.name,i=n.length;for(U.lastIndex=0;;){var a=U.exec(n),o=U.lastIndex,s=a[1],c="]"===a[2],l=a[3];if(c&&(s=0|s),void 0===l||"["===l&&o+2===i){N(t,void 0===l?new A(s,e,r):new D(s,e,r));break}var h=t.map,d=h[s];void 0===d&&(d=new I(s),N(t,d)),t=d}},B=function(e,r,n){t.call(this),this.renderer=n;for(var i=e.getProgramParameter(r,e.ACTIVE_UNIFORMS),a=0;a!==i;++a){var o=e.getActiveUniform(r,a),s=o.name,c=e.getUniformLocation(r,s);O(o,c,this)}};return B.prototype.setValue=function(e,r,t){var n=this.map[r];void 0!==n&&n.setValue(e,t,this.renderer)},B.prototype.set=function(e,r,t){var n=this.map[t];void 0!==n&&n.setValue(e,r[t],this.renderer)},B.prototype.setOptional=function(e,r,t){var n=r[t];void 0!==n&&this.setValue(e,t,n)},B.upload=function(e,r,t,n){for(var i=0,a=r.length;i!==a;++i){var o=r[i],s=t[o.id];s.needsUpdate!==!1&&o.setValue(e,s.value,n)}},B.seqWithValue=function(e,r){for(var t=[],n=0,i=e.length;n!==i;++n){var a=e[n];a.id in r&&t.push(a)}return t},B.splitDynamic=function(e,r){for(var t=null,n=e.length,i=0,a=0;a!==n;++a){var o=e[a],s=r[o.id];s&&s.dynamic===!0?(null===t&&(t=[]),t.push(o)):(a>i&&(e[i]=o),++i)}return n>i&&(e.length=i),t},B.evalDynamic=function(e,r,t,n){for(var i=0,a=e.length;i!==a;++i){var o=r[e[i].id],s=o.onUpdateCallback;void 0!==s&&s.call(o,t,n)}},B}(),THREE.LensFlarePlugin=function(e,r){function t(){var e=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),r=new Uint16Array([0,1,2,0,2,3]);i=u.createBuffer(),a=u.createBuffer(),u.bindBuffer(u.ARRAY_BUFFER,i),u.bufferData(u.ARRAY_BUFFER,e,u.STATIC_DRAW),u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,a),u.bufferData(u.ELEMENT_ARRAY_BUFFER,r,u.STATIC_DRAW),h=u.createTexture(),d=u.createTexture(),p.bindTexture(u.TEXTURE_2D,h),u.texImage2D(u.TEXTURE_2D,0,u.RGB,16,16,0,u.RGB,u.UNSIGNED_BYTE,null),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_S,u.CLAMP_TO_EDGE),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_T,u.CLAMP_TO_EDGE),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MAG_FILTER,u.NEAREST),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MIN_FILTER,u.NEAREST),p.bindTexture(u.TEXTURE_2D,d),u.texImage2D(u.TEXTURE_2D,0,u.RGBA,16,16,0,u.RGBA,u.UNSIGNED_BYTE,null),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_S,u.CLAMP_TO_EDGE),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_T,u.CLAMP_TO_EDGE),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MAG_FILTER,u.NEAREST),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MIN_FILTER,u.NEAREST),o={vertexShader:["uniform lowp int renderType;","uniform vec3 screenPosition;","uniform vec2 scale;","uniform float rotation;","uniform sampler2D occlusionMap;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","varying float vVisibility;","void main() {","vUV = uv;","vec2 pos = position;","if ( renderType == 2 ) {","vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );","vVisibility =        visibility.r / 9.0;","vVisibility *= 1.0 - visibility.g / 9.0;","vVisibility *=       visibility.b / 9.0;","vVisibility *= 1.0 - visibility.a / 9.0;","pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;","pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;","}","gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["uniform lowp int renderType;","uniform sampler2D map;","uniform float opacity;","uniform vec3 color;","varying vec2 vUV;","varying float vVisibility;","void main() {","if ( renderType == 0 ) {","gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );","} else if ( renderType == 1 ) {","gl_FragColor = texture2D( map, vUV );","} else {","vec4 texture = texture2D( map, vUV );","texture.a *= opacity * vVisibility;","gl_FragColor = texture;","gl_FragColor.rgb *= color;","}","}"].join("\n")},s=n(o),c={vertex:u.getAttribLocation(s,"position"),uv:u.getAttribLocation(s,"uv")},l={renderType:u.getUniformLocation(s,"renderType"),map:u.getUniformLocation(s,"map"),occlusionMap:u.getUniformLocation(s,"occlusionMap"),opacity:u.getUniformLocation(s,"opacity"),color:u.getUniformLocation(s,"color"),scale:u.getUniformLocation(s,"scale"),rotation:u.getUniformLocation(s,"rotation"),screenPosition:u.getUniformLocation(s,"screenPosition")}}function n(r){var t=u.createProgram(),n=u.createShader(u.FRAGMENT_SHADER),i=u.createShader(u.VERTEX_SHADER),a="precision "+e.getPrecision()+" float;\n";return u.shaderSource(n,a+r.fragmentShader),u.shaderSource(i,a+r.vertexShader),u.compileShader(n),u.compileShader(i),u.attachShader(t,n),u.attachShader(t,i),u.linkProgram(t),t}var i,a,o,s,c,l,h,d,u=e.context,p=e.state;this.render=function(n,o,f){if(0!==r.length){var m=new THREE.Vector3,E=f.w/f.z,g=.5*f.z,v=.5*f.w,T=16/f.w,_=new THREE.Vector2(T*E,T),y=new THREE.Vector3(1,1,0),x=new THREE.Vector2(1,1),R=new THREE.Box2;R.min.set(0,0),R.max.set(f.z-16,f.w-16),void 0===s&&t(),u.useProgram(s),p.initAttributes(),p.enableAttribute(c.vertex),p.enableAttribute(c.uv),p.disableUnusedAttributes(),u.uniform1i(l.occlusionMap,0),u.uniform1i(l.map,1),u.bindBuffer(u.ARRAY_BUFFER,i),u.vertexAttribPointer(c.vertex,2,u.FLOAT,!1,16,0),u.vertexAttribPointer(c.uv,2,u.FLOAT,!1,16,8),u.bindBuffer(u.ELEMENT_ARRAY_BUFFER,a),p.disable(u.CULL_FACE),p.setDepthWrite(!1);for(var b=0,H=r.length;H>b;b++){T=16/f.w,_.set(T*E,T);var M=r[b];if(m.set(M.matrixWorld.elements[12],M.matrixWorld.elements[13],M.matrixWorld.elements[14]),m.applyMatrix4(o.matrixWorldInverse),m.applyProjection(o.projectionMatrix),y.copy(m),x.x=f.x+y.x*g+g-8,x.y=f.y+y.y*v+v-8,R.containsPoint(x)===!0){p.activeTexture(u.TEXTURE0),p.bindTexture(u.TEXTURE_2D,null),p.activeTexture(u.TEXTURE1),p.bindTexture(u.TEXTURE_2D,h),u.copyTexImage2D(u.TEXTURE_2D,0,u.RGB,x.x,x.y,16,16,0),u.uniform1i(l.renderType,0),u.uniform2f(l.scale,_.x,_.y),u.uniform3f(l.screenPosition,y.x,y.y,y.z),p.disable(u.BLEND),p.enable(u.DEPTH_TEST),u.drawElements(u.TRIANGLES,6,u.UNSIGNED_SHORT,0),p.activeTexture(u.TEXTURE0),p.bindTexture(u.TEXTURE_2D,d),u.copyTexImage2D(u.TEXTURE_2D,0,u.RGBA,x.x,x.y,16,16,0),u.uniform1i(l.renderType,1),p.disable(u.DEPTH_TEST),p.activeTexture(u.TEXTURE1),p.bindTexture(u.TEXTURE_2D,h),u.drawElements(u.TRIANGLES,6,u.UNSIGNED_SHORT,0),M.positionScreen.copy(y),M.customUpdateCallback?M.customUpdateCallback(M):M.updateLensFlares(),u.uniform1i(l.renderType,2),p.enable(u.BLEND);for(var S=0,w=M.lensFlares.length;w>S;S++){var L=M.lensFlares[S];L.opacity>.001&&L.scale>.001&&(y.x=L.x,y.y=L.y,y.z=L.z,T=L.size*L.scale/f.w,_.x=T*E,_.y=T,u.uniform3f(l.screenPosition,y.x,y.y,y.z),u.uniform2f(l.scale,_.x,_.y),u.uniform1f(l.rotation,L.rotation),u.uniform1f(l.opacity,L.opacity),u.uniform3f(l.color,L.color.r,L.color.g,L.color.b),p.setBlending(L.blending,L.blendEquation,L.blendSrc,L.blendDst),e.setTexture2D(L.texture,1),u.drawElements(u.TRIANGLES,6,u.UNSIGNED_SHORT,0))}}}p.enable(u.CULL_FACE),p.enable(u.DEPTH_TEST),p.setDepthWrite(!0),e.resetGLState()}}},THREE.SpritePlugin=function(e,r){function t(){var e=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),r=new Uint16Array([0,1,2,0,2,3]);a=d.createBuffer(),o=d.createBuffer(),d.bindBuffer(d.ARRAY_BUFFER,a),d.bufferData(d.ARRAY_BUFFER,e,d.STATIC_DRAW),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,o),d.bufferData(d.ELEMENT_ARRAY_BUFFER,r,d.STATIC_DRAW),s=n(),c={position:d.getAttribLocation(s,"position"),uv:d.getAttribLocation(s,"uv")},l={uvOffset:d.getUniformLocation(s,"uvOffset"),uvScale:d.getUniformLocation(s,"uvScale"),rotation:d.getUniformLocation(s,"rotation"),scale:d.getUniformLocation(s,"scale"),color:d.getUniformLocation(s,"color"),map:d.getUniformLocation(s,"map"),opacity:d.getUniformLocation(s,"opacity"),modelViewMatrix:d.getUniformLocation(s,"modelViewMatrix"),projectionMatrix:d.getUniformLocation(s,"projectionMatrix"),fogType:d.getUniformLocation(s,"fogType"),fogDensity:d.getUniformLocation(s,"fogDensity"),fogNear:d.getUniformLocation(s,"fogNear"),fogFar:d.getUniformLocation(s,"fogFar"),fogColor:d.getUniformLocation(s,"fogColor"),alphaTest:d.getUniformLocation(s,"alphaTest")};var t=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");t.width=8,t.height=8;var i=t.getContext("2d");i.fillStyle="white",i.fillRect(0,0,8,8),h=new THREE.Texture(t),h.needsUpdate=!0}function n(){var r=d.createProgram(),t=d.createShader(d.VERTEX_SHADER),n=d.createShader(d.FRAGMENT_SHADER);return d.shaderSource(t,["precision "+e.getPrecision()+" float;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform float rotation;","uniform vec2 scale;","uniform vec2 uvOffset;","uniform vec2 uvScale;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","vUV = uvOffset + uv * uvScale;","vec2 alignedPosition = position * scale;","vec2 rotatedPosition;","rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;","rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;","vec4 finalPosition;","finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );","finalPosition.xy += rotatedPosition;","finalPosition = projectionMatrix * finalPosition;","gl_Position = finalPosition;","}"].join("\n")),d.shaderSource(n,["precision "+e.getPrecision()+" float;","uniform vec3 color;","uniform sampler2D map;","uniform float opacity;","uniform int fogType;","uniform vec3 fogColor;","uniform float fogDensity;","uniform float fogNear;","uniform float fogFar;","uniform float alphaTest;","varying vec2 vUV;","void main() {","vec4 texture = texture2D( map, vUV );","if ( texture.a < alphaTest ) discard;","gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );","if ( fogType > 0 ) {","float depth = gl_FragCoord.z / gl_FragCoord.w;","float fogFactor = 0.0;","if ( fogType == 1 ) {","fogFactor = smoothstep( fogNear, fogFar, depth );","} else {","const float LOG2 = 1.442695;","fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );","fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );","}","gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );","}","}"].join("\n")),d.compileShader(t),d.compileShader(n),d.attachShader(r,t),d.attachShader(r,n),d.linkProgram(r),r}function i(e,r){return e.renderOrder!==r.renderOrder?e.renderOrder-r.renderOrder:e.z!==r.z?r.z-e.z:r.id-e.id}var a,o,s,c,l,h,d=e.context,u=e.state,p=new THREE.Vector3,f=new THREE.Quaternion,m=new THREE.Vector3;this.render=function(n,E){if(0!==r.length){void 0===s&&t(),d.useProgram(s),u.initAttributes(),u.enableAttribute(c.position),u.enableAttribute(c.uv),u.disableUnusedAttributes(),u.disable(d.CULL_FACE),u.enable(d.BLEND),d.bindBuffer(d.ARRAY_BUFFER,a),d.vertexAttribPointer(c.position,2,d.FLOAT,!1,16,0),d.vertexAttribPointer(c.uv,2,d.FLOAT,!1,16,8),d.bindBuffer(d.ELEMENT_ARRAY_BUFFER,o),d.uniformMatrix4fv(l.projectionMatrix,!1,E.projectionMatrix.elements),u.activeTexture(d.TEXTURE0),d.uniform1i(l.map,0);var g=0,v=0,T=n.fog;T?(d.uniform3f(l.fogColor,T.color.r,T.color.g,T.color.b),T instanceof THREE.Fog?(d.uniform1f(l.fogNear,T.near),d.uniform1f(l.fogFar,T.far),d.uniform1i(l.fogType,1),g=1,v=1):T instanceof THREE.FogExp2&&(d.uniform1f(l.fogDensity,T.density),d.uniform1i(l.fogType,2),g=2,v=2)):(d.uniform1i(l.fogType,0),g=0,v=0);for(var _=0,y=r.length;y>_;_++){var x=r[_];x.modelViewMatrix.multiplyMatrices(E.matrixWorldInverse,x.matrixWorld),x.z=-x.modelViewMatrix.elements[14]}r.sort(i);for(var R=[],_=0,y=r.length;y>_;_++){var x=r[_],b=x.material;d.uniform1f(l.alphaTest,b.alphaTest),d.uniformMatrix4fv(l.modelViewMatrix,!1,x.modelViewMatrix.elements),x.matrixWorld.decompose(p,f,m),R[0]=m.x,R[1]=m.y;var H=0;n.fog&&b.fog&&(H=v),g!==H&&(d.uniform1i(l.fogType,H),g=H),null!==b.map?(d.uniform2f(l.uvOffset,b.map.offset.x,b.map.offset.y),d.uniform2f(l.uvScale,b.map.repeat.x,b.map.repeat.y)):(d.uniform2f(l.uvOffset,0,0),d.uniform2f(l.uvScale,1,1)),d.uniform1f(l.opacity,b.opacity),d.uniform3f(l.color,b.color.r,b.color.g,b.color.b),d.uniform1f(l.rotation,b.rotation),d.uniform2fv(l.scale,R),u.setBlending(b.blending,b.blendEquation,b.blendSrc,b.blendDst),u.setDepthTest(b.depthTest),u.setDepthWrite(b.depthWrite),b.map?e.setTexture2D(b.map,0):e.setTexture2D(h,0),d.drawElements(d.TRIANGLES,6,d.UNSIGNED_SHORT,0)}u.enable(d.CULL_FACE),e.resetGLState()}}},Object.assign(THREE,{Face4:function(e,r,t,n,i,a,o){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new THREE.Face3(e,r,t,i,a,o)},LineStrip:0,LinePieces:1,MeshFaceMaterial:THREE.MultiMaterial,PointCloud:function(e,r){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new THREE.Points(e,r)},Particle:THREE.Sprite,ParticleSystem:function(e,r){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new THREE.Points(e,r)},PointCloudMaterial:function(e){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new THREE.PointsMaterial(e)},ParticleBasicMaterial:function(e){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new THREE.PointsMaterial(e)},ParticleSystemMaterial:function(e){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new THREE.PointsMaterial(e)},Vertex:function(e,r,t){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new THREE.Vector3(e,r,t)}}),Object.assign(THREE.Box2.prototype,{empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)}}),Object.assign(THREE.Box3.prototype,{empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(e){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionSphere:function(e){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(THREE.Matrix3.prototype,{multiplyVector3:function(e){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),e.applyMatrix3(this)},multiplyVector3Array:function(e){return console.warn("THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(e)}}),Object.assign(THREE.Matrix4.prototype,{extractPosition:function(e){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(e)},setRotationFromQuaternion:function(e){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(e)},multiplyVector3:function(e){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead."),e.applyProjection(this)},multiplyVector4:function(e){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},multiplyVector3Array:function(e){return console.warn("THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead."),this.applyToVector3Array(e)},rotateAxis:function(e){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),e.transformDirection(this)},crossVector:function(e){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),e.applyMatrix4(this)},translate:function(e){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(e){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(e){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(e){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(e,r){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")}}),Object.assign(THREE.Plane.prototype,{isIntersectionLine:function(e){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(e)}}),Object.assign(THREE.Quaternion.prototype,{multiplyVector3:function(e){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),e.applyQuaternion(this)}}),Object.assign(THREE.Ray.prototype,{isIntersectionBox:function(e){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(e)},isIntersectionPlane:function(e){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(e)},isIntersectionSphere:function(e){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(e)}}),Object.assign(THREE.Vector3.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(e){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(e)},getScaleFromMatrix:function(e){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(e)},getColumnFromMatrix:function(e,r){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(r,e)}}),Object.assign(THREE.Object3D.prototype,{getChildByName:function(e){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(e)},renderDepth:function(e){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(e,r){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(r,e)}}),Object.defineProperties(THREE.Object3D.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(e){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=e}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(e){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(THREE.LOD.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),THREE.PerspectiveCamera.prototype.setLens=function(e,r){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==r&&(this.filmGauge=r),this.setFocalLength(e)},Object.defineProperties(THREE.Light.prototype,{onlyShadow:{set:function(e){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(e){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=e}},shadowCameraLeft:{set:function(e){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=e}},shadowCameraRight:{set:function(e){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=e}},shadowCameraTop:{set:function(e){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=e}},shadowCameraBottom:{set:function(e){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=e}},shadowCameraNear:{set:function(e){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=e}},shadowCameraFar:{set:function(e){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=e}},shadowCameraVisible:{set:function(e){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(e){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=e}},shadowDarkness:{set:function(e){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(e){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=e}},shadowMapHeight:{set:function(e){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=e}}}),Object.defineProperties(THREE.BufferAttribute.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Please use .count."),this.array.length}}}),Object.assign(THREE.BufferGeometry.prototype,{addIndex:function(e){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(e)},addDrawCall:function(e,r,t){void 0!==t&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(e,r)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(THREE.BufferGeometry.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(THREE.Material.prototype,{wrapAround:{get:function(){console.warn("THREE."+this.type+": .wrapAround has been removed.")},set:function(e){console.warn("THREE."+this.type+": .wrapAround has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE."+this.type+": .wrapRGB has been removed."),new THREE.Color}}}),Object.defineProperties(THREE.MeshPhongMaterial.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(e){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(THREE.ShaderMaterial.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(e){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=e}}}),THREE.EventDispatcher.prototype=Object.assign(Object.create({constructor:THREE.EventDispatcher,apply:function(e){console.warn("THREE.EventDispatcher: .apply is deprecated, just inherit or Object.assign the prototype to mix-in."),Object.assign(e,this)}}),THREE.EventDispatcher.prototype),Object.assign(THREE.WebGLRenderer.prototype,{supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(e){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(e)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}}),Object.defineProperties(THREE.WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=e}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=e}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(e){console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace."),this.shadowMap.cullFace=e}}}),Object.defineProperties(THREE.WebGLShadowMap.prototype,{cullFace:{get:function(){return this.renderReverseSided?THREE.CullFaceFront:THREE.CullFaceBack},set:function(e){var r=e!==THREE.CullFaceBack;
console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to "+r+"."),this.renderReverseSided=r}}}),Object.defineProperties(THREE.WebGLRenderTarget.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=e}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(e){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=e}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=e}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(e){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=e}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(e){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=e}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(e){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=e}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(e){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=e}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(e){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=e}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(e){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=e}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(e){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=e}}}),Object.assign(THREE.Audio.prototype,{load:function(e){console.warn("THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.");var r=this,t=new THREE.AudioLoader;return t.load(e,function(e){r.setBuffer(e)}),this}}),Object.assign(THREE.AudioAnalyser.prototype,{getData:function(e){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()}}),THREE.GeometryUtils={merge:function(e,r,t){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var n;r instanceof THREE.Mesh&&(r.matrixAutoUpdate&&r.updateMatrix(),n=r.matrix,r=r.geometry),e.merge(r,n,t)},center:function(e){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),e.center()}},THREE.ImageUtils={crossOrigin:void 0,loadTexture:function(e,r,t,n){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var i=new THREE.TextureLoader;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,t,void 0,n);return r&&(a.mapping=r),a},loadTextureCube:function(e,r,t,n){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var i=new THREE.CubeTextureLoader;i.setCrossOrigin(this.crossOrigin);var a=i.load(e,t,void 0,n);return r&&(a.mapping=r),a},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}},THREE.Projector=function(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(e,r){console.warn("THREE.Projector: .projectVector() is now vector.project()."),e.project(r)},this.unprojectVector=function(e,r){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),e.unproject(r)},this.pickingRay=function(e,r){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}},THREE.CanvasRenderer=function(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),this.domElement=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}},THREE.CurveUtils={tangentQuadraticBezier:function(e,r,t,n){return 2*(1-e)*(t-r)+2*e*(n-t)},tangentCubicBezier:function(e,r,t,n,i){return-3*r*(1-e)*(1-e)+3*t*(1-e)*(1-e)-6*e*t*(1-e)+6*e*n*(1-e)-3*e*e*n+3*e*e*i},tangentSpline:function(e,r,t,n,i){var a=6*e*e-6*e,o=3*e*e-4*e+1,s=-6*e*e+6*e,c=3*e*e-2*e;return a+o+s+c},interpolate:function(e,r,t,n,i){var a=.5*(t-e),o=.5*(n-r),s=i*i,c=i*s;return(2*r-2*t+a+o)*c+(-3*r+3*t-2*a-o)*s+a*i+r}},THREE.SceneUtils={createMultiMaterialObject:function(e,r){for(var t=new THREE.Group,n=0,i=r.length;i>n;n++)t.add(new THREE.Mesh(e,r[n]));return t},detach:function(e,r,t){e.applyMatrix(r.matrixWorld),r.remove(e),t.add(e)},attach:function(e,r,t){var n=new THREE.Matrix4;n.getInverse(t.matrixWorld),e.applyMatrix(n),r.remove(e),t.add(e)}},THREE.ShapeUtils={area:function(e){for(var r=e.length,t=0,n=r-1,i=0;r>i;n=i++)t+=e[n].x*e[i].y-e[i].x*e[n].y;return.5*t},triangulate:function(){function e(e,r,t,n,i,a){var o,s,c,l,h,d,u,p,f;if(s=e[a[r]].x,c=e[a[r]].y,l=e[a[t]].x,h=e[a[t]].y,d=e[a[n]].x,u=e[a[n]].y,Number.EPSILON>(l-s)*(u-c)-(h-c)*(d-s))return!1;var m,E,g,v,T,_,y,x,R,b,H,M,S,w,L;for(m=d-l,E=u-h,g=s-d,v=c-u,T=l-s,_=h-c,o=0;i>o;o++)if(p=e[a[o]].x,f=e[a[o]].y,!(p===s&&f===c||p===l&&f===h||p===d&&f===u)&&(y=p-s,x=f-c,R=p-l,b=f-h,H=p-d,M=f-u,L=m*b-E*R,S=T*x-_*y,w=g*M-v*H,L>=-Number.EPSILON&&w>=-Number.EPSILON&&S>=-Number.EPSILON))return!1;return!0}return function(r,t){var n=r.length;if(3>n)return null;var i,a,o,s=[],c=[],l=[];if(THREE.ShapeUtils.area(r)>0)for(a=0;n>a;a++)c[a]=a;else for(a=0;n>a;a++)c[a]=n-1-a;var h=n,d=2*h;for(a=h-1;h>2;){if(d--<=0)return console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()"),t?l:s;if(i=a,i>=h&&(i=0),a=i+1,a>=h&&(a=0),o=a+1,o>=h&&(o=0),e(r,i,a,o,h,c)){var u,p,f,m,E;for(u=c[i],p=c[a],f=c[o],s.push([r[u],r[p],r[f]]),l.push([c[i],c[a],c[o]]),m=a,E=a+1;h>E;m++,E++)c[m]=c[E];h--,d=2*h}}return t?l:s}}(),triangulateShape:function(e,r){function t(e,r,t){return e.x!==r.x?e.x<r.x?e.x<=t.x&&t.x<=r.x:r.x<=t.x&&t.x<=e.x:e.y<r.y?e.y<=t.y&&t.y<=r.y:r.y<=t.y&&t.y<=e.y}function n(e,r,n,i,a){var o=r.x-e.x,s=r.y-e.y,c=i.x-n.x,l=i.y-n.y,h=e.x-n.x,d=e.y-n.y,u=s*c-o*l,p=s*h-o*d;if(Math.abs(u)>Number.EPSILON){var f;if(u>0){if(0>p||p>u)return[];if(f=l*h-c*d,0>f||f>u)return[]}else{if(p>0||u>p)return[];if(f=l*h-c*d,f>0||u>f)return[]}if(0===f)return!a||0!==p&&p!==u?[e]:[];if(f===u)return!a||0!==p&&p!==u?[r]:[];if(0===p)return[n];if(p===u)return[i];var m=f/u;return[{x:e.x+m*o,y:e.y+m*s}]}if(0!==p||l*h!==c*d)return[];var E=0===o&&0===s,g=0===c&&0===l;if(E&&g)return e.x!==n.x||e.y!==n.y?[]:[e];if(E)return t(n,i,e)?[e]:[];if(g)return t(e,r,n)?[n]:[];var v,T,_,y,x,R,b,H;return 0!==o?(e.x<r.x?(v=e,_=e.x,T=r,y=r.x):(v=r,_=r.x,T=e,y=e.x),n.x<i.x?(x=n,b=n.x,R=i,H=i.x):(x=i,b=i.x,R=n,H=n.x)):(e.y<r.y?(v=e,_=e.y,T=r,y=r.y):(v=r,_=r.y,T=e,y=e.y),n.y<i.y?(x=n,b=n.y,R=i,H=i.y):(x=i,b=i.y,R=n,H=n.y)),b>=_?b>y?[]:y===b?a?[]:[x]:H>=y?[x,T]:[x,R]:_>H?[]:_===H?a?[]:[v]:H>=y?[v,T]:[v,R]}function i(e,r,t,n){var i=r.x-e.x,a=r.y-e.y,o=t.x-e.x,s=t.y-e.y,c=n.x-e.x,l=n.y-e.y,h=i*s-a*o,d=i*l-a*c;if(Math.abs(h)>Number.EPSILON){var u=c*s-l*o;return h>0?d>=0&&u>=0:d>=0||u>=0}return d>0}function a(e,r){function t(e,r){var t=v.length-1,n=e-1;0>n&&(n=t);var a=e+1;a>t&&(a=0);var o=i(v[e],v[n],v[a],s[r]);if(!o)return!1;var c=s.length-1,l=r-1;0>l&&(l=c);var h=r+1;return h>c&&(h=0),o=i(s[r],s[l],s[h],v[e]),!!o}function a(e,r){var t,i,a;for(t=0;t<v.length;t++)if(i=t+1,i%=v.length,a=n(e,r,v[t],v[i],!0),a.length>0)return!0;return!1}function o(e,t){var i,a,o,s,c;for(i=0;i<T.length;i++)for(a=r[T[i]],o=0;o<a.length;o++)if(s=o+1,s%=a.length,c=n(e,t,a[o],a[s],!0),c.length>0)return!0;return!1}for(var s,c,l,h,d,u,p,f,m,E,g,v=e.concat(),T=[],_=[],y=0,x=r.length;x>y;y++)T.push(y);for(var R=0,b=2*T.length;T.length>0;){if(b--,0>b){console.log("Infinite Loop! Holes left:"+T.length+", Probably Hole outside Shape!");break}for(l=R;l<v.length;l++){h=v[l],c=-1;for(var y=0;y<T.length;y++)if(u=T[y],p=h.x+":"+h.y+":"+u,void 0===_[p]){s=r[u];for(var H=0;H<s.length;H++)if(d=s[H],t(l,H)&&!a(h,d)&&!o(h,d)){c=H,T.splice(y,1),f=v.slice(0,l+1),m=v.slice(l),E=s.slice(c),g=s.slice(0,c+1),v=f.concat(E).concat(g).concat(m),R=l;break}if(c>=0)break;_[p]=!0}if(c>=0)break}}return v}for(var o,s,c,l,h,d,u={},p=e.concat(),f=0,m=r.length;m>f;f++)Array.prototype.push.apply(p,r[f]);for(o=0,s=p.length;s>o;o++)h=p[o].x+":"+p[o].y,void 0!==u[h]&&console.warn("THREE.Shape: Duplicate point",h),u[h]=o;var E=a(e,r),g=THREE.ShapeUtils.triangulate(E,!1);for(o=0,s=g.length;s>o;o++)for(l=g[o],c=0;3>c;c++)h=l[c].x+":"+l[c].y,d=u[h],void 0!==d&&(l[c]=d);return g.concat()},isClockWise:function(e){return THREE.ShapeUtils.area(e)<0},b2:function(){function e(e,r){var t=1-e;return t*t*r}function r(e,r){return 2*(1-e)*e*r}function t(e,r){return e*e*r}return function(n,i,a,o){return e(n,i)+r(n,a)+t(n,o)}}(),b3:function(){function e(e,r){var t=1-e;return t*t*t*r}function r(e,r){var t=1-e;return 3*t*t*e*r}function t(e,r){var t=1-e;return 3*t*e*e*r}function n(e,r){return e*e*e*r}return function(i,a,o,s,c){return e(i,a)+r(i,o)+t(i,s)+n(i,c)}}()},THREE.Curve=function(){},THREE.Curve.prototype={constructor:THREE.Curve,getPoint:function(e){return console.warn("THREE.Curve: Warning, getPoint() not implemented!"),null},getPointAt:function(e){var r=this.getUtoTmapping(e);return this.getPoint(r)},getPoints:function(e){e||(e=5);var r,t=[];for(r=0;e>=r;r++)t.push(this.getPoint(r/e));return t},getSpacedPoints:function(e){e||(e=5);var r,t=[];for(r=0;e>=r;r++)t.push(this.getPointAt(r/e));return t},getLength:function(){var e=this.getLengths();return e[e.length-1]},getLengths:function(e){if(e||(e=this.__arcLengthDivisions?this.__arcLengthDivisions:200),this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var r,t,n=[],i=this.getPoint(0),a=0;for(n.push(0),t=1;e>=t;t++)r=this.getPoint(t/e),a+=r.distanceTo(i),n.push(a),i=r;return this.cacheArcLengths=n,n},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(e,r){var t,n=this.getLengths(),i=0,a=n.length;t=r?r:e*n[a-1];for(var o,s=0,c=a-1;c>=s;)if(i=Math.floor(s+(c-s)/2),o=n[i]-t,0>o)s=i+1;else{if(!(o>0)){c=i;break}c=i-1}if(i=c,n[i]===t){var l=i/(a-1);return l}var h=n[i],d=n[i+1],u=d-h,p=(t-h)/u,l=(i+p)/(a-1);return l},getTangent:function(e){var r=1e-4,t=e-r,n=e+r;0>t&&(t=0),n>1&&(n=1);var i=this.getPoint(t),a=this.getPoint(n),o=a.clone().sub(i);return o.normalize()},getTangentAt:function(e){var r=this.getUtoTmapping(e);return this.getTangent(r)}},THREE.Curve.create=function(e,r){return e.prototype=Object.create(THREE.Curve.prototype),e.prototype.constructor=e,e.prototype.getPoint=r,e},THREE.CurvePath=function(){this.curves=[],this.autoClose=!1},THREE.CurvePath.prototype=Object.assign(Object.create(THREE.Curve.prototype),{constructor:THREE.CurvePath,add:function(e){this.curves.push(e)},closePath:function(){var e=this.curves[0].getPoint(0),r=this.curves[this.curves.length-1].getPoint(1);e.equals(r)||this.curves.push(new THREE.LineCurve(r,e))},getPoint:function(e){for(var r=e*this.getLength(),t=this.getCurveLengths(),n=0;n<t.length;){if(t[n]>=r){var i=t[n]-r,a=this.curves[n],o=1-i/a.getLength();return a.getPointAt(o)}n++}return null},getLength:function(){var e=this.getCurveLengths();return e[e.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var e=[],r=0,t=0,n=this.curves.length;n>t;t++)r+=this.curves[t].getLength(),e.push(r);return this.cacheLengths=e,e},createPointsGeometry:function(e){var r=this.getPoints(e);return this.createGeometry(r)},createSpacedPointsGeometry:function(e){var r=this.getSpacedPoints(e);return this.createGeometry(r)},createGeometry:function(e){for(var r=new THREE.Geometry,t=0,n=e.length;n>t;t++){var i=e[t];r.vertices.push(new THREE.Vector3(i.x,i.y,i.z||0))}return r}}),THREE.Font=function(e){this.data=e},Object.assign(THREE.Font.prototype,{generateShapes:function(e,r,t){function n(e){for(var t=String(e).split(""),n=r/a.resolution,o=0,s=[],c=0;c<t.length;c++){var l=i(t[c],n,o);o+=l.offset,s.push(l.path)}return s}function i(e,r,n){var i=a.glyphs[e]||a.glyphs["?"];if(i){var o,s,c,l,h,d,u,p,f,m,E,g=new THREE.Path,v=[],T=THREE.ShapeUtils.b2,_=THREE.ShapeUtils.b3;if(i.o)for(var y=i._cachedOutline||(i._cachedOutline=i.o.split(" ")),x=0,R=y.length;R>x;){var b=y[x++];switch(b){case"m":o=y[x++]*r+n,s=y[x++]*r,g.moveTo(o,s);break;case"l":o=y[x++]*r+n,s=y[x++]*r,g.lineTo(o,s);break;case"q":if(c=y[x++]*r+n,l=y[x++]*r,u=y[x++]*r+n,p=y[x++]*r,g.quadraticCurveTo(u,p,c,l),E=v[v.length-1]){h=E.x,d=E.y;for(var H=1;t>=H;H++){var M=H/t;T(M,h,u,c),T(M,d,p,l)}}break;case"b":if(c=y[x++]*r+n,l=y[x++]*r,u=y[x++]*r+n,p=y[x++]*r,f=y[x++]*r+n,m=y[x++]*r,g.bezierCurveTo(u,p,f,m,c,l),E=v[v.length-1]){h=E.x,d=E.y;for(var H=1;t>=H;H++){var M=H/t;_(M,h,u,f,c),_(M,d,p,m,l)}}}}return{offset:i.ha*r,path:g}}}void 0===r&&(r=100),void 0===t&&(t=4);for(var a=this.data,o=n(e),s=[],c=0,l=o.length;l>c;c++)Array.prototype.push.apply(s,o[c].toShapes());return s}}),THREE.Path=function(e){THREE.CurvePath.call(this),this.actions=[],e&&this.fromPoints(e)},THREE.Path.prototype=Object.assign(Object.create(THREE.CurvePath.prototype),{constructor:THREE.Path,fromPoints:function(e){this.moveTo(e[0].x,e[0].y);for(var r=1,t=e.length;t>r;r++)this.lineTo(e[r].x,e[r].y)},moveTo:function(e,r){this.actions.push({action:"moveTo",args:[e,r]})},lineTo:function(e,r){var t=this.actions[this.actions.length-1].args,n=t[t.length-2],i=t[t.length-1],a=new THREE.LineCurve(new THREE.Vector2(n,i),new THREE.Vector2(e,r));this.curves.push(a),this.actions.push({action:"lineTo",args:[e,r]})},quadraticCurveTo:function(e,r,t,n){var i=this.actions[this.actions.length-1].args,a=i[i.length-2],o=i[i.length-1],s=new THREE.QuadraticBezierCurve(new THREE.Vector2(a,o),new THREE.Vector2(e,r),new THREE.Vector2(t,n));this.curves.push(s),this.actions.push({action:"quadraticCurveTo",args:[e,r,t,n]})},bezierCurveTo:function(e,r,t,n,i,a){var o=this.actions[this.actions.length-1].args,s=o[o.length-2],c=o[o.length-1],l=new THREE.CubicBezierCurve(new THREE.Vector2(s,c),new THREE.Vector2(e,r),new THREE.Vector2(t,n),new THREE.Vector2(i,a));this.curves.push(l),this.actions.push({action:"bezierCurveTo",args:[e,r,t,n,i,a]})},splineThru:function(e){var r=Array.prototype.slice.call(arguments),t=this.actions[this.actions.length-1].args,n=t[t.length-2],i=t[t.length-1],a=[new THREE.Vector2(n,i)];Array.prototype.push.apply(a,e);var o=new THREE.SplineCurve(a);this.curves.push(o);var s=e[e.length-1];r.push(s.x),r.push(s.y),this.actions.push({action:"splineThru",args:r})},arc:function(e,r,t,n,i,a){var o=this.actions[this.actions.length-1].args,s=o[o.length-2],c=o[o.length-1];this.absarc(e+s,r+c,t,n,i,a)},absarc:function(e,r,t,n,i,a){this.absellipse(e,r,t,t,n,i,a)},ellipse:function(e,r,t,n,i,a,o,s){var c=this.actions[this.actions.length-1].args,l=c[c.length-2],h=c[c.length-1];this.absellipse(e+l,r+h,t,n,i,a,o,s)},absellipse:function(e,r,t,n,i,a,o,s){var c=[e,r,t,n,i,a,o,s||0],l=new THREE.EllipseCurve(e,r,t,n,i,a,o,s);this.curves.push(l);var h=l.getPoint(1);c.push(h.x),c.push(h.y),this.actions.push({action:"ellipse",args:c})},getSpacedPoints:function(e){e||(e=40);for(var r=[],t=0;e>t;t++)r.push(this.getPoint(t/e));return this.autoClose&&r.push(r[0]),r},getPoints:function(e){e=e||12;for(var r,t,n,i,a,o,s,c,l,h,d,u=THREE.ShapeUtils.b2,p=THREE.ShapeUtils.b3,f=[],m=0,E=this.actions.length;E>m;m++){var g=this.actions[m],v=g.action,T=g.args;switch(v){case"moveTo":f.push(new THREE.Vector2(T[0],T[1]));break;case"lineTo":f.push(new THREE.Vector2(T[0],T[1]));break;case"quadraticCurveTo":r=T[2],t=T[3],a=T[0],o=T[1],f.length>0?(l=f[f.length-1],s=l.x,c=l.y):(l=this.actions[m-1].args,s=l[l.length-2],c=l[l.length-1]);for(var _=1;e>=_;_++){var y=_/e;h=u(y,s,a,r),d=u(y,c,o,t),f.push(new THREE.Vector2(h,d))}break;case"bezierCurveTo":r=T[4],t=T[5],a=T[0],o=T[1],n=T[2],i=T[3],f.length>0?(l=f[f.length-1],s=l.x,c=l.y):(l=this.actions[m-1].args,s=l[l.length-2],c=l[l.length-1]);for(var _=1;e>=_;_++){var y=_/e;h=p(y,s,a,n,r),d=p(y,c,o,i,t),f.push(new THREE.Vector2(h,d))}break;case"splineThru":l=this.actions[m-1].args;var x=new THREE.Vector2(l[l.length-2],l[l.length-1]),R=[x],b=e*T[0].length;R=R.concat(T[0]);for(var H=new THREE.SplineCurve(R),_=1;b>=_;_++)f.push(H.getPointAt(_/b));break;case"arc":for(var M,S=T[0],w=T[1],L=T[2],C=T[3],P=T[4],A=!!T[5],D=P-C,I=2*e,_=1;I>=_;_++){var y=_/I;A||(y=1-y),M=C+y*D,h=S+L*Math.cos(M),d=w+L*Math.sin(M),f.push(new THREE.Vector2(h,d))}break;case"ellipse":var M,U,N,S=T[0],w=T[1],O=T[2],B=T[3],C=T[4],P=T[5],A=!!T[6],F=T[7],D=P-C,I=2*e;0!==F&&(U=Math.cos(F),N=Math.sin(F));for(var _=1;I>=_;_++){var y=_/I;if(A||(y=1-y),M=C+y*D,h=S+O*Math.cos(M),d=w+B*Math.sin(M),0!==F){var G=h,V=d;h=(G-S)*U-(V-w)*N+S,d=(G-S)*N+(V-w)*U+w}f.push(new THREE.Vector2(h,d))}}}var z=f[f.length-1];return Math.abs(z.x-f[0].x)<Number.EPSILON&&Math.abs(z.y-f[0].y)<Number.EPSILON&&f.splice(f.length-1,1),this.autoClose&&f.push(f[0]),f},toShapes:function(e,r){function t(e){for(var r=[],t=new THREE.Path,n=0,i=e.length;i>n;n++){var a=e[n],o=a.args,s=a.action;"moveTo"===s&&0!==t.actions.length&&(r.push(t),t=new THREE.Path),t[s].apply(t,o)}return 0!==t.actions.length&&r.push(t),r}function n(e){for(var r=[],t=0,n=e.length;n>t;t++){var i=e[t],a=new THREE.Shape;a.actions=i.actions,a.curves=i.curves,r.push(a)}return r}function i(e,r){for(var t=r.length,n=!1,i=t-1,a=0;t>a;i=a++){var o=r[i],s=r[a],c=s.x-o.x,l=s.y-o.y;if(Math.abs(l)>Number.EPSILON){if(0>l&&(o=r[a],c=-c,s=r[i],l=-l),e.y<o.y||e.y>s.y)continue;if(e.y===o.y){if(e.x===o.x)return!0}else{var h=l*(e.x-o.x)-c*(e.y-o.y);if(0===h)return!0;if(0>h)continue;n=!n}}else{if(e.y!==o.y)continue;if(s.x<=e.x&&e.x<=o.x||o.x<=e.x&&e.x<=s.x)return!0}}return n}var a=THREE.ShapeUtils.isClockWise,o=t(this.actions);if(0===o.length)return[];if(r===!0)return n(o);var s,c,l,h=[];if(1===o.length)return c=o[0],l=new THREE.Shape,l.actions=c.actions,l.curves=c.curves,h.push(l),h;var d=!a(o[0].getPoints());d=e?!d:d;var u,p=[],f=[],m=[],E=0;f[E]=void 0,m[E]=[];for(var g=0,v=o.length;v>g;g++)c=o[g],u=c.getPoints(),s=a(u),s=e?!s:s,s?(!d&&f[E]&&E++,f[E]={s:new THREE.Shape,p:u},f[E].s.actions=c.actions,f[E].s.curves=c.curves,d&&E++,m[E]=[]):m[E].push({h:c,p:u[0]});if(!f[0])return n(o);if(f.length>1){for(var T=!1,_=[],y=0,x=f.length;x>y;y++)p[y]=[];for(var y=0,x=f.length;x>y;y++)for(var R=m[y],b=0;b<R.length;b++){for(var H=R[b],M=!0,S=0;S<f.length;S++)i(H.p,f[S].p)&&(y!==S&&_.push({froms:y,tos:S,hole:b}),M?(M=!1,p[S].push(H)):T=!0);M&&p[y].push(H)}_.length>0&&(T||(m=p))}for(var w,g=0,L=f.length;L>g;g++){l=f[g].s,h.push(l),w=m[g];for(var C=0,P=w.length;P>C;C++)l.holes.push(w[C].h)}return h}}),THREE.Shape=function(){THREE.Path.apply(this,arguments),this.holes=[]},THREE.Shape.prototype=Object.assign(Object.create(THREE.Path.prototype),{constructor:THREE.Shape,extrude:function(e){return new THREE.ExtrudeGeometry(this,e)},makeGeometry:function(e){return new THREE.ShapeGeometry(this,e)},getPointsHoles:function(e){for(var r=[],t=0,n=this.holes.length;n>t;t++)r[t]=this.holes[t].getPoints(e);return r},extractAllPoints:function(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}},extractPoints:function(e){return this.extractAllPoints(e)}}),THREE.LineCurve=function(e,r){this.v1=e,this.v2=r},THREE.LineCurve.prototype=Object.create(THREE.Curve.prototype),THREE.LineCurve.prototype.constructor=THREE.LineCurve,THREE.LineCurve.prototype.getPoint=function(e){var r=this.v2.clone().sub(this.v1);return r.multiplyScalar(e).add(this.v1),r},THREE.LineCurve.prototype.getPointAt=function(e){return this.getPoint(e)},THREE.LineCurve.prototype.getTangent=function(e){var r=this.v2.clone().sub(this.v1);return r.normalize()},THREE.QuadraticBezierCurve=function(e,r,t){this.v0=e,this.v1=r,this.v2=t},THREE.QuadraticBezierCurve.prototype=Object.create(THREE.Curve.prototype),THREE.QuadraticBezierCurve.prototype.constructor=THREE.QuadraticBezierCurve,THREE.QuadraticBezierCurve.prototype.getPoint=function(e){var r=THREE.ShapeUtils.b2;return new THREE.Vector2(r(e,this.v0.x,this.v1.x,this.v2.x),r(e,this.v0.y,this.v1.y,this.v2.y))},THREE.QuadraticBezierCurve.prototype.getTangent=function(e){var r=THREE.CurveUtils.tangentQuadraticBezier;return new THREE.Vector2(r(e,this.v0.x,this.v1.x,this.v2.x),r(e,this.v0.y,this.v1.y,this.v2.y)).normalize()},THREE.CubicBezierCurve=function(e,r,t,n){this.v0=e,this.v1=r,this.v2=t,this.v3=n},THREE.CubicBezierCurve.prototype=Object.create(THREE.Curve.prototype),THREE.CubicBezierCurve.prototype.constructor=THREE.CubicBezierCurve,THREE.CubicBezierCurve.prototype.getPoint=function(e){var r=THREE.ShapeUtils.b3;return new THREE.Vector2(r(e,this.v0.x,this.v1.x,this.v2.x,this.v3.x),r(e,this.v0.y,this.v1.y,this.v2.y,this.v3.y))},THREE.CubicBezierCurve.prototype.getTangent=function(e){var r=THREE.CurveUtils.tangentCubicBezier;return new THREE.Vector2(r(e,this.v0.x,this.v1.x,this.v2.x,this.v3.x),r(e,this.v0.y,this.v1.y,this.v2.y,this.v3.y)).normalize()},THREE.SplineCurve=function(e){this.points=void 0==e?[]:e},THREE.SplineCurve.prototype=Object.create(THREE.Curve.prototype),THREE.SplineCurve.prototype.constructor=THREE.SplineCurve,THREE.SplineCurve.prototype.getPoint=function(e){var r=this.points,t=(r.length-1)*e,n=Math.floor(t),i=t-n,a=r[0===n?n:n-1],o=r[n],s=r[n>r.length-2?r.length-1:n+1],c=r[n>r.length-3?r.length-1:n+2],l=THREE.CurveUtils.interpolate;return new THREE.Vector2(l(a.x,o.x,s.x,c.x,i),l(a.y,o.y,s.y,c.y,i))},THREE.EllipseCurve=function(e,r,t,n,i,a,o,s){this.aX=e,this.aY=r,this.xRadius=t,this.yRadius=n,this.aStartAngle=i,this.aEndAngle=a,this.aClockwise=o,this.aRotation=s||0},THREE.EllipseCurve.prototype=Object.create(THREE.Curve.prototype),THREE.EllipseCurve.prototype.constructor=THREE.EllipseCurve,THREE.EllipseCurve.prototype.getPoint=function(e){var r=this.aEndAngle-this.aStartAngle;0>r&&(r+=2*Math.PI),r>2*Math.PI&&(r-=2*Math.PI);var t;t=this.aClockwise===!0?this.aEndAngle+(1-e)*(2*Math.PI-r):this.aStartAngle+e*r;var n=this.aX+this.xRadius*Math.cos(t),i=this.aY+this.yRadius*Math.sin(t);if(0!==this.aRotation){var a=Math.cos(this.aRotation),o=Math.sin(this.aRotation),s=n,c=i;n=(s-this.aX)*a-(c-this.aY)*o+this.aX,i=(s-this.aX)*o+(c-this.aY)*a+this.aY}return new THREE.Vector2(n,i)},THREE.ArcCurve=function(e,r,t,n,i,a){THREE.EllipseCurve.call(this,e,r,t,t,n,i,a)},THREE.ArcCurve.prototype=Object.create(THREE.EllipseCurve.prototype),THREE.ArcCurve.prototype.constructor=THREE.ArcCurve,THREE.LineCurve3=THREE.Curve.create(function(e,r){this.v1=e,this.v2=r},function(e){var r=new THREE.Vector3;return r.subVectors(this.v2,this.v1),r.multiplyScalar(e),r.add(this.v1),r}),THREE.QuadraticBezierCurve3=THREE.Curve.create(function(e,r,t){this.v0=e,this.v1=r,this.v2=t},function(e){var r=THREE.ShapeUtils.b2;return new THREE.Vector3(r(e,this.v0.x,this.v1.x,this.v2.x),r(e,this.v0.y,this.v1.y,this.v2.y),r(e,this.v0.z,this.v1.z,this.v2.z))}),THREE.CubicBezierCurve3=THREE.Curve.create(function(e,r,t,n){this.v0=e,this.v1=r,this.v2=t,this.v3=n},function(e){var r=THREE.ShapeUtils.b3;return new THREE.Vector3(r(e,this.v0.x,this.v1.x,this.v2.x,this.v3.x),r(e,this.v0.y,this.v1.y,this.v2.y,this.v3.y),r(e,this.v0.z,this.v1.z,this.v2.z,this.v3.z))}),THREE.SplineCurve3=THREE.Curve.create(function(e){console.warn("THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3"),this.points=void 0==e?[]:e},function(e){var r=this.points,t=(r.length-1)*e,n=Math.floor(t),i=t-n,a=r[0==n?n:n-1],o=r[n],s=r[n>r.length-2?r.length-1:n+1],c=r[n>r.length-3?r.length-1:n+2],l=THREE.CurveUtils.interpolate;return new THREE.Vector3(l(a.x,o.x,s.x,c.x,i),l(a.y,o.y,s.y,c.y,i),l(a.z,o.z,s.z,c.z,i))}),THREE.CatmullRomCurve3=function(){function e(){}var r=new THREE.Vector3,t=new e,n=new e,i=new e;return e.prototype.init=function(e,r,t,n){this.c0=e,this.c1=t,this.c2=-3*e+3*r-2*t-n,this.c3=2*e-2*r+t+n},e.prototype.initNonuniformCatmullRom=function(e,r,t,n,i,a,o){var s=(r-e)/i-(t-e)/(i+a)+(t-r)/a,c=(t-r)/a-(n-r)/(a+o)+(n-t)/o;s*=a,c*=a,this.init(r,t,s,c)},e.prototype.initCatmullRom=function(e,r,t,n,i){this.init(r,t,i*(t-e),i*(n-r))},e.prototype.calc=function(e){var r=e*e,t=r*e;return this.c0+this.c1*e+this.c2*r+this.c3*t},THREE.Curve.create(function(e){this.points=e||[],this.closed=!1},function(e){var a,o,s,c,l=this.points;c=l.length,2>c&&console.log("duh, you need at least 2 points"),a=(c-(this.closed?0:1))*e,o=Math.floor(a),s=a-o,this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/l.length)+1)*l.length:0===s&&o===c-1&&(o=c-2,s=1);var h,d,u,p;if(this.closed||o>0?h=l[(o-1)%c]:(r.subVectors(l[0],l[1]).add(l[0]),h=r),d=l[o%c],u=l[(o+1)%c],this.closed||c>o+2?p=l[(o+2)%c]:(r.subVectors(l[c-1],l[c-2]).add(l[c-1]),p=r),void 0===this.type||"centripetal"===this.type||"chordal"===this.type){var f="chordal"===this.type?.5:.25,m=Math.pow(h.distanceToSquared(d),f),E=Math.pow(d.distanceToSquared(u),f),g=Math.pow(u.distanceToSquared(p),f);1e-4>E&&(E=1),1e-4>m&&(m=E),1e-4>g&&(g=E),t.initNonuniformCatmullRom(h.x,d.x,u.x,p.x,m,E,g),n.initNonuniformCatmullRom(h.y,d.y,u.y,p.y,m,E,g),i.initNonuniformCatmullRom(h.z,d.z,u.z,p.z,m,E,g)}else if("catmullrom"===this.type){var v=void 0!==this.tension?this.tension:.5;t.initCatmullRom(h.x,d.x,u.x,p.x,v),n.initCatmullRom(h.y,d.y,u.y,p.y,v),i.initCatmullRom(h.z,d.z,u.z,p.z,v)}var T=new THREE.Vector3(t.calc(s),n.calc(s),i.calc(s));return T})}(),THREE.ClosedSplineCurve3=function(e){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3."),THREE.CatmullRomCurve3.call(this,e),this.type="catmullrom",this.closed=!0},THREE.ClosedSplineCurve3.prototype=Object.create(THREE.CatmullRomCurve3.prototype),THREE.BoxGeometry=function(e,r,t,n,i,a){THREE.Geometry.call(this),this.type="BoxGeometry",this.parameters={width:e,height:r,depth:t,widthSegments:n,heightSegments:i,depthSegments:a},this.fromBufferGeometry(new THREE.BoxBufferGeometry(e,r,t,n,i,a)),this.mergeVertices()},THREE.BoxGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.BoxGeometry.prototype.constructor=THREE.BoxGeometry,THREE.CubeGeometry=THREE.BoxGeometry,THREE.BoxBufferGeometry=function(e,r,t,n,i,a){function o(e,r,t){var n=0;return n+=(e+1)*(r+1)*2,n+=(e+1)*(t+1)*2,n+=(t+1)*(r+1)*2}function s(e,r,t){var n=0;return n+=e*r*2,n+=e*t*2,n+=t*r*2,6*n}function c(e,r,t,n,i,a,o,s,c,h,d){for(var y=a/c,x=o/h,R=a/2,b=o/2,H=s/2,M=c+1,S=h+1,w=0,L=0,C=new THREE.Vector3,P=0;S>P;P++)for(var A=P*x-b,D=0;M>D;D++){var I=D*y-R;C[e]=I*n,C[r]=A*i,C[t]=H,p[E]=C.x,p[E+1]=C.y,p[E+2]=C.z,C[e]=0,C[r]=0,C[t]=s>0?1:-1,f[E]=C.x,f[E+1]=C.y,f[E+2]=C.z,m[g]=D/c,m[g+1]=1-P/h,E+=3,g+=2,w+=1}for(P=0;h>P;P++)for(D=0;c>D;D++){var U=T+D+M*P,N=T+D+M*(P+1),O=T+(D+1)+M*(P+1),B=T+(D+1)+M*P;u[v]=U,u[v+1]=N,u[v+2]=B,u[v+3]=N,u[v+4]=O,u[v+5]=B,v+=6,L+=6}l.addGroup(_,L,d),_+=L,T+=w}THREE.BufferGeometry.call(this),this.type="BoxBufferGeometry",this.parameters={width:e,height:r,depth:t,widthSegments:n,heightSegments:i,depthSegments:a};var l=this;n=Math.floor(n)||1,i=Math.floor(i)||1,a=Math.floor(a)||1;var h=o(n,i,a),d=s(n,i,a),u=new(d>65535?Uint32Array:Uint16Array)(d),p=new Float32Array(3*h),f=new Float32Array(3*h),m=new Float32Array(2*h),E=0,g=0,v=0,T=0,_=0;c("z","y","x",-1,-1,t,r,e,a,i,0),c("z","y","x",1,-1,t,r,-e,a,i,1),c("x","z","y",1,1,e,t,r,n,a,2),c("x","z","y",1,-1,e,t,-r,n,a,3),c("x","y","z",1,-1,e,r,t,n,i,4),c("x","y","z",-1,-1,e,r,-t,n,i,5),this.setIndex(new THREE.BufferAttribute(u,1)),this.addAttribute("position",new THREE.BufferAttribute(p,3)),this.addAttribute("normal",new THREE.BufferAttribute(f,3)),this.addAttribute("uv",new THREE.BufferAttribute(m,2))},THREE.BoxBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.BoxBufferGeometry.prototype.constructor=THREE.BoxBufferGeometry,THREE.CircleGeometry=function(e,r,t,n){THREE.Geometry.call(this),this.type="CircleGeometry",this.parameters={radius:e,segments:r,thetaStart:t,thetaLength:n},this.fromBufferGeometry(new THREE.CircleBufferGeometry(e,r,t,n))},THREE.CircleGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.CircleGeometry.prototype.constructor=THREE.CircleGeometry,THREE.CircleBufferGeometry=function(e,r,t,n){THREE.BufferGeometry.call(this),this.type="CircleBufferGeometry",this.parameters={radius:e,segments:r,thetaStart:t,thetaLength:n},e=e||50,r=void 0!==r?Math.max(3,r):8,t=void 0!==t?t:0,n=void 0!==n?n:2*Math.PI;var i=r+2,a=new Float32Array(3*i),o=new Float32Array(3*i),s=new Float32Array(2*i);o[2]=1,s[0]=.5,s[1]=.5;for(var c=0,l=3,h=2;r>=c;c++,l+=3,h+=2){var d=t+c/r*n;a[l]=e*Math.cos(d),a[l+1]=e*Math.sin(d),o[l+2]=1,s[h]=(a[l]/e+1)/2,s[h+1]=(a[l+1]/e+1)/2}for(var u=[],l=1;r>=l;l++)u.push(l,l+1,0);this.setIndex(new THREE.BufferAttribute(new Uint16Array(u),1)),this.addAttribute("position",new THREE.BufferAttribute(a,3)),this.addAttribute("normal",new THREE.BufferAttribute(o,3)),this.addAttribute("uv",new THREE.BufferAttribute(s,2)),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,e)},THREE.CircleBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.CircleBufferGeometry.prototype.constructor=THREE.CircleBufferGeometry,THREE.CylinderBufferGeometry=function(e,r,t,n,i,a,o,s){function c(){var e=(n+1)*(i+1);return a===!1&&(e+=(n+1)*p+n*p),e}function l(){var e=n*i*2*3;return a===!1&&(e+=n*p*3),e}function h(){var a,c,l=new THREE.Vector3,h=new THREE.Vector3,d=0,p=(r-e)/t;for(c=0;i>=c;c++){var f=[],m=c/i,H=m*(r-e)+e;for(a=0;n>=a;a++){var M=a/n;h.x=H*Math.sin(M*s+o),h.y=-m*t+R,h.z=H*Math.cos(M*s+o),g.setXYZ(_,h.x,h.y,h.z),l.copy(h),(0===e&&0===c||0===r&&c===i)&&(l.x=Math.sin(M*s+o),l.z=Math.cos(M*s+o)),l.setY(Math.sqrt(l.x*l.x+l.z*l.z)*p).normalize(),v.setXYZ(_,l.x,l.y,l.z),T.setXY(_,M,1-m),f.push(_),_++}x.push(f)}for(a=0;n>a;a++)for(c=0;i>c;c++){var S=x[c][a],w=x[c+1][a],L=x[c+1][a+1],C=x[c][a+1];E.setX(y,S),y++,E.setX(y,w),y++,E.setX(y,C),y++,E.setX(y,w),y++,E.setX(y,L),y++,E.setX(y,C),y++,d+=6}u.addGroup(b,d,0),b+=d}function d(t){var i,a,c,l=new THREE.Vector2,h=new THREE.Vector3,d=0,p=t===!0?e:r,f=t===!0?1:-1;for(a=_,i=1;n>=i;i++)g.setXYZ(_,0,R*f,0),v.setXYZ(_,0,f,0),l.x=.5,l.y=.5,T.setXY(_,l.x,l.y),_++;for(c=_,i=0;n>=i;i++){var m=i/n,x=m*s+o,H=Math.cos(x),M=Math.sin(x);h.x=p*M,h.y=R*f,h.z=p*H,g.setXYZ(_,h.x,h.y,h.z),v.setXYZ(_,0,f,0),l.x=.5*H+.5,l.y=.5*M*f+.5,T.setXY(_,l.x,l.y),_++}for(i=0;n>i;i++){var S=a+i,w=c+i;t===!0?(E.setX(y,w),y++,E.setX(y,w+1),y++,E.setX(y,S),y++):(E.setX(y,w+1),y++,E.setX(y,w),y++,E.setX(y,S),y++),d+=3}u.addGroup(b,d,t===!0?1:2),b+=d}THREE.BufferGeometry.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:e,radiusBottom:r,height:t,radialSegments:n,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s};var u=this;e=void 0!==e?e:20,r=void 0!==r?r:20,t=void 0!==t?t:100,n=Math.floor(n)||8,i=Math.floor(i)||1,
a=void 0!==a?a:!1,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var p=0;a===!1&&(e>0&&p++,r>0&&p++);var f=c(),m=l(),E=new THREE.BufferAttribute(new(m>65535?Uint32Array:Uint16Array)(m),1),g=new THREE.BufferAttribute(new Float32Array(3*f),3),v=new THREE.BufferAttribute(new Float32Array(3*f),3),T=new THREE.BufferAttribute(new Float32Array(2*f),2),_=0,y=0,x=[],R=t/2,b=0;h(),a===!1&&(e>0&&d(!0),r>0&&d(!1)),this.setIndex(E),this.addAttribute("position",g),this.addAttribute("normal",v),this.addAttribute("uv",T)},THREE.CylinderBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.CylinderBufferGeometry.prototype.constructor=THREE.CylinderBufferGeometry,THREE.CylinderGeometry=function(e,r,t,n,i,a,o,s){THREE.Geometry.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:r,height:t,radialSegments:n,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new THREE.CylinderBufferGeometry(e,r,t,n,i,a,o,s)),this.mergeVertices()},THREE.CylinderGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.CylinderGeometry.prototype.constructor=THREE.CylinderGeometry,THREE.ConeBufferGeometry=function(e,r,t,n,i,a,o){THREE.CylinderBufferGeometry.call(this,0,e,r,t,n,i,a,o),this.type="ConeBufferGeometry",this.parameters={radius:e,height:r,radialSegments:t,heightSegments:n,thetaStart:a,thetaLength:o}},THREE.ConeBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.ConeBufferGeometry.prototype.constructor=THREE.ConeBufferGeometry,THREE.ConeGeometry=function(e,r,t,n,i,a,o){THREE.CylinderGeometry.call(this,0,e,r,t,n,i,a,o),this.type="ConeGeometry",this.parameters={radius:e,height:r,radialSegments:t,heightSegments:n,openEnded:i,thetaStart:a,thetaLength:o}},THREE.ConeGeometry.prototype=Object.create(THREE.CylinderGeometry.prototype),THREE.ConeGeometry.prototype.constructor=THREE.ConeGeometry,THREE.EdgesGeometry=function(e,r){function t(e,r){return e-r}THREE.BufferGeometry.call(this),r=void 0!==r?r:1;var n,i=Math.cos(THREE.Math.DEG2RAD*r),a=[0,0],o={},s=["a","b","c"];e instanceof THREE.BufferGeometry?(n=new THREE.Geometry,n.fromBufferGeometry(e)):n=e.clone(),n.mergeVertices(),n.computeFaceNormals();for(var c=n.vertices,l=n.faces,h=0,d=l.length;d>h;h++)for(var u=l[h],p=0;3>p;p++){a[0]=u[s[p]],a[1]=u[s[(p+1)%3]],a.sort(t);var f=a.toString();void 0===o[f]?o[f]={vert1:a[0],vert2:a[1],face1:h,face2:void 0}:o[f].face2=h}var m=[];for(var f in o){var E=o[f];if(void 0===E.face2||l[E.face1].normal.dot(l[E.face2].normal)<=i){var g=c[E.vert1];m.push(g.x),m.push(g.y),m.push(g.z),g=c[E.vert2],m.push(g.x),m.push(g.y),m.push(g.z)}}this.addAttribute("position",new THREE.BufferAttribute(new Float32Array(m),3))},THREE.EdgesGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.EdgesGeometry.prototype.constructor=THREE.EdgesGeometry,THREE.ExtrudeGeometry=function(e,r){return"undefined"==typeof e?void(e=[]):(THREE.Geometry.call(this),this.type="ExtrudeGeometry",e=Array.isArray(e)?e:[e],this.addShapeList(e,r),void this.computeFaceNormals())},THREE.ExtrudeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ExtrudeGeometry.prototype.constructor=THREE.ExtrudeGeometry,THREE.ExtrudeGeometry.prototype.addShapeList=function(e,r){for(var t=e.length,n=0;t>n;n++){var i=e[n];this.addShape(i,r)}},THREE.ExtrudeGeometry.prototype.addShape=function(e,r){function t(e,r,t){return r||console.error("THREE.ExtrudeGeometry: vec does not exist"),r.clone().multiplyScalar(t).add(e)}function n(e,r,t){var n,i,a=1,o=e.x-r.x,s=e.y-r.y,c=t.x-e.x,l=t.y-e.y,h=o*o+s*s,d=o*l-s*c;if(Math.abs(d)>Number.EPSILON){var u=Math.sqrt(h),p=Math.sqrt(c*c+l*l),f=r.x-s/u,m=r.y+o/u,E=t.x-l/p,g=t.y+c/p,v=((E-f)*l-(g-m)*c)/(o*l-s*c);n=f+o*v-e.x,i=m+s*v-e.y;var T=n*n+i*i;if(2>=T)return new THREE.Vector2(n,i);a=Math.sqrt(T/2)}else{var _=!1;o>Number.EPSILON?c>Number.EPSILON&&(_=!0):o<-Number.EPSILON?c<-Number.EPSILON&&(_=!0):Math.sign(s)===Math.sign(l)&&(_=!0),_?(n=-s,i=o,a=Math.sqrt(h)):(n=o,i=s,a=Math.sqrt(h/2))}return new THREE.Vector2(n/a,i/a)}function i(){if(T){var e=0,r=z*e;for(W=0;k>W;W++)V=I[W],c(V[2]+r,V[1]+r,V[0]+r);for(e=y+2*v,r=z*e,W=0;k>W;W++)V=I[W],c(V[0]+r,V[1]+r,V[2]+r)}else{for(W=0;k>W;W++)V=I[W],c(V[2],V[1],V[0]);for(W=0;k>W;W++)V=I[W],c(V[0]+z*y,V[1]+z*y,V[2]+z*y)}}function a(){var e=0;for(o(U,e),e+=U.length,M=0,S=A.length;S>M;M++)H=A[M],o(H,e),e+=H.length}function o(e,r){var t,n;for(W=e.length;--W>=0;){t=W,n=W-1,0>n&&(n=e.length-1);var i=0,a=y+2*v;for(i=0;a>i;i++){var o=z*i,s=z*(i+1),c=r+t+o,h=r+n+o,d=r+n+s,u=r+t+s;l(c,h,d,u,e,i,a,t,n)}}}function s(e,r,t){w.vertices.push(new THREE.Vector3(e,r,t))}function c(e,r,t){e+=L,r+=L,t+=L,w.faces.push(new THREE.Face3(e,r,t,null,null,0));var n=b.generateTopUV(w,e,r,t);w.faceVertexUvs[0].push(n)}function l(e,r,t,n,i,a,o,s,c){e+=L,r+=L,t+=L,n+=L,w.faces.push(new THREE.Face3(e,r,n,null,null,1)),w.faces.push(new THREE.Face3(r,t,n,null,null,1));var l=b.generateSideWallUV(w,e,r,t,n);w.faceVertexUvs[0].push([l[0],l[1],l[3]]),w.faceVertexUvs[0].push([l[1],l[2],l[3]])}var h,d,u,p,f,m=void 0!==r.amount?r.amount:100,E=void 0!==r.bevelThickness?r.bevelThickness:6,g=void 0!==r.bevelSize?r.bevelSize:E-2,v=void 0!==r.bevelSegments?r.bevelSegments:3,T=void 0!==r.bevelEnabled?r.bevelEnabled:!0,_=void 0!==r.curveSegments?r.curveSegments:12,y=void 0!==r.steps?r.steps:1,x=r.extrudePath,R=!1,b=void 0!==r.UVGenerator?r.UVGenerator:THREE.ExtrudeGeometry.WorldUVGenerator;x&&(h=x.getSpacedPoints(y),R=!0,T=!1,d=void 0!==r.frames?r.frames:new THREE.TubeGeometry.FrenetFrames(x,y,!1),u=new THREE.Vector3,p=new THREE.Vector3,f=new THREE.Vector3),T||(v=0,E=0,g=0);var H,M,S,w=this,L=this.vertices.length,C=e.extractPoints(_),P=C.shape,A=C.holes,D=!THREE.ShapeUtils.isClockWise(P);if(D){for(P=P.reverse(),M=0,S=A.length;S>M;M++)H=A[M],THREE.ShapeUtils.isClockWise(H)&&(A[M]=H.reverse());D=!1}var I=THREE.ShapeUtils.triangulateShape(P,A),U=P;for(M=0,S=A.length;S>M;M++)H=A[M],P=P.concat(H);for(var N,O,B,F,G,V,z=P.length,k=I.length,j=[],W=0,X=U.length,Y=X-1,q=W+1;X>W;W++,Y++,q++)Y===X&&(Y=0),q===X&&(q=0),j[W]=n(U[W],U[Y],U[q]);var Z,K=[],Q=j.concat();for(M=0,S=A.length;S>M;M++){for(H=A[M],Z=[],W=0,X=H.length,Y=X-1,q=W+1;X>W;W++,Y++,q++)Y===X&&(Y=0),q===X&&(q=0),Z[W]=n(H[W],H[Y],H[q]);K.push(Z),Q=Q.concat(Z)}for(N=0;v>N;N++){for(B=N/v,F=E*(1-B),O=g*Math.sin(B*Math.PI/2),W=0,X=U.length;X>W;W++)G=t(U[W],j[W],O),s(G.x,G.y,-F);for(M=0,S=A.length;S>M;M++)for(H=A[M],Z=K[M],W=0,X=H.length;X>W;W++)G=t(H[W],Z[W],O),s(G.x,G.y,-F)}for(O=g,W=0;z>W;W++)G=T?t(P[W],Q[W],O):P[W],R?(p.copy(d.normals[0]).multiplyScalar(G.x),u.copy(d.binormals[0]).multiplyScalar(G.y),f.copy(h[0]).add(p).add(u),s(f.x,f.y,f.z)):s(G.x,G.y,0);var J;for(J=1;y>=J;J++)for(W=0;z>W;W++)G=T?t(P[W],Q[W],O):P[W],R?(p.copy(d.normals[J]).multiplyScalar(G.x),u.copy(d.binormals[J]).multiplyScalar(G.y),f.copy(h[J]).add(p).add(u),s(f.x,f.y,f.z)):s(G.x,G.y,m/y*J);for(N=v-1;N>=0;N--){for(B=N/v,F=E*(1-B),O=g*Math.sin(B*Math.PI/2),W=0,X=U.length;X>W;W++)G=t(U[W],j[W],O),s(G.x,G.y,m+F);for(M=0,S=A.length;S>M;M++)for(H=A[M],Z=K[M],W=0,X=H.length;X>W;W++)G=t(H[W],Z[W],O),R?s(G.x,G.y+h[y-1].y,h[y-1].x+F):s(G.x,G.y,m+F)}i(),a()},THREE.ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(e,r,t,n){var i=e.vertices,a=i[r],o=i[t],s=i[n];return[new THREE.Vector2(a.x,a.y),new THREE.Vector2(o.x,o.y),new THREE.Vector2(s.x,s.y)]},generateSideWallUV:function(e,r,t,n,i){var a=e.vertices,o=a[r],s=a[t],c=a[n],l=a[i];return Math.abs(o.y-s.y)<.01?[new THREE.Vector2(o.x,1-o.z),new THREE.Vector2(s.x,1-s.z),new THREE.Vector2(c.x,1-c.z),new THREE.Vector2(l.x,1-l.z)]:[new THREE.Vector2(o.y,1-o.z),new THREE.Vector2(s.y,1-s.z),new THREE.Vector2(c.y,1-c.z),new THREE.Vector2(l.y,1-l.z)]}},THREE.ShapeGeometry=function(e,r){THREE.Geometry.call(this),this.type="ShapeGeometry",Array.isArray(e)===!1&&(e=[e]),this.addShapeList(e,r),this.computeFaceNormals()},THREE.ShapeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ShapeGeometry.prototype.constructor=THREE.ShapeGeometry,THREE.ShapeGeometry.prototype.addShapeList=function(e,r){for(var t=0,n=e.length;n>t;t++)this.addShape(e[t],r);return this},THREE.ShapeGeometry.prototype.addShape=function(e,r){void 0===r&&(r={});var t,n,i,a=void 0!==r.curveSegments?r.curveSegments:12,o=r.material,s=void 0===r.UVGenerator?THREE.ExtrudeGeometry.WorldUVGenerator:r.UVGenerator,c=this.vertices.length,l=e.extractPoints(a),h=l.shape,d=l.holes,u=!THREE.ShapeUtils.isClockWise(h);if(u){for(h=h.reverse(),t=0,n=d.length;n>t;t++)i=d[t],THREE.ShapeUtils.isClockWise(i)&&(d[t]=i.reverse());u=!1}var p=THREE.ShapeUtils.triangulateShape(h,d);for(t=0,n=d.length;n>t;t++)i=d[t],h=h.concat(i);var f,m,E=h.length,g=p.length;for(t=0;E>t;t++)f=h[t],this.vertices.push(new THREE.Vector3(f.x,f.y,0));for(t=0;g>t;t++){m=p[t];var v=m[0]+c,T=m[1]+c,_=m[2]+c;this.faces.push(new THREE.Face3(v,T,_,null,null,o)),this.faceVertexUvs[0].push(s.generateTopUV(this,v,T,_))}},THREE.LatheBufferGeometry=function(e,r,t,n){THREE.BufferGeometry.call(this),this.type="LatheBufferGeometry",this.parameters={points:e,segments:r,phiStart:t,phiLength:n},r=Math.floor(r)||12,t=t||0,n=n||2*Math.PI,n=THREE.Math.clamp(n,0,2*Math.PI);var i,a,o,s=(r+1)*e.length,c=r*e.length*2*3,l=new THREE.BufferAttribute(new(c>65535?Uint32Array:Uint16Array)(c),1),h=new THREE.BufferAttribute(new Float32Array(3*s),3),d=new THREE.BufferAttribute(new Float32Array(2*s),2),u=0,p=0,f=(1/(e.length-1),1/r),m=new THREE.Vector3,E=new THREE.Vector2;for(a=0;r>=a;a++){var g=t+a*f*n,v=Math.sin(g),T=Math.cos(g);for(o=0;o<=e.length-1;o++)m.x=e[o].x*v,m.y=e[o].y,m.z=e[o].x*T,h.setXYZ(u,m.x,m.y,m.z),E.x=a/r,E.y=o/(e.length-1),d.setXY(u,E.x,E.y),u++}for(a=0;r>a;a++)for(o=0;o<e.length-1;o++){i=o+a*e.length;var _=i,y=i+e.length,x=i+e.length+1,R=i+1;l.setX(p,_),p++,l.setX(p,y),p++,l.setX(p,R),p++,l.setX(p,y),p++,l.setX(p,x),p++,l.setX(p,R),p++}if(this.setIndex(l),this.addAttribute("position",h),this.addAttribute("uv",d),this.computeVertexNormals(),n===2*Math.PI){var b=this.attributes.normal.array,H=new THREE.Vector3,M=new THREE.Vector3,S=new THREE.Vector3;for(i=r*e.length*3,a=0,o=0;a<e.length;a++,o+=3)H.x=b[o+0],H.y=b[o+1],H.z=b[o+2],M.x=b[i+o+0],M.y=b[i+o+1],M.z=b[i+o+2],S.addVectors(H,M).normalize(),b[o+0]=b[i+o+0]=S.x,b[o+1]=b[i+o+1]=S.y,b[o+2]=b[i+o+2]=S.z}},THREE.LatheBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.LatheBufferGeometry.prototype.constructor=THREE.LatheBufferGeometry,THREE.LatheGeometry=function(e,r,t,n){THREE.Geometry.call(this),this.type="LatheGeometry",this.parameters={points:e,segments:r,phiStart:t,phiLength:n},this.fromBufferGeometry(new THREE.LatheBufferGeometry(e,r,t,n)),this.mergeVertices()},THREE.LatheGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.LatheGeometry.prototype.constructor=THREE.LatheGeometry,THREE.PlaneGeometry=function(e,r,t,n){THREE.Geometry.call(this),this.type="PlaneGeometry",this.parameters={width:e,height:r,widthSegments:t,heightSegments:n},this.fromBufferGeometry(new THREE.PlaneBufferGeometry(e,r,t,n))},THREE.PlaneGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.PlaneGeometry.prototype.constructor=THREE.PlaneGeometry,THREE.PlaneBufferGeometry=function(e,r,t,n){THREE.BufferGeometry.call(this),this.type="PlaneBufferGeometry",this.parameters={width:e,height:r,widthSegments:t,heightSegments:n};for(var i=e/2,a=r/2,o=Math.floor(t)||1,s=Math.floor(n)||1,c=o+1,l=s+1,h=e/o,d=r/s,u=new Float32Array(c*l*3),p=new Float32Array(c*l*3),f=new Float32Array(c*l*2),m=0,E=0,g=0;l>g;g++)for(var v=g*d-a,T=0;c>T;T++){var _=T*h-i;u[m]=_,u[m+1]=-v,p[m+2]=1,f[E]=T/o,f[E+1]=1-g/s,m+=3,E+=2}m=0;for(var y=new(u.length/3>65535?Uint32Array:Uint16Array)(o*s*6),g=0;s>g;g++)for(var T=0;o>T;T++){var x=T+c*g,R=T+c*(g+1),b=T+1+c*(g+1),H=T+1+c*g;y[m]=x,y[m+1]=R,y[m+2]=H,y[m+3]=R,y[m+4]=b,y[m+5]=H,m+=6}this.setIndex(new THREE.BufferAttribute(y,1)),this.addAttribute("position",new THREE.BufferAttribute(u,3)),this.addAttribute("normal",new THREE.BufferAttribute(p,3)),this.addAttribute("uv",new THREE.BufferAttribute(f,2))},THREE.PlaneBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.PlaneBufferGeometry.prototype.constructor=THREE.PlaneBufferGeometry,THREE.RingBufferGeometry=function(e,r,t,n,i,a){THREE.BufferGeometry.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:e,outerRadius:r,thetaSegments:t,phiSegments:n,thetaStart:i,thetaLength:a},e=e||20,r=r||50,i=void 0!==i?i:0,a=void 0!==a?a:2*Math.PI,t=void 0!==t?Math.max(3,t):8,n=void 0!==n?Math.max(1,n):1;var o,s,c,l=(t+1)*(n+1),h=t*n*2*3,d=new THREE.BufferAttribute(new(h>65535?Uint32Array:Uint16Array)(h),1),u=new THREE.BufferAttribute(new Float32Array(3*l),3),p=new THREE.BufferAttribute(new Float32Array(3*l),3),f=new THREE.BufferAttribute(new Float32Array(2*l),2),m=0,E=0,g=e,v=(r-e)/n,T=new THREE.Vector3,_=new THREE.Vector2;for(s=0;n>=s;s++){for(c=0;t>=c;c++)o=i+c/t*a,T.x=g*Math.cos(o),T.y=g*Math.sin(o),u.setXYZ(m,T.x,T.y,T.z),p.setXYZ(m,0,0,1),_.x=(T.x/r+1)/2,_.y=(T.y/r+1)/2,f.setXY(m,_.x,_.y),m++;g+=v}for(s=0;n>s;s++){var y=s*(t+1);for(c=0;t>c;c++){o=c+y;var x=o,R=o+t+1,b=o+t+2,H=o+1;d.setX(E,x),E++,d.setX(E,R),E++,d.setX(E,b),E++,d.setX(E,x),E++,d.setX(E,b),E++,d.setX(E,H),E++}}this.setIndex(d),this.addAttribute("position",u),this.addAttribute("normal",p),this.addAttribute("uv",f)},THREE.RingBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.RingBufferGeometry.prototype.constructor=THREE.RingBufferGeometry,THREE.RingGeometry=function(e,r,t,n,i,a){THREE.Geometry.call(this),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:r,thetaSegments:t,phiSegments:n,thetaStart:i,thetaLength:a},this.fromBufferGeometry(new THREE.RingBufferGeometry(e,r,t,n,i,a))},THREE.RingGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.RingGeometry.prototype.constructor=THREE.RingGeometry,THREE.SphereGeometry=function(e,r,t,n,i,a,o){THREE.Geometry.call(this),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:r,heightSegments:t,phiStart:n,phiLength:i,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new THREE.SphereBufferGeometry(e,r,t,n,i,a,o))},THREE.SphereGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.SphereGeometry.prototype.constructor=THREE.SphereGeometry,THREE.SphereBufferGeometry=function(e,r,t,n,i,a,o){THREE.BufferGeometry.call(this),this.type="SphereBufferGeometry",this.parameters={radius:e,widthSegments:r,heightSegments:t,phiStart:n,phiLength:i,thetaStart:a,thetaLength:o},e=e||50,r=Math.max(3,Math.floor(r)||8),t=Math.max(2,Math.floor(t)||6),n=void 0!==n?n:0,i=void 0!==i?i:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;for(var s=a+o,c=(r+1)*(t+1),l=new THREE.BufferAttribute(new Float32Array(3*c),3),h=new THREE.BufferAttribute(new Float32Array(3*c),3),d=new THREE.BufferAttribute(new Float32Array(2*c),2),u=0,p=[],f=new THREE.Vector3,m=0;t>=m;m++){for(var E=[],g=m/t,v=0;r>=v;v++){var T=v/r,_=-e*Math.cos(n+T*i)*Math.sin(a+g*o),y=e*Math.cos(a+g*o),x=e*Math.sin(n+T*i)*Math.sin(a+g*o);f.set(_,y,x).normalize(),l.setXYZ(u,_,y,x),h.setXYZ(u,f.x,f.y,f.z),d.setXY(u,T,1-g),E.push(u),u++}p.push(E)}for(var R=[],m=0;t>m;m++)for(var v=0;r>v;v++){var b=p[m][v+1],H=p[m][v],M=p[m+1][v],S=p[m+1][v+1];(0!==m||a>0)&&R.push(b,H,S),(m!==t-1||s<Math.PI)&&R.push(H,M,S)}this.setIndex(new(l.count>65535?THREE.Uint32Attribute:THREE.Uint16Attribute)(R,1)),this.addAttribute("position",l),this.addAttribute("normal",h),this.addAttribute("uv",d),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,e)},THREE.SphereBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.SphereBufferGeometry.prototype.constructor=THREE.SphereBufferGeometry,THREE.TextGeometry=function(e,r){r=r||{};var t=r.font;if(t instanceof THREE.Font==!1)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new THREE.Geometry;var n=t.generateShapes(e,r.size,r.curveSegments);r.amount=void 0!==r.height?r.height:50,void 0===r.bevelThickness&&(r.bevelThickness=10),void 0===r.bevelSize&&(r.bevelSize=8),void 0===r.bevelEnabled&&(r.bevelEnabled=!1),THREE.ExtrudeGeometry.call(this,n,r),this.type="TextGeometry"},THREE.TextGeometry.prototype=Object.create(THREE.ExtrudeGeometry.prototype),THREE.TextGeometry.prototype.constructor=THREE.TextGeometry,THREE.TorusBufferGeometry=function(e,r,t,n,i){THREE.BufferGeometry.call(this),this.type="TorusBufferGeometry",this.parameters={radius:e,tube:r,radialSegments:t,tubularSegments:n,arc:i},e=e||100,r=r||40,t=Math.floor(t)||8,n=Math.floor(n)||6,i=i||2*Math.PI;var a,o,s=(t+1)*(n+1),c=t*n*2*3,l=new(c>65535?Uint32Array:Uint16Array)(c),h=new Float32Array(3*s),d=new Float32Array(3*s),u=new Float32Array(2*s),p=0,f=0,m=0,E=new THREE.Vector3,g=new THREE.Vector3,v=new THREE.Vector3;for(a=0;t>=a;a++)for(o=0;n>=o;o++){var T=o/n*i,_=a/t*Math.PI*2;g.x=(e+r*Math.cos(_))*Math.cos(T),g.y=(e+r*Math.cos(_))*Math.sin(T),g.z=r*Math.sin(_),h[p]=g.x,h[p+1]=g.y,h[p+2]=g.z,E.x=e*Math.cos(T),E.y=e*Math.sin(T),v.subVectors(g,E).normalize(),d[p]=v.x,d[p+1]=v.y,d[p+2]=v.z,u[f]=o/n,u[f+1]=a/t,p+=3,f+=2}for(a=1;t>=a;a++)for(o=1;n>=o;o++){var y=(n+1)*a+o-1,x=(n+1)*(a-1)+o-1,R=(n+1)*(a-1)+o,b=(n+1)*a+o;l[m]=y,l[m+1]=x,l[m+2]=b,l[m+3]=x,l[m+4]=R,l[m+5]=b,m+=6}this.setIndex(new THREE.BufferAttribute(l,1)),this.addAttribute("position",new THREE.BufferAttribute(h,3)),this.addAttribute("normal",new THREE.BufferAttribute(d,3)),this.addAttribute("uv",new THREE.BufferAttribute(u,2))},THREE.TorusBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.TorusBufferGeometry.prototype.constructor=THREE.TorusBufferGeometry,THREE.TorusGeometry=function(e,r,t,n,i){THREE.Geometry.call(this),this.type="TorusGeometry",this.parameters={radius:e,tube:r,radialSegments:t,tubularSegments:n,arc:i},this.fromBufferGeometry(new THREE.TorusBufferGeometry(e,r,t,n,i))},THREE.TorusGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TorusGeometry.prototype.constructor=THREE.TorusGeometry,THREE.TorusKnotBufferGeometry=function(e,r,t,n,i,a){function o(e,r,t,n,i){var a=Math.cos(e),o=Math.sin(e),s=t/r*e,c=Math.cos(s);i.x=n*(2+c)*.5*a,i.y=n*(2+c)*o*.5,i.z=n*Math.sin(s)*.5}THREE.BufferGeometry.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:e,tube:r,tubularSegments:t,radialSegments:n,p:i,q:a},e=e||100,r=r||40,t=Math.floor(t)||64,n=Math.floor(n)||8,i=i||2,a=a||3;var s,c,l=(n+1)*(t+1),h=n*t*2*3,d=new THREE.BufferAttribute(new(h>65535?Uint32Array:Uint16Array)(h),1),u=new THREE.BufferAttribute(new Float32Array(3*l),3),p=new THREE.BufferAttribute(new Float32Array(3*l),3),f=new THREE.BufferAttribute(new Float32Array(2*l),2),m=0,E=0,g=new THREE.Vector3,v=new THREE.Vector3,T=new THREE.Vector2,_=new THREE.Vector3,y=new THREE.Vector3,x=new THREE.Vector3,R=new THREE.Vector3,b=new THREE.Vector3;for(s=0;t>=s;++s){var H=s/t*i*Math.PI*2;for(o(H,i,a,e,_),o(H+.01,i,a,e,y),R.subVectors(y,_),b.addVectors(y,_),x.crossVectors(R,b),b.crossVectors(x,R),x.normalize(),b.normalize(),c=0;n>=c;++c){var M=c/n*Math.PI*2,S=-r*Math.cos(M),w=r*Math.sin(M);g.x=_.x+(S*b.x+w*x.x),g.y=_.y+(S*b.y+w*x.y),g.z=_.z+(S*b.z+w*x.z),u.setXYZ(m,g.x,g.y,g.z),v.subVectors(g,_).normalize(),p.setXYZ(m,v.x,v.y,v.z),T.x=s/t,T.y=c/n,f.setXY(m,T.x,T.y),m++}}for(c=1;t>=c;c++)for(s=1;n>=s;s++){var L=(n+1)*(c-1)+(s-1),C=(n+1)*c+(s-1),P=(n+1)*c+s,A=(n+1)*(c-1)+s;d.setX(E,L),E++,d.setX(E,C),E++,d.setX(E,A),E++,d.setX(E,C),E++,d.setX(E,P),E++,d.setX(E,A),E++}this.setIndex(d),this.addAttribute("position",u),this.addAttribute("normal",p),this.addAttribute("uv",f)},THREE.TorusKnotBufferGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.TorusKnotBufferGeometry.prototype.constructor=THREE.TorusKnotBufferGeometry,THREE.TorusKnotGeometry=function(e,r,t,n,i,a,o){THREE.Geometry.call(this),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:r,tubularSegments:t,radialSegments:n,p:i,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new THREE.TorusKnotBufferGeometry(e,r,t,n,i,a)),this.mergeVertices()},THREE.TorusKnotGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TorusKnotGeometry.prototype.constructor=THREE.TorusKnotGeometry,THREE.TubeGeometry=function(e,r,t,n,i,a){function o(e,r,t){return L.vertices.push(new THREE.Vector3(e,r,t))-1}THREE.Geometry.call(this),this.type="TubeGeometry",this.parameters={path:e,segments:r,radius:t,radialSegments:n,closed:i,taper:a},r=r||64,t=t||1,n=n||8,i=i||!1,a=a||THREE.TubeGeometry.NoTaper;var s,c,l,h,d,u,p,f,m,E,g,v,T,_,y,x,R,b,H,M,S,w=[],L=this,C=r+1,P=new THREE.Vector3,A=new THREE.TubeGeometry.FrenetFrames(e,r,i),D=A.tangents,I=A.normals,U=A.binormals;for(this.tangents=D,this.normals=I,this.binormals=U,E=0;C>E;E++)for(w[E]=[],h=E/(C-1),m=e.getPointAt(h),s=D[E],c=I[E],l=U[E],u=t*a(h),g=0;n>g;g++)d=g/n*2*Math.PI,p=-u*Math.cos(d),f=u*Math.sin(d),P.copy(m),P.x+=p*c.x+f*l.x,P.y+=p*c.y+f*l.y,P.z+=p*c.z+f*l.z,w[E][g]=o(P.x,P.y,P.z);for(E=0;r>E;E++)for(g=0;n>g;g++)v=i?(E+1)%r:E+1,T=(g+1)%n,_=w[E][g],y=w[v][g],x=w[v][T],R=w[E][T],b=new THREE.Vector2(E/r,g/n),H=new THREE.Vector2((E+1)/r,g/n),M=new THREE.Vector2((E+1)/r,(g+1)/n),S=new THREE.Vector2(E/r,(g+1)/n),this.faces.push(new THREE.Face3(_,y,R)),this.faceVertexUvs[0].push([b,H,S]),this.faces.push(new THREE.Face3(y,x,R)),this.faceVertexUvs[0].push([H.clone(),M,S.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},THREE.TubeGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.TubeGeometry.prototype.constructor=THREE.TubeGeometry,THREE.TubeGeometry.NoTaper=function(e){return 1},THREE.TubeGeometry.SinusoidalTaper=function(e){return Math.sin(Math.PI*e)},THREE.TubeGeometry.FrenetFrames=function(e,r,t){function n(){p[0]=new THREE.Vector3,f[0]=new THREE.Vector3,a=Number.MAX_VALUE,o=Math.abs(u[0].x),s=Math.abs(u[0].y),c=Math.abs(u[0].z),a>=o&&(a=o,d.set(1,0,0)),a>=s&&(a=s,d.set(0,1,0)),a>=c&&d.set(0,0,1),m.crossVectors(u[0],d).normalize(),p[0].crossVectors(u[0],m),f[0].crossVectors(u[0],p[0])}var i,a,o,s,c,l,h,d=new THREE.Vector3,u=[],p=[],f=[],m=new THREE.Vector3,E=new THREE.Matrix4,g=r+1;for(this.tangents=u,this.normals=p,this.binormals=f,l=0;g>l;l++)h=l/(g-1),u[l]=e.getTangentAt(h),u[l].normalize();for(n(),l=1;g>l;l++)p[l]=p[l-1].clone(),f[l]=f[l-1].clone(),m.crossVectors(u[l-1],u[l]),m.length()>Number.EPSILON&&(m.normalize(),i=Math.acos(THREE.Math.clamp(u[l-1].dot(u[l]),-1,1)),p[l].applyMatrix4(E.makeRotationAxis(m,i))),f[l].crossVectors(u[l],p[l]);if(t)for(i=Math.acos(THREE.Math.clamp(p[0].dot(p[g-1]),-1,1)),i/=g-1,u[0].dot(m.crossVectors(p[0],p[g-1]))>0&&(i=-i),l=1;g>l;l++)p[l].applyMatrix4(E.makeRotationAxis(u[l],i*l)),f[l].crossVectors(u[l],p[l])},THREE.PolyhedronGeometry=function(e,r,t,n){function i(e){var r=e.normalize().clone();r.index=h.vertices.push(r)-1;var t=s(e)/2/Math.PI+.5,n=c(e)/Math.PI+.5;return r.uv=new THREE.Vector2(t,1-n),r}function a(e,r,t){var n=new THREE.Face3(e.index,r.index,t.index,[e.clone(),r.clone(),t.clone()]);h.faces.push(n),T.copy(e).add(r).add(t).divideScalar(3);var i=s(T);h.faceVertexUvs[0].push([l(e.uv,e,i),l(r.uv,r,i),l(t.uv,t,i)])}function o(e,r){for(var t=Math.pow(2,r),n=i(h.vertices[e.a]),o=i(h.vertices[e.b]),s=i(h.vertices[e.c]),c=[],l=0;t>=l;l++){c[l]=[];for(var d=i(n.clone().lerp(s,l/t)),u=i(o.clone().lerp(s,l/t)),p=t-l,f=0;p>=f;f++)0===f&&l===t?c[l][f]=d:c[l][f]=i(d.clone().lerp(u,f/p))}for(var l=0;t>l;l++)for(var f=0;2*(t-l)-1>f;f++){var m=Math.floor(f/2);f%2===0?a(c[l][m+1],c[l+1][m],c[l][m]):a(c[l][m+1],c[l+1][m+1],c[l+1][m])}}function s(e){return Math.atan2(e.z,-e.x)}function c(e){return Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))}function l(e,r,t){return 0>t&&1===e.x&&(e=new THREE.Vector2(e.x-1,e.y)),0===r.x&&0===r.z&&(e=new THREE.Vector2(t/2/Math.PI+.5,e.y)),e.clone()}THREE.Geometry.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:r,radius:t,detail:n},t=t||1,n=n||0;for(var h=this,d=0,u=e.length;u>d;d+=3)i(new THREE.Vector3(e[d],e[d+1],e[d+2]));for(var p=this.vertices,f=[],d=0,m=0,u=r.length;u>d;d+=3,m++){var E=p[r[d]],g=p[r[d+1]],v=p[r[d+2]];f[m]=new THREE.Face3(E.index,g.index,v.index,[E.clone(),g.clone(),v.clone()])}for(var T=new THREE.Vector3,d=0,u=f.length;u>d;d++)o(f[d],n);for(var d=0,u=this.faceVertexUvs[0].length;u>d;d++){var _=this.faceVertexUvs[0][d],y=_[0].x,x=_[1].x,R=_[2].x,b=Math.max(y,x,R),H=Math.min(y,x,R);b>.9&&.1>H&&(.2>y&&(_[0].x+=1),.2>x&&(_[1].x+=1),.2>R&&(_[2].x+=1))}for(var d=0,u=this.vertices.length;u>d;d++)this.vertices[d].multiplyScalar(t);this.mergeVertices(),this.computeFaceNormals(),this.boundingSphere=new THREE.Sphere(new THREE.Vector3,t)},THREE.PolyhedronGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.PolyhedronGeometry.prototype.constructor=THREE.PolyhedronGeometry,THREE.DodecahedronGeometry=function(e,r){var t=(1+Math.sqrt(5))/2,n=1/t,i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-n,-t,0,-n,t,0,n,-t,0,n,t,-n,-t,0,-n,t,0,n,-t,0,n,t,0,-t,0,-n,t,0,-n,-t,0,n,t,0,n],a=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];THREE.PolyhedronGeometry.call(this,i,a,e,r),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:r}},THREE.DodecahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.DodecahedronGeometry.prototype.constructor=THREE.DodecahedronGeometry,THREE.IcosahedronGeometry=function(e,r){var t=(1+Math.sqrt(5))/2,n=[-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,t,0,1,t,0,-1,-t,0,1,-t,t,0,-1,t,0,1,-t,0,-1,-t,0,1],i=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];THREE.PolyhedronGeometry.call(this,n,i,e,r),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:r}},THREE.IcosahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.IcosahedronGeometry.prototype.constructor=THREE.IcosahedronGeometry,THREE.OctahedronGeometry=function(e,r){var t=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],n=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];THREE.PolyhedronGeometry.call(this,t,n,e,r),this.type="OctahedronGeometry",this.parameters={radius:e,detail:r}},THREE.OctahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.OctahedronGeometry.prototype.constructor=THREE.OctahedronGeometry,THREE.TetrahedronGeometry=function(e,r){var t=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],n=[2,1,0,0,3,2,1,3,0,2,3,1];THREE.PolyhedronGeometry.call(this,t,n,e,r),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:r}},THREE.TetrahedronGeometry.prototype=Object.create(THREE.PolyhedronGeometry.prototype),THREE.TetrahedronGeometry.prototype.constructor=THREE.TetrahedronGeometry,THREE.ParametricGeometry=function(e,r,t){THREE.Geometry.call(this),this.type="ParametricGeometry",this.parameters={func:e,slices:r,stacks:t};var n,i,a,o,s,c=this.vertices,l=this.faces,h=this.faceVertexUvs[0],d=r+1;for(n=0;t>=n;n++)for(s=n/t,i=0;r>=i;i++)o=i/r,a=e(o,s),c.push(a);var u,p,f,m,E,g,v,T;for(n=0;t>n;n++)for(i=0;r>i;i++)u=n*d+i,p=n*d+i+1,f=(n+1)*d+i+1,m=(n+1)*d+i,E=new THREE.Vector2(i/r,n/t),g=new THREE.Vector2((i+1)/r,n/t),v=new THREE.Vector2((i+1)/r,(n+1)/t),T=new THREE.Vector2(i/r,(n+1)/t),l.push(new THREE.Face3(u,p,m)),h.push([E,g,T]),l.push(new THREE.Face3(p,f,m)),h.push([g.clone(),v,T.clone()]);this.computeFaceNormals(),this.computeVertexNormals()},THREE.ParametricGeometry.prototype=Object.create(THREE.Geometry.prototype),THREE.ParametricGeometry.prototype.constructor=THREE.ParametricGeometry,THREE.WireframeGeometry=function(e){function r(e,r){return e-r}THREE.BufferGeometry.call(this);var t=[0,0],n={},i=["a","b","c"];if(e instanceof THREE.Geometry){for(var a=e.vertices,o=e.faces,s=0,c=new Uint32Array(6*o.length),l=0,h=o.length;h>l;l++)for(var d=o[l],u=0;3>u;u++){t[0]=d[i[u]],t[1]=d[i[(u+1)%3]],t.sort(r);var p=t.toString();void 0===n[p]&&(c[2*s]=t[0],c[2*s+1]=t[1],n[p]=!0,s++)}for(var f=new Float32Array(2*s*3),l=0,h=s;h>l;l++)for(var u=0;2>u;u++){var m=a[c[2*l+u]],E=6*l+3*u;f[E+0]=m.x,f[E+1]=m.y,f[E+2]=m.z}this.addAttribute("position",new THREE.BufferAttribute(f,3))}else if(e instanceof THREE.BufferGeometry)if(null!==e.index){var g=e.index.array,a=e.attributes.position,v=e.groups,s=0;0===v.length&&e.addGroup(0,g.length);for(var c=new Uint32Array(2*g.length),T=0,_=v.length;_>T;++T)for(var y=v[T],x=y.start,R=y.count,l=x,b=x+R;b>l;l+=3)for(var u=0;3>u;u++){t[0]=g[l+u],t[1]=g[l+(u+1)%3],t.sort(r);var p=t.toString();void 0===n[p]&&(c[2*s]=t[0],c[2*s+1]=t[1],n[p]=!0,s++)}for(var f=new Float32Array(2*s*3),l=0,h=s;h>l;l++)for(var u=0;2>u;u++){var E=6*l+3*u,H=c[2*l+u];f[E+0]=a.getX(H),f[E+1]=a.getY(H),f[E+2]=a.getZ(H)}this.addAttribute("position",new THREE.BufferAttribute(f,3))}else{for(var a=e.attributes.position.array,s=a.length/3,M=s/3,f=new Float32Array(2*s*3),l=0,h=M;h>l;l++)for(var u=0;3>u;u++){var E=18*l+6*u,S=9*l+3*u;f[E+0]=a[S],f[E+1]=a[S+1],f[E+2]=a[S+2];var H=9*l+3*((u+1)%3);f[E+3]=a[H],f[E+4]=a[H+1],f[E+5]=a[H+2]}this.addAttribute("position",new THREE.BufferAttribute(f,3))}},THREE.WireframeGeometry.prototype=Object.create(THREE.BufferGeometry.prototype),THREE.WireframeGeometry.prototype.constructor=THREE.WireframeGeometry,THREE.AxisHelper=function(e){e=e||1;var r=new Float32Array([0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e]),t=new Float32Array([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1]),n=new THREE.BufferGeometry;n.addAttribute("position",new THREE.BufferAttribute(r,3)),n.addAttribute("color",new THREE.BufferAttribute(t,3));var i=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,n,i)},THREE.AxisHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.AxisHelper.prototype.constructor=THREE.AxisHelper,THREE.ArrowHelper=function(){var e=new THREE.BufferGeometry;e.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,1,0],3));var r=new THREE.CylinderBufferGeometry(0,.5,1,5,1);return r.translate(0,-.5,0),function(t,n,i,a,o,s){THREE.Object3D.call(this),void 0===a&&(a=16776960),void 0===i&&(i=1),void 0===o&&(o=.2*i),void 0===s&&(s=.2*o),this.position.copy(n),this.line=new THREE.Line(e,new THREE.LineBasicMaterial({color:a})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new THREE.Mesh(r,new THREE.MeshBasicMaterial({color:a})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(i,o,s)}}(),THREE.ArrowHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.ArrowHelper.prototype.constructor=THREE.ArrowHelper,THREE.ArrowHelper.prototype.setDirection=function(){var e,r=new THREE.Vector3;return function(t){t.y>.99999?this.quaternion.set(0,0,0,1):t.y<-.99999?this.quaternion.set(1,0,0,0):(r.set(t.z,0,-t.x).normalize(),e=Math.acos(t.y),this.quaternion.setFromAxisAngle(r,e))}}(),THREE.ArrowHelper.prototype.setLength=function(e,r,t){void 0===r&&(r=.2*e),void 0===t&&(t=.2*r),this.line.scale.set(1,Math.max(0,e-r),1),this.line.updateMatrix(),this.cone.scale.set(t,r,t),this.cone.position.y=e,this.cone.updateMatrix()},THREE.ArrowHelper.prototype.setColor=function(e){this.line.material.color.copy(e),this.cone.material.color.copy(e)},THREE.BoxHelper=function(e,r){void 0===r&&(r=16776960);var t=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),i=new THREE.BufferGeometry;i.setIndex(new THREE.BufferAttribute(t,1)),i.addAttribute("position",new THREE.BufferAttribute(n,3)),THREE.LineSegments.call(this,i,new THREE.LineBasicMaterial({color:r})),void 0!==e&&this.update(e)},THREE.BoxHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.BoxHelper.prototype.constructor=THREE.BoxHelper,THREE.BoxHelper.prototype.update=function(){var e=new THREE.Box3;return function(r){if(r instanceof THREE.Box3?e.copy(r):e.setFromObject(r),!e.isEmpty()){var t=e.min,n=e.max,i=this.geometry.attributes.position,a=i.array;
a[0]=n.x,a[1]=n.y,a[2]=n.z,a[3]=t.x,a[4]=n.y,a[5]=n.z,a[6]=t.x,a[7]=t.y,a[8]=n.z,a[9]=n.x,a[10]=t.y,a[11]=n.z,a[12]=n.x,a[13]=n.y,a[14]=t.z,a[15]=t.x,a[16]=n.y,a[17]=t.z,a[18]=t.x,a[19]=t.y,a[20]=t.z,a[21]=n.x,a[22]=t.y,a[23]=t.z,i.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),THREE.BoundingBoxHelper=function(e,r){var t=void 0!==r?r:8947848;this.object=e,this.box=new THREE.Box3,THREE.Mesh.call(this,new THREE.BoxGeometry(1,1,1),new THREE.MeshBasicMaterial({color:t,wireframe:!0}))},THREE.BoundingBoxHelper.prototype=Object.create(THREE.Mesh.prototype),THREE.BoundingBoxHelper.prototype.constructor=THREE.BoundingBoxHelper,THREE.BoundingBoxHelper.prototype.update=function(){this.box.setFromObject(this.object),this.box.size(this.scale),this.box.center(this.position)},THREE.CameraHelper=function(e){function r(e,r,n){t(e,n),t(r,n)}function t(e,r){n.vertices.push(new THREE.Vector3),n.colors.push(new THREE.Color(r)),void 0===a[e]&&(a[e]=[]),a[e].push(n.vertices.length-1)}var n=new THREE.Geometry,i=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors}),a={},o=16755200,s=16711680,c=43775,l=16777215,h=3355443;r("n1","n2",o),r("n2","n4",o),r("n4","n3",o),r("n3","n1",o),r("f1","f2",o),r("f2","f4",o),r("f4","f3",o),r("f3","f1",o),r("n1","f1",o),r("n2","f2",o),r("n3","f3",o),r("n4","f4",o),r("p","n1",s),r("p","n2",s),r("p","n3",s),r("p","n4",s),r("u1","u2",c),r("u2","u3",c),r("u3","u1",c),r("c","t",l),r("p","c",h),r("cn1","cn2",h),r("cn3","cn4",h),r("cf1","cf2",h),r("cf3","cf4",h),THREE.LineSegments.call(this,n,i),this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()},THREE.CameraHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.CameraHelper.prototype.constructor=THREE.CameraHelper,THREE.CameraHelper.prototype.update=function(){function e(e,a,o,s){n.set(a,o,s).unproject(i);var c=t[e];if(void 0!==c)for(var l=0,h=c.length;h>l;l++)r.vertices[c[l]].copy(n)}var r,t,n=new THREE.Vector3,i=new THREE.Camera;return function(){r=this.geometry,t=this.pointMap;var n=1,a=1;i.projectionMatrix.copy(this.camera.projectionMatrix),e("c",0,0,-1),e("t",0,0,1),e("n1",-n,-a,-1),e("n2",n,-a,-1),e("n3",-n,a,-1),e("n4",n,a,-1),e("f1",-n,-a,1),e("f2",n,-a,1),e("f3",-n,a,1),e("f4",n,a,1),e("u1",.7*n,1.1*a,-1),e("u2",.7*-n,1.1*a,-1),e("u3",0,2*a,-1),e("cf1",-n,0,1),e("cf2",n,0,1),e("cf3",0,-a,1),e("cf4",0,a,1),e("cn1",-n,0,-1),e("cn2",n,0,-1),e("cn3",0,-a,-1),e("cn4",0,a,-1),r.verticesNeedUpdate=!0}}(),THREE.DirectionalLightHelper=function(e,r){THREE.Object3D.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,void 0===r&&(r=1);var t=new THREE.BufferGeometry;t.addAttribute("position",new THREE.Float32Attribute([-r,r,0,r,r,0,r,-r,0,-r,-r,0,-r,r,0],3));var n=new THREE.LineBasicMaterial({fog:!1});this.add(new THREE.Line(t,n)),t=new THREE.BufferGeometry,t.addAttribute("position",new THREE.Float32Attribute([0,0,0,0,0,1],3)),this.add(new THREE.Line(t,n)),this.update()},THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.DirectionalLightHelper.prototype.constructor=THREE.DirectionalLightHelper,THREE.DirectionalLightHelper.prototype.dispose=function(){var e=this.children[0],r=this.children[1];e.geometry.dispose(),e.material.dispose(),r.geometry.dispose(),r.material.dispose()},THREE.DirectionalLightHelper.prototype.update=function(){var e=new THREE.Vector3,r=new THREE.Vector3,t=new THREE.Vector3;return function(){e.setFromMatrixPosition(this.light.matrixWorld),r.setFromMatrixPosition(this.light.target.matrixWorld),t.subVectors(r,e);var n=this.children[0],i=this.children[1];n.lookAt(t),n.material.color.copy(this.light.color).multiplyScalar(this.light.intensity),i.lookAt(t),i.scale.z=t.length()}}(),THREE.EdgesHelper=function(e,r,t){var n=void 0!==r?r:16777215;THREE.LineSegments.call(this,new THREE.EdgesGeometry(e.geometry,t),new THREE.LineBasicMaterial({color:n})),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1},THREE.EdgesHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.EdgesHelper.prototype.constructor=THREE.EdgesHelper,THREE.FaceNormalsHelper=function(e,r,t,n){this.object=e,this.size=void 0!==r?r:1;var i=void 0!==t?t:16776960,a=void 0!==n?n:1,o=0,s=this.object.geometry;s instanceof THREE.Geometry?o=s.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var c=new THREE.BufferGeometry,l=new THREE.Float32Attribute(2*o*3,3);c.addAttribute("position",l),THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()},THREE.FaceNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.FaceNormalsHelper.prototype.constructor=THREE.FaceNormalsHelper,THREE.FaceNormalsHelper.prototype.update=function(){var e=new THREE.Vector3,r=new THREE.Vector3,t=new THREE.Matrix3;return function(){this.object.updateMatrixWorld(!0),t.getNormalMatrix(this.object.matrixWorld);for(var n=this.object.matrixWorld,i=this.geometry.attributes.position,a=this.object.geometry,o=a.vertices,s=a.faces,c=0,l=0,h=s.length;h>l;l++){var d=s[l],u=d.normal;e.copy(o[d.a]).add(o[d.b]).add(o[d.c]).divideScalar(3).applyMatrix4(n),r.copy(u).applyMatrix3(t).normalize().multiplyScalar(this.size).add(e),i.setXYZ(c,e.x,e.y,e.z),c+=1,i.setXYZ(c,r.x,r.y,r.z),c+=1}return i.needsUpdate=!0,this}}(),THREE.GridHelper=function(e,r,t,n){t=new THREE.Color(void 0!==t?t:4473924),n=new THREE.Color(void 0!==n?n:8947848);for(var i=[],a=[],o=-e,s=0;e>=o;o+=r){i.push(-e,0,o,e,0,o),i.push(o,0,-e,o,0,e);var c=0===o?t:n;c.toArray(a,s),s+=3,c.toArray(a,s),s+=3,c.toArray(a,s),s+=3,c.toArray(a,s),s+=3}var l=new THREE.BufferGeometry;l.addAttribute("position",new THREE.Float32Attribute(i,3)),l.addAttribute("color",new THREE.Float32Attribute(a,3));var h=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors});THREE.LineSegments.call(this,l,h)},THREE.GridHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.GridHelper.prototype.constructor=THREE.GridHelper,THREE.GridHelper.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},THREE.HemisphereLightHelper=function(e,r){THREE.Object3D.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.colors=[new THREE.Color,new THREE.Color];var t=new THREE.SphereGeometry(r,4,2);t.rotateX(-Math.PI/2);for(var n=0,i=8;i>n;n++)t.faces[n].color=this.colors[4>n?0:1];var a=new THREE.MeshBasicMaterial({vertexColors:THREE.FaceColors,wireframe:!0});this.lightSphere=new THREE.Mesh(t,a),this.add(this.lightSphere),this.update()},THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.HemisphereLightHelper.prototype.constructor=THREE.HemisphereLightHelper,THREE.HemisphereLightHelper.prototype.dispose=function(){this.lightSphere.geometry.dispose(),this.lightSphere.material.dispose()},THREE.HemisphereLightHelper.prototype.update=function(){var e=new THREE.Vector3;return function(){this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity),this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity),this.lightSphere.lookAt(e.setFromMatrixPosition(this.light.matrixWorld).negate()),this.lightSphere.geometry.colorsNeedUpdate=!0}}(),THREE.PointLightHelper=function(e,r){this.light=e,this.light.updateMatrixWorld();var t=new THREE.SphereBufferGeometry(r,4,2),n=new THREE.MeshBasicMaterial({wireframe:!0,fog:!1});n.color.copy(this.light.color).multiplyScalar(this.light.intensity),THREE.Mesh.call(this,t,n),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1},THREE.PointLightHelper.prototype=Object.create(THREE.Mesh.prototype),THREE.PointLightHelper.prototype.constructor=THREE.PointLightHelper,THREE.PointLightHelper.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},THREE.PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)},THREE.SkeletonHelper=function(e){this.bones=this.getBoneList(e);for(var r=new THREE.Geometry,t=0;t<this.bones.length;t++){var n=this.bones[t];n.parent instanceof THREE.Bone&&(r.vertices.push(new THREE.Vector3),r.vertices.push(new THREE.Vector3),r.colors.push(new THREE.Color(0,0,1)),r.colors.push(new THREE.Color(0,1,0)))}r.dynamic=!0;var i=new THREE.LineBasicMaterial({vertexColors:THREE.VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});THREE.LineSegments.call(this,r,i),this.root=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.update()},THREE.SkeletonHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.SkeletonHelper.prototype.constructor=THREE.SkeletonHelper,THREE.SkeletonHelper.prototype.getBoneList=function(e){var r=[];e instanceof THREE.Bone&&r.push(e);for(var t=0;t<e.children.length;t++)r.push.apply(r,this.getBoneList(e.children[t]));return r},THREE.SkeletonHelper.prototype.update=function(){for(var e=this.geometry,r=(new THREE.Matrix4).getInverse(this.root.matrixWorld),t=new THREE.Matrix4,n=0,i=0;i<this.bones.length;i++){var a=this.bones[i];a.parent instanceof THREE.Bone&&(t.multiplyMatrices(r,a.matrixWorld),e.vertices[n].setFromMatrixPosition(t),t.multiplyMatrices(r,a.parent.matrixWorld),e.vertices[n+1].setFromMatrixPosition(t),n+=2)}e.verticesNeedUpdate=!0,e.computeBoundingSphere()},THREE.SpotLightHelper=function(e){THREE.Object3D.call(this),this.light=e,this.light.updateMatrixWorld(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1;for(var r=new THREE.BufferGeometry,t=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],n=0,i=1,a=32;a>n;n++,i++){var o=n/a*Math.PI*2,s=i/a*Math.PI*2;t.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}r.addAttribute("position",new THREE.Float32Attribute(t,3));var c=new THREE.LineBasicMaterial({fog:!1});this.cone=new THREE.LineSegments(r,c),this.add(this.cone),this.update()},THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype),THREE.SpotLightHelper.prototype.constructor=THREE.SpotLightHelper,THREE.SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},THREE.SpotLightHelper.prototype.update=function(){var e=new THREE.Vector3,r=new THREE.Vector3;return function(){var t=this.light.distance?this.light.distance:1e3,n=t*Math.tan(this.light.angle);this.cone.scale.set(n,n,t),e.setFromMatrixPosition(this.light.matrixWorld),r.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(r.sub(e)),this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity)}}(),THREE.VertexNormalsHelper=function(e,r,t,n){this.object=e,this.size=void 0!==r?r:1;var i=void 0!==t?t:16711680,a=void 0!==n?n:1,o=0,s=this.object.geometry;s instanceof THREE.Geometry?o=3*s.faces.length:s instanceof THREE.BufferGeometry&&(o=s.attributes.normal.count);var c=new THREE.BufferGeometry,l=new THREE.Float32Attribute(2*o*3,3);c.addAttribute("position",l),THREE.LineSegments.call(this,c,new THREE.LineBasicMaterial({color:i,linewidth:a})),this.matrixAutoUpdate=!1,this.update()},THREE.VertexNormalsHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.VertexNormalsHelper.prototype.constructor=THREE.VertexNormalsHelper,THREE.VertexNormalsHelper.prototype.update=function(){var e=new THREE.Vector3,r=new THREE.Vector3,t=new THREE.Matrix3;return function(){var n=["a","b","c"];this.object.updateMatrixWorld(!0),t.getNormalMatrix(this.object.matrixWorld);var i=this.object.matrixWorld,a=this.geometry.attributes.position,o=this.object.geometry;if(o instanceof THREE.Geometry)for(var s=o.vertices,c=o.faces,l=0,h=0,d=c.length;d>h;h++)for(var u=c[h],p=0,f=u.vertexNormals.length;f>p;p++){var m=s[u[n[p]]],E=u.vertexNormals[p];e.copy(m).applyMatrix4(i),r.copy(E).applyMatrix3(t).normalize().multiplyScalar(this.size).add(e),a.setXYZ(l,e.x,e.y,e.z),l+=1,a.setXYZ(l,r.x,r.y,r.z),l+=1}else if(o instanceof THREE.BufferGeometry)for(var g=o.attributes.position,v=o.attributes.normal,l=0,p=0,f=g.count;f>p;p++)e.set(g.getX(p),g.getY(p),g.getZ(p)).applyMatrix4(i),r.set(v.getX(p),v.getY(p),v.getZ(p)),r.applyMatrix3(t).normalize().multiplyScalar(this.size).add(e),a.setXYZ(l,e.x,e.y,e.z),l+=1,a.setXYZ(l,r.x,r.y,r.z),l+=1;return a.needsUpdate=!0,this}}(),THREE.WireframeHelper=function(e,r){var t=void 0!==r?r:16777215;THREE.LineSegments.call(this,new THREE.WireframeGeometry(e.geometry),new THREE.LineBasicMaterial({color:t})),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1},THREE.WireframeHelper.prototype=Object.create(THREE.LineSegments.prototype),THREE.WireframeHelper.prototype.constructor=THREE.WireframeHelper,THREE.ImmediateRenderObject=function(e){THREE.Object3D.call(this),this.material=e,this.render=function(e){}},THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype),THREE.ImmediateRenderObject.prototype.constructor=THREE.ImmediateRenderObject,THREE.MorphBlendMesh=function(e,r){THREE.Mesh.call(this,e,r),this.animationsMap={},this.animationsList=[];var t=this.geometry.morphTargets.length,n="__default",i=0,a=t-1,o=t/1;this.createAnimation(n,i,a,o),this.setAnimationWeight(n,1)},THREE.MorphBlendMesh.prototype=Object.create(THREE.Mesh.prototype),THREE.MorphBlendMesh.prototype.constructor=THREE.MorphBlendMesh,THREE.MorphBlendMesh.prototype.createAnimation=function(e,r,t,n){var i={start:r,end:t,length:t-r+1,fps:n,duration:(t-r)/n,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[e]=i,this.animationsList.push(i)},THREE.MorphBlendMesh.prototype.autoCreateAnimations=function(e){for(var r,t=/([a-z]+)_?(\d+)/i,n={},i=this.geometry,a=0,o=i.morphTargets.length;o>a;a++){var s=i.morphTargets[a],c=s.name.match(t);if(c&&c.length>1){var l=c[1];n[l]||(n[l]={start:1/0,end:-(1/0)});var h=n[l];a<h.start&&(h.start=a),a>h.end&&(h.end=a),r||(r=l)}}for(var l in n){var h=n[l];this.createAnimation(l,h.start,h.end,e)}this.firstAnimation=r},THREE.MorphBlendMesh.prototype.setAnimationDirectionForward=function(e){var r=this.animationsMap[e];r&&(r.direction=1,r.directionBackwards=!1)},THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward=function(e){var r=this.animationsMap[e];r&&(r.direction=-1,r.directionBackwards=!0)},THREE.MorphBlendMesh.prototype.setAnimationFPS=function(e,r){var t=this.animationsMap[e];t&&(t.fps=r,t.duration=(t.end-t.start)/t.fps)},THREE.MorphBlendMesh.prototype.setAnimationDuration=function(e,r){var t=this.animationsMap[e];t&&(t.duration=r,t.fps=(t.end-t.start)/t.duration)},THREE.MorphBlendMesh.prototype.setAnimationWeight=function(e,r){var t=this.animationsMap[e];t&&(t.weight=r)},THREE.MorphBlendMesh.prototype.setAnimationTime=function(e,r){var t=this.animationsMap[e];t&&(t.time=r)},THREE.MorphBlendMesh.prototype.getAnimationTime=function(e){var r=0,t=this.animationsMap[e];return t&&(r=t.time),r},THREE.MorphBlendMesh.prototype.getAnimationDuration=function(e){var r=-1,t=this.animationsMap[e];return t&&(r=t.duration),r},THREE.MorphBlendMesh.prototype.playAnimation=function(e){var r=this.animationsMap[e];r?(r.time=0,r.active=!0):console.warn("THREE.MorphBlendMesh: animation["+e+"] undefined in .playAnimation()")},THREE.MorphBlendMesh.prototype.stopAnimation=function(e){var r=this.animationsMap[e];r&&(r.active=!1)},THREE.MorphBlendMesh.prototype.update=function(e){for(var r=0,t=this.animationsList.length;t>r;r++){var n=this.animationsList[r];if(n.active){var i=n.duration/n.length;n.time+=n.direction*e,n.mirroredLoop?(n.time>n.duration||n.time<0)&&(n.direction*=-1,n.time>n.duration&&(n.time=n.duration,n.directionBackwards=!0),n.time<0&&(n.time=0,n.directionBackwards=!1)):(n.time=n.time%n.duration,n.time<0&&(n.time+=n.duration));var a=n.start+THREE.Math.clamp(Math.floor(n.time/i),0,n.length-1),o=n.weight;a!==n.currentFrame&&(this.morphTargetInfluences[n.lastFrame]=0,this.morphTargetInfluences[n.currentFrame]=1*o,this.morphTargetInfluences[a]=0,n.lastFrame=n.currentFrame,n.currentFrame=a);var s=n.time%i/i;n.directionBackwards&&(s=1-s),n.currentFrame!==n.lastFrame?(this.morphTargetInfluences[n.currentFrame]=s*o,this.morphTargetInfluences[n.lastFrame]=(1-s)*o):this.morphTargetInfluences[n.currentFrame]=o}}};var start=function(){function e(){n=new THREE.Scene,i=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1e4),i.position.z=1e3,i.position.y=400,i.lookAt(n.position);var e=new THREE.DirectionalLight(16777215,10);e.position.set(0,2,0),n.add(e),a=new THREE.WebGLRenderer,a.setSize(window.innerWidth,window.innerHeight);var t=new THREE.BoxGeometry(100,100,100),o=new THREE.MeshBasicMaterial({color:16776960}),s=new THREE.Mesh(t,o);n.add(s);var c=new THREE.AxisHelper(500);n.add(c),document.body.appendChild(a.domElement),window.addEventListener("resize",r,!1)}function r(){i.aspect=window.innerWidth/window.innerHeight,i.updateProjectionMatrix(),a.setSize(window.innerWidth,window.innerHeight)}function t(){requestAnimationFrame(t),s+=o.getDelta(),i.position.x=1e3*Math.sin(s),i.position.z=1e3*Math.cos(s),i.lookAt(n.position),a.render(n,i)}var n,i,a,o=new THREE.Clock;e(),t();var s=0};hey3d.game.onStart=function(){new RaymarchingSphere},hey3d.game.run();